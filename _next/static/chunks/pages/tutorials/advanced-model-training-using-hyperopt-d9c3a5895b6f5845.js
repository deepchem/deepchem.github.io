(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[4572],{5292:function(a,s,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/tutorials/advanced-model-training-using-hyperopt",function(){return n(2185)}])},2185:function(a,s,n){"use strict";n.r(s),n.d(s,{default:function(){return d}});var p=n(5893),e=n(1618),t=n(6485),l={html:'<main>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <h1>\n      <strong>\n       Advanced model training using hyperopt\n      </strong>\n      <a class="anchor-link" href="#Advanced-model-training-using-hyperopt">\n       \xb6\n      </a>\n     </h1>\n     <p>\n      In the Advanced Model Training tutorial we have already taken a look into hyperparameter optimasation using GridHyperparamOpt in the deepchem pacakge. In this tutorial, we will take a look into another hyperparameter tuning library called hyperopt.\n     </p>\n     <h2>\n      Colab\n      <a class="anchor-link" href="#Colab">\n       \xb6\n      </a>\n     </h2>\n     <p>\n      This tutorial and the rest in this sequence can be done in Google colab. If you\'d like to open this notebook in colab, you can use the following link.\n     </p>\n     <p>\n      <a href="https://colab.research.google.com/github/deepchem/deepchem/blob/master/examples/tutorials/Hyperopt_training.ipynb">\n       <img alt="Open In Colab" src="https://colab.research.google.com/assets/colab-badge.svg"/>\n      </a>\n     </p>\n     <h2>\n      Setup\n      <a class="anchor-link" href="#Setup">\n       \xb6\n      </a>\n     </h2>\n     <p>\n      To run DeepChem and Hyperopt within Colab, you\'ll need to run the following installation commands. You can of course run this tutorial locally if you prefer. In that case, don\'t run these cells since they will download and install DeepChem and Hyperopt in your local machine again.\n     </p>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[1]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-python">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="err">!</span><span class="n">pip</span> <span class="n">install</span> <span class="n">deepchem</span>\n<span class="err">!</span><span class="n">pip</span> <span class="n">install</span> <span class="n">hyperopt</span>\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n  <div class="jp-Cell-outputWrapper">\n   <div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser">\n   </div>\n   <div class="jp-OutputArea jp-Cell-outputArea">\n    <div class="jp-OutputArea-child">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n     </div>\n     <div class="jp-RenderedText jp-OutputArea-output" data-mime-type="text/plain" tabindex="0">\n      <pre class="overflow-x-scroll font-mono">Collecting deepchem\n  Downloading deepchem-2.6.1-py3-none-any.whl (608 kB)\n\n     |▌                               | 10 kB 31.6 MB/s eta 0:00:01\n     |█                               | 20 kB 27.2 MB/s eta 0:00:01\n     |█▋                              | 30 kB 11.2 MB/s eta 0:00:01\n     |██▏                             | 40 kB 8.9 MB/s eta 0:00:01\n     |██▊                             | 51 kB 5.3 MB/s eta 0:00:01\n     |███▎                            | 61 kB 5.4 MB/s eta 0:00:01\n     |███▊                            | 71 kB 5.4 MB/s eta 0:00:01\n     |████▎                           | 81 kB 6.1 MB/s eta 0:00:01\n     |████▉                           | 92 kB 6.2 MB/s eta 0:00:01\n     |█████▍                          | 102 kB 5.2 MB/s eta 0:00:01\n     |██████                          | 112 kB 5.2 MB/s eta 0:00:01\n     |██████▌                         | 122 kB 5.2 MB/s eta 0:00:01\n     |███████                         | 133 kB 5.2 MB/s eta 0:00:01\n     |███████▌                        | 143 kB 5.2 MB/s eta 0:00:01\n     |████████                        | 153 kB 5.2 MB/s eta 0:00:01\n     |████████▋                       | 163 kB 5.2 MB/s eta 0:00:01\n     |█████████▏                      | 174 kB 5.2 MB/s eta 0:00:01\n     |█████████▊                      | 184 kB 5.2 MB/s eta 0:00:01\n     |██████████▎                     | 194 kB 5.2 MB/s eta 0:00:01\n     |██████████▊                     | 204 kB 5.2 MB/s eta 0:00:01\n     |███████████▎                    | 215 kB 5.2 MB/s eta 0:00:01\n     |███████████▉                    | 225 kB 5.2 MB/s eta 0:00:01\n     |████████████▍                   | 235 kB 5.2 MB/s eta 0:00:01\n     |█████████████                   | 245 kB 5.2 MB/s eta 0:00:01\n     |█████████████▌                  | 256 kB 5.2 MB/s eta 0:00:01\n     |██████████████                  | 266 kB 5.2 MB/s eta 0:00:01\n     |██████████████▌                 | 276 kB 5.2 MB/s eta 0:00:01\n     |███████████████                 | 286 kB 5.2 MB/s eta 0:00:01\n     |███████████████▋                | 296 kB 5.2 MB/s eta 0:00:01\n     |████████████████▏               | 307 kB 5.2 MB/s eta 0:00:01\n     |████████████████▊               | 317 kB 5.2 MB/s eta 0:00:01\n     |█████████████████▎              | 327 kB 5.2 MB/s eta 0:00:01\n     |█████████████████▊              | 337 kB 5.2 MB/s eta 0:00:01\n     |██████████████████▎             | 348 kB 5.2 MB/s eta 0:00:01\n     |██████████████████▉             | 358 kB 5.2 MB/s eta 0:00:01\n     |███████████████████▍            | 368 kB 5.2 MB/s eta 0:00:01\n     |████████████████████            | 378 kB 5.2 MB/s eta 0:00:01\n     |████████████████████▌           | 389 kB 5.2 MB/s eta 0:00:01\n     |█████████████████████           | 399 kB 5.2 MB/s eta 0:00:01\n     |█████████████████████▌          | 409 kB 5.2 MB/s eta 0:00:01\n     |██████████████████████          | 419 kB 5.2 MB/s eta 0:00:01\n     |██████████████████████▋         | 430 kB 5.2 MB/s eta 0:00:01\n     |███████████████████████▏        | 440 kB 5.2 MB/s eta 0:00:01\n     |███████████████████████▊        | 450 kB 5.2 MB/s eta 0:00:01\n     |████████████████████████▎       | 460 kB 5.2 MB/s eta 0:00:01\n     |████████████████████████▉       | 471 kB 5.2 MB/s eta 0:00:01\n     |█████████████████████████▎      | 481 kB 5.2 MB/s eta 0:00:01\n     |█████████████████████████▉      | 491 kB 5.2 MB/s eta 0:00:01\n     |██████████████████████████▍     | 501 kB 5.2 MB/s eta 0:00:01\n     |███████████████████████████     | 512 kB 5.2 MB/s eta 0:00:01\n     |███████████████████████████▌    | 522 kB 5.2 MB/s eta 0:00:01\n     |████████████████████████████    | 532 kB 5.2 MB/s eta 0:00:01\n     |████████████████████████████▌   | 542 kB 5.2 MB/s eta 0:00:01\n     |█████████████████████████████   | 552 kB 5.2 MB/s eta 0:00:01\n     |█████████████████████████████▋  | 563 kB 5.2 MB/s eta 0:00:01\n     |██████████████████████████████▏ | 573 kB 5.2 MB/s eta 0:00:01\n     |██████████████████████████████▊ | 583 kB 5.2 MB/s eta 0:00:01\n     |███████████████████████████████▎| 593 kB 5.2 MB/s eta 0:00:01\n     |███████████████████████████████▉| 604 kB 5.2 MB/s eta 0:00:01\n     |████████████████████████████████| 608 kB 5.2 MB/s \nRequirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from deepchem) (1.4.1)\nCollecting numpy&gt;=1.21\n  Downloading numpy-1.21.5-cp37-cp37m-manylinux_2_12_x86_64.manylinux2010_x86_64.whl (15.7 MB)\n     |████████████████████████████████| 15.7 MB 25.3 MB/s \nRequirement already satisfied: scikit-learn in /usr/local/lib/python3.7/dist-packages (from deepchem) (1.0.2)\nRequirement already satisfied: pandas in /usr/local/lib/python3.7/dist-packages (from deepchem) (1.3.5)\nCollecting rdkit-pypi\n  Downloading rdkit_pypi-2021.9.4-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (20.6 MB)\n     |████████████████████████████████| 20.6 MB 1.4 MB/s \nRequirement already satisfied: joblib in /usr/local/lib/python3.7/dist-packages (from deepchem) (1.1.0)\nRequirement already satisfied: pytz&gt;=2017.3 in /usr/local/lib/python3.7/dist-packages (from pandas-&gt;deepchem) (2018.9)\nRequirement already satisfied: python-dateutil&gt;=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas-&gt;deepchem) (2.8.2)\nRequirement already satisfied: six&gt;=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil&gt;=2.7.3-&gt;pandas-&gt;deepchem) (1.15.0)\nRequirement already satisfied: Pillow in /usr/local/lib/python3.7/dist-packages (from rdkit-pypi-&gt;deepchem) (7.1.2)\nRequirement already satisfied: threadpoolctl&gt;=2.0.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn-&gt;deepchem) (3.1.0)\nInstalling collected packages: numpy, rdkit-pypi, deepchem\n  Attempting uninstall: numpy\n    Found existing installation: numpy 1.19.5\n    Uninstalling numpy-1.19.5:\n      Successfully uninstalled numpy-1.19.5\n<span class="ansi-red-fg">ERROR: pip\'s dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\nyellowbrick 1.3.post1 requires numpy&lt;1.20,&gt;=1.16.0, but you have numpy 1.21.5 which is incompatible.\ndatascience 0.10.6 requires folium==0.2.1, but you have folium 0.8.3 which is incompatible.\nalbumentations 0.1.12 requires imgaug&lt;0.2.7,&gt;=0.2.5, but you have imgaug 0.2.9 which is incompatible.</span>\nSuccessfully installed deepchem-2.6.1 numpy-1.21.5 rdkit-pypi-2021.9.4\n</pre>\n     </div>\n    </div>\n    <div class="jp-OutputArea-child">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n     </div>\n    </div>\n    <div class="jp-OutputArea-child">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n     </div>\n     <div class="jp-RenderedText jp-OutputArea-output" data-mime-type="text/plain" tabindex="0">\n      <pre class="overflow-x-scroll font-mono">Requirement already satisfied: hyperopt in /usr/local/lib/python3.7/dist-packages (0.1.2)\nRequirement already satisfied: networkx in /usr/local/lib/python3.7/dist-packages (from hyperopt) (2.6.3)\nRequirement already satisfied: future in /usr/local/lib/python3.7/dist-packages (from hyperopt) (0.16.0)\nRequirement already satisfied: pymongo in /usr/local/lib/python3.7/dist-packages (from hyperopt) (4.0.1)\nRequirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from hyperopt) (1.4.1)\nRequirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from hyperopt) (1.21.5)\nRequirement already satisfied: tqdm in /usr/local/lib/python3.7/dist-packages (from hyperopt) (4.62.3)\nRequirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from hyperopt) (1.15.0)\n</pre>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <h2>\n      Hyperparameter Optimization via hyperopt\n      <a class="anchor-link" href="#Hyperparameter-Optimization-via-hyperopt">\n       \xb6\n      </a>\n     </h2>\n     <p>\n      Let\'s start by loading the HIV dataset.  It classifies over 40,000 molecules based on whether they inhibit HIV replication.\n     </p>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[2]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-python">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="kn">import</span> <span class="nn">deepchem</span> <span class="k">as</span> <span class="nn">dc</span>\n<span class="n">tasks</span><span class="p">,</span> <span class="n">datasets</span><span class="p">,</span> <span class="n">transformers</span> <span class="o">=</span> <span class="n">dc</span><span class="o">.</span><span class="n">molnet</span><span class="o">.</span><span class="n">load_hiv</span><span class="p">(</span><span class="n">featurizer</span><span class="o">=</span><span class="s1">\'ECFP\'</span><span class="p">,</span> <span class="n">split</span><span class="o">=</span><span class="s1">\'scaffold\'</span><span class="p">)</span>\n<span class="n">train_dataset</span><span class="p">,</span> <span class="n">valid_dataset</span><span class="p">,</span> <span class="n">test_dataset</span> <span class="o">=</span> <span class="n">datasets</span>\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n  <div class="jp-Cell-outputWrapper">\n   <div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser">\n   </div>\n   <div class="jp-OutputArea jp-Cell-outputArea">\n    <div class="jp-OutputArea-child">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n     </div>\n     <div class="jp-RenderedText jp-OutputArea-output" data-mime-type="application/vnd.jupyter.stderr" tabindex="0">\n      <pre class="overflow-x-scroll font-mono">\'split\' is deprecated.  Use \'splitter\' instead.\n</pre>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <p>\n      Now, lets import the hyperopt library, which we will be using to fund the best parameters\n     </p>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell jp-mod-noOutputs">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[3]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-python">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="kn">from</span> <span class="nn">hyperopt</span> <span class="kn">import</span> <span class="n">hp</span><span class="p">,</span> <span class="n">fmin</span><span class="p">,</span> <span class="n">tpe</span><span class="p">,</span> <span class="n">Trials</span>\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <p>\n      Then we have to declare a dictionary with all the hyperparameters and their range that you will be tuning them in. This dictionary will serve as the search space for the hyperopt.\nSome basic ways of declaring the ranges in the dictionary are:\n     </p>\n     <ul>\n      <li>\n       hp.choice(\'label\',[\n       <em>\n        choices\n       </em>\n       ]) : this is used to specify a list of choices\n      </li>\n      <li>\n       hp.uniform(\'label\' ,low=\n       <em>\n        low_value\n       </em>\n       ,high=\n       <em>\n        high_value\n       </em>\n       ) :  this is used to specify a uniform distibution between the low and high values. The values between them can be any real number, not necessaarily an integer.\n      </li>\n     </ul>\n     <p>\n      Here, we are going to use a multitaskclassifier to classify the HIV dataset and hence the appropriate search space is as follows.\n     </p>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell jp-mod-noOutputs">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[\xa0]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-python">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="n">search_space</span> <span class="o">=</span> <span class="p">{</span>\n    <span class="s1">\'layer_sizes\'</span><span class="p">:</span> <span class="n">hp</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="s1">\'layer_sizes\'</span><span class="p">,[[</span><span class="mi">500</span><span class="p">],</span> <span class="p">[</span><span class="mi">1000</span><span class="p">],</span> <span class="p">[</span><span class="mi">2000</span><span class="p">],[</span><span class="mi">1000</span><span class="p">,</span><span class="mi">1000</span><span class="p">]]),</span>\n    <span class="s1">\'dropouts\'</span><span class="p">:</span> <span class="n">hp</span><span class="o">.</span><span class="n">uniform</span><span class="p">(</span><span class="s1">\'dropout\'</span><span class="p">,</span><span class="n">low</span><span class="o">=</span><span class="mf">0.2</span><span class="p">,</span> <span class="n">high</span><span class="o">=</span><span class="mf">0.5</span><span class="p">),</span>\n    <span class="s1">\'learning_rate\'</span><span class="p">:</span> <span class="n">hp</span><span class="o">.</span><span class="n">uniform</span><span class="p">(</span><span class="s1">\'learning_rate\'</span><span class="p">,</span><span class="n">high</span><span class="o">=</span><span class="mf">0.001</span><span class="p">,</span> <span class="n">low</span><span class="o">=</span><span class="mf">0.0001</span><span class="p">)</span>\n<span class="p">}</span>\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <p>\n      We should then declare a function to be minimized by the hyperopt. So, here we should use the function to minimize our multitaskclassifier model. Additionally, we are using a validation callback to validate the classifier for every 1000 steps, then we are passing the best score as the return. The metric used here is \'roc_auc_score\', which needs to be maximized. To maximize a non-negative value is equivalent to minimize its opposite number, hence we are returning the negative of the validation score.\n     </p>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell jp-mod-noOutputs">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[\xa0]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-python">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="kn">import</span> <span class="nn">tempfile</span>\n<span class="c1">#tempfile is used to save the best checkpoint later in the program.</span>\n\n<span class="n">metric</span> <span class="o">=</span> <span class="n">dc</span><span class="o">.</span><span class="n">metrics</span><span class="o">.</span><span class="n">Metric</span><span class="p">(</span><span class="n">dc</span><span class="o">.</span><span class="n">metrics</span><span class="o">.</span><span class="n">roc_auc_score</span><span class="p">)</span>\n\n<span class="k">def</span> <span class="nf">fm</span><span class="p">(</span><span class="n">args</span><span class="p">):</span>\n  <span class="n">save_dir</span> <span class="o">=</span> <span class="n">tempfile</span><span class="o">.</span><span class="n">mkdtemp</span><span class="p">()</span>\n  <span class="n">model</span> <span class="o">=</span> <span class="n">dc</span><span class="o">.</span><span class="n">models</span><span class="o">.</span><span class="n">MultitaskClassifier</span><span class="p">(</span><span class="n">n_tasks</span><span class="o">=</span><span class="nb">len</span><span class="p">(</span><span class="n">tasks</span><span class="p">),</span><span class="n">n_features</span><span class="o">=</span><span class="mi">1024</span><span class="p">,</span><span class="n">layer_sizes</span><span class="o">=</span><span class="n">args</span><span class="p">[</span><span class="s1">\'layer_sizes\'</span><span class="p">],</span><span class="n">dropouts</span><span class="o">=</span><span class="n">args</span><span class="p">[</span><span class="s1">\'dropouts\'</span><span class="p">],</span><span class="n">learning_rate</span><span class="o">=</span><span class="n">args</span><span class="p">[</span><span class="s1">\'learning_rate\'</span><span class="p">])</span>\n  <span class="c1">#validation callback that saves the best checkpoint, i.e the one with the maximum score.</span>\n  <span class="n">validation</span><span class="o">=</span><span class="n">dc</span><span class="o">.</span><span class="n">models</span><span class="o">.</span><span class="n">ValidationCallback</span><span class="p">(</span><span class="n">valid_dataset</span><span class="p">,</span> <span class="mi">1000</span><span class="p">,</span> <span class="p">[</span><span class="n">metric</span><span class="p">],</span><span class="n">save_dir</span><span class="o">=</span><span class="n">save_dir</span><span class="p">,</span><span class="n">transformers</span><span class="o">=</span><span class="n">transformers</span><span class="p">,</span><span class="n">save_on_minimum</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>\n  \n  <span class="n">model</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">train_dataset</span><span class="p">,</span> <span class="n">nb_epoch</span><span class="o">=</span><span class="mi">25</span><span class="p">,</span><span class="n">callbacks</span><span class="o">=</span><span class="n">validation</span><span class="p">)</span>\n\n  <span class="c1">#restoring the best checkpoint and passing the negative of its validation score to be minimized.</span>\n  <span class="n">model</span><span class="o">.</span><span class="n">restore</span><span class="p">(</span><span class="n">model_dir</span><span class="o">=</span><span class="n">save_dir</span><span class="p">)</span>\n  <span class="n">valid_score</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">evaluate</span><span class="p">(</span><span class="n">valid_dataset</span><span class="p">,</span> <span class="p">[</span><span class="n">metric</span><span class="p">],</span> <span class="n">transformers</span><span class="p">)</span>\n\n  <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">*</span><span class="n">valid_score</span><span class="p">[</span><span class="s1">\'roc_auc_score\'</span><span class="p">]</span>\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <p>\n      Here, we are calling the fmin function of the hyperopt, where we pass on the function to be minimized, the algorithm to be followed, max number of evals and a trials object. The Trials object is used to keep All hyperparameters, loss, and other information, this means you can access them after running optimization. Also, trials can help you to save important information and later load and then resume the optimization process.\n     </p>\n     <p>\n      Moreover, for the algorithm there are three choice which can be used without any additional configuration. they are :-\n     </p>\n     <ul>\n      <li>\n       Random Search - rand.suggest\n      </li>\n      <li>\n       TPE (Tree Parzen Estimators) - tpe.suggest\n      </li>\n      <li>\n       Adaptive TPE - atpe.suggest\n      </li>\n     </ul>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[\xa0]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-python">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="n">trials</span><span class="o">=</span><span class="n">Trials</span><span class="p">()</span>\n<span class="n">best</span> <span class="o">=</span> <span class="n">fmin</span><span class="p">(</span><span class="n">fm</span><span class="p">,</span>\n    		<span class="n">space</span><span class="o">=</span> <span class="n">search_space</span><span class="p">,</span>\n    		<span class="n">algo</span><span class="o">=</span><span class="n">tpe</span><span class="o">.</span><span class="n">suggest</span><span class="p">,</span>\n    		<span class="n">max_evals</span><span class="o">=</span><span class="mi">15</span><span class="p">,</span>\n    		<span class="n">trials</span> <span class="o">=</span> <span class="n">trials</span><span class="p">)</span>\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n  <div class="jp-Cell-outputWrapper">\n   <div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser">\n   </div>\n   <div class="jp-OutputArea jp-Cell-outputArea">\n    <div class="jp-OutputArea-child">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n     </div>\n     <div class="jp-RenderedText jp-OutputArea-output" data-mime-type="text/plain" tabindex="0">\n      <pre class="overflow-x-scroll font-mono">\n  0%|          | 0/15 [00:00&lt;?, ?it/s, best loss: ?]Step 1000 validation: roc_auc_score=0.777648\nStep 2000 validation: roc_auc_score=0.755485\nStep 3000 validation: roc_auc_score=0.739519\nStep 4000 validation: roc_auc_score=0.764756\nStep 5000 validation: roc_auc_score=0.757006\nStep 6000 validation: roc_auc_score=0.752609\nStep 7000 validation: roc_auc_score=0.763002\nStep 8000 validation: roc_auc_score=0.749202\n  7%|▋         | 1/15 [05:37&lt;1:18:46, 337.58s/it, best loss: -0.7776476459925534]Step 1000 validation: roc_auc_score=0.750455\nStep 2000 validation: roc_auc_score=0.783594\nStep 3000 validation: roc_auc_score=0.775872\nStep 4000 validation: roc_auc_score=0.768825\nStep 5000 validation: roc_auc_score=0.769555\nStep 6000 validation: roc_auc_score=0.765324\nStep 7000 validation: roc_auc_score=0.771146\nStep 8000 validation: roc_auc_score=0.760138\n 13%|█▎        | 2/15 [07:05&lt;41:16, 190.51s/it, best loss: -0.7835939030962179]  Step 1000 validation: roc_auc_score=0.744178\nStep 2000 validation: roc_auc_score=0.765406\nStep 3000 validation: roc_auc_score=0.76532\nStep 4000 validation: roc_auc_score=0.769255\nStep 5000 validation: roc_auc_score=0.77029\nStep 6000 validation: roc_auc_score=0.768024\nStep 7000 validation: roc_auc_score=0.764157\nStep 8000 validation: roc_auc_score=0.756805\n 20%|██        | 3/15 [09:40&lt;34:53, 174.42s/it, best loss: -0.7835939030962179]Step 1000 validation: roc_auc_score=0.714572\nStep 2000 validation: roc_auc_score=0.770712\nStep 3000 validation: roc_auc_score=0.777914\nStep 4000 validation: roc_auc_score=0.76923\nStep 5000 validation: roc_auc_score=0.774823\nStep 6000 validation: roc_auc_score=0.775927\nStep 7000 validation: roc_auc_score=0.777054\nStep 8000 validation: roc_auc_score=0.778508\n 27%|██▋       | 4/15 [12:12&lt;30:22, 165.66s/it, best loss: -0.7835939030962179]Step 1000 validation: roc_auc_score=0.743939\nStep 2000 validation: roc_auc_score=0.759478\nStep 3000 validation: roc_auc_score=0.738839\nStep 4000 validation: roc_auc_score=0.751084\nStep 5000 validation: roc_auc_score=0.740504\nStep 6000 validation: roc_auc_score=0.753612\nStep 7000 validation: roc_auc_score=0.71802\nStep 8000 validation: roc_auc_score=0.761025\n 33%|███▎      | 5/15 [17:40&lt;37:21, 224.16s/it, best loss: -0.7835939030962179]Step 1000 validation: roc_auc_score=0.74099\nStep 2000 validation: roc_auc_score=0.767516\nStep 3000 validation: roc_auc_score=0.767338\nStep 4000 validation: roc_auc_score=0.775691\nStep 5000 validation: roc_auc_score=0.768731\nStep 6000 validation: roc_auc_score=0.755029\nStep 7000 validation: roc_auc_score=0.767115\nStep 8000 validation: roc_auc_score=0.764744\n 40%|████      | 6/15 [22:48&lt;37:54, 252.71s/it, best loss: -0.7835939030962179]Step 1000 validation: roc_auc_score=0.713761\nStep 2000 validation: roc_auc_score=0.759518\nStep 3000 validation: roc_auc_score=0.765853\nStep 4000 validation: roc_auc_score=0.771976\nStep 5000 validation: roc_auc_score=0.772762\nStep 6000 validation: roc_auc_score=0.773206\nStep 7000 validation: roc_auc_score=0.775565\nStep 8000 validation: roc_auc_score=0.768521\n 47%|████▋     | 7/15 [27:53&lt;35:58, 269.84s/it, best loss: -0.7835939030962179]Step 1000 validation: roc_auc_score=0.717178\nStep 2000 validation: roc_auc_score=0.754258\nStep 3000 validation: roc_auc_score=0.767905\nStep 4000 validation: roc_auc_score=0.762917\nStep 5000 validation: roc_auc_score=0.766162\nStep 6000 validation: roc_auc_score=0.767581\nStep 7000 validation: roc_auc_score=0.770746\nStep 8000 validation: roc_auc_score=0.77597\n 53%|█████▎    | 8/15 [30:36&lt;27:29, 235.64s/it, best loss: -0.7835939030962179]Step 1000 validation: roc_auc_score=0.74314\nStep 2000 validation: roc_auc_score=0.757408\nStep 3000 validation: roc_auc_score=0.76668\nStep 4000 validation: roc_auc_score=0.768104\nStep 5000 validation: roc_auc_score=0.746377\nStep 6000 validation: roc_auc_score=0.745282\nStep 7000 validation: roc_auc_score=0.74113\nStep 8000 validation: roc_auc_score=0.734482\n 60%|██████    | 9/15 [36:53&lt;28:00, 280.04s/it, best loss: -0.7835939030962179]Step 1000 validation: roc_auc_score=0.743204\nStep 2000 validation: roc_auc_score=0.76912\nStep 3000 validation: roc_auc_score=0.769981\nStep 4000 validation: roc_auc_score=0.784163\nStep 5000 validation: roc_auc_score=0.77536\nStep 6000 validation: roc_auc_score=0.779237\nStep 7000 validation: roc_auc_score=0.782344\nStep 8000 validation: roc_auc_score=0.779085\n 67%|██████▋   | 10/15 [38:23&lt;18:26, 221.33s/it, best loss: -0.7841634210268469]Step 1000 validation: roc_auc_score=0.743565\nStep 2000 validation: roc_auc_score=0.765063\nStep 3000 validation: roc_auc_score=0.75284\nStep 4000 validation: roc_auc_score=0.759978\nStep 5000 validation: roc_auc_score=0.74255\nStep 6000 validation: roc_auc_score=0.721809\nStep 7000 validation: roc_auc_score=0.729863\nStep 8000 validation: roc_auc_score=0.73075\n 73%|███████▎  | 11/15 [44:07&lt;17:15, 258.91s/it, best loss: -0.7841634210268469]Step 1000 validation: roc_auc_score=0.695949\nStep 2000 validation: roc_auc_score=0.765082\nStep 3000 validation: roc_auc_score=0.756256\nStep 4000 validation: roc_auc_score=0.771923\nStep 5000 validation: roc_auc_score=0.758841\nStep 6000 validation: roc_auc_score=0.759393\nStep 7000 validation: roc_auc_score=0.765971\nStep 8000 validation: roc_auc_score=0.747064\n 80%|████████  | 12/15 [48:54&lt;13:21, 267.23s/it, best loss: -0.7841634210268469]Step 1000 validation: roc_auc_score=0.757871\nStep 2000 validation: roc_auc_score=0.765296\nStep 3000 validation: roc_auc_score=0.769748\nStep 4000 validation: roc_auc_score=0.776487\nStep 5000 validation: roc_auc_score=0.775009\nStep 6000 validation: roc_auc_score=0.779539\nStep 7000 validation: roc_auc_score=0.763165\nStep 8000 validation: roc_auc_score=0.772093\n 87%|████████▋ | 13/15 [50:22&lt;07:06, 213.15s/it, best loss: -0.7841634210268469]Step 1000 validation: roc_auc_score=0.720166\nStep 2000 validation: roc_auc_score=0.768489\nStep 3000 validation: roc_auc_score=0.782853\nStep 4000 validation: roc_auc_score=0.785556\nStep 5000 validation: roc_auc_score=0.78583\nStep 6000 validation: roc_auc_score=0.786569\nStep 7000 validation: roc_auc_score=0.779249\nStep 8000 validation: roc_auc_score=0.783423\n 93%|█████████▎| 14/15 [51:52&lt;02:55, 175.93s/it, best loss: -0.7865693280913189]Step 1000 validation: roc_auc_score=0.743232\nStep 2000 validation: roc_auc_score=0.762007\nStep 3000 validation: roc_auc_score=0.771809\nStep 4000 validation: roc_auc_score=0.755023\nStep 5000 validation: roc_auc_score=0.769812\nStep 6000 validation: roc_auc_score=0.769867\nStep 7000 validation: roc_auc_score=0.777354\nStep 8000 validation: roc_auc_score=0.775313\n100%|██████████| 15/15 [56:47&lt;00:00, 227.13s/it, best loss: -0.7865693280913189]\n</pre>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <p>\n      The code below is used to print the best hyperparameters found by the hyperopt.\n     </p>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[\xa0]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-python">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="nb">print</span><span class="p">(</span><span class="s2">"Best: </span><span class="si">{}</span><span class="s2">"</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">best</span><span class="p">))</span>\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n  <div class="jp-Cell-outputWrapper">\n   <div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser">\n   </div>\n   <div class="jp-OutputArea jp-Cell-outputArea">\n    <div class="jp-OutputArea-child">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n     </div>\n     <div class="jp-RenderedText jp-OutputArea-output" data-mime-type="text/plain" tabindex="0">\n      <pre class="overflow-x-scroll font-mono">Best: {\'dropout\': 0.3749846096922802, \'layer_sizes\': 0, \'learning_rate\': 0.0007544819475363869}\n</pre>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <p>\n      The hyperparameter found here may not be necessarily the best one, but gives a general idea on which parameters are effective. To get mroe accurate results, one has to increase the number of validation epochs and the epochs the model fit. But doing so may increase the time in finding the best hyperparameters.\n     </p>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <h1>\n      Congratulations! Time to join the Community!\n      <a class="anchor-link" href="#Congratulations!-Time-to-join-the-Community!">\n       \xb6\n      </a>\n     </h1>\n     <p>\n      Congratulations on completing this tutorial notebook! If you enjoyed working through the tutorial, and want to continue working with DeepChem, we encourage you to finish the rest of the tutorials in this series. You can also help the DeepChem community in the following ways:\n     </p>\n     <h2>\n      Star DeepChem on\n      <a href="https://github.com/deepchem/deepchem">\n       GitHub\n      </a>\n      <a class="anchor-link" href="#Star-DeepChem-on-GitHub">\n       \xb6\n      </a>\n     </h2>\n     <p>\n      This helps build awareness of the DeepChem project and the tools for open source drug discovery that we\'re trying to build.\n     </p>\n     <h2>\n      Join the DeepChem Discord\n      <a class="anchor-link" href="#Join-the-DeepChem-Discord">\n       \xb6\n      </a>\n     </h2>\n     <p>\n      The DeepChem\n      <a href="https://discord.gg/cGzwCdrUqS">\n       Discord\n      </a>\n      hosts a number of scientists, developers, and enthusiasts interested in deep learning for the life sciences. Join the conversation!\n     </p>\n    </div>\n   </div>\n  </div>\n </div>\n</main>\n'},i=n(7294),o=n(7466),c=n.n(o);let r=()=>((0,i.useEffect)(()=>{var a,s;null===(a=document.getElementsByClassName("scroll-nav")[0])||void 0===a||a.remove();let n=document.querySelector(".notebook"),p=document.querySelector(".notebook");p&&n&&c().init(n,{sections:"h1, h2",insertTarget:p,insertLocation:"after"}),null==MathJax||null===(s=MathJax.Hub)||void 0===s||s.Queue(["Typeset",MathJax.Hub])},[]),(0,p.jsx)("div",{className:"overflow-x-scroll",dangerouslySetInnerHTML:{__html:"".concat(l.html," ").concat(t.Z)}}));r.Layout=e.Z;var d=r}},function(a){a.O(0,[2443,9774,2888,179],function(){return a(a.s=5292)}),_N_E=a.O()}]);