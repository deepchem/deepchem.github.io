(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7514],{3315:function(n,s,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/tutorials/uniprot-data-preprocessing-for-binding-sites",function(){return a(4137)}])},4137:function(n,s,a){"use strict";a.r(s),a.d(s,{default:function(){return d}});var p=a(5893),t=a(1618),e=a(6485),l={html:'<main>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <h1>\n      UniProt data pre-processing for binding site prediction downstream task\n      <a class="anchor-link" href="#UniProt-data-pre-processing-for-binding-site-prediction-downstream-task">\n       \xb6\n      </a>\n     </h1>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <p>\n      This notebook guides you through:\n     </p>\n     <ul>\n      <li>\n       \ud83d\udce5\n       <strong>\n        Downloading Data\n       </strong>\n       : Retrieve information from the UniProt website, including details on protein families, binding sites, active sites, and amino acid sequences.\n      </li>\n      <li>\n       \ud83d\udee0️\n       <strong>\n        Processing Data\n       </strong>\n       : Handle special symbols (angle brackets and question marks) in binding/active site information and convert this data into binary labels. Each amino acid position in the protein sequences is marked as 1 (binding/active site) or 0 (non-binding/active site).\n      </li>\n      <li>\n       ✂️\n       <strong>\n        Splitting Data\n       </strong>\n       : Divide amino acid sequences and their labels into stratified train/test sets based on UniProt protein families.\n      </li>\n      <li>\n       \ud83d\udd04\n       <strong>\n        Chunking Sequences\n       </strong>\n       : Split sequences and their labels into non-overlapping chunks of a specified length to define a context window for the ESM-2 model.\n      </li>\n     </ul>\n     <p>\n      This tutorial is made to run without any GPU support, and can be used in Google colab. If you\'d like to open this notebook in colab, you can use the following link.\n     </p>\n     <p>\n      <a href="https://colab.research.google.com/github/deepchem/deepchem/blob/master/examples/tutorials/UniProt_Data_Preprocessing_for_Binding_Sites.ipynb">\n       <img alt="Open In Colab" src="https://colab.research.google.com/assets/colab-badge.svg"/>\n      </a>\n     </p>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <h2>\n      Download from UniProt\n      <a class="anchor-link" href="#Download-from-UniProt">\n       \xb6\n      </a>\n     </h2>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <p>\n      Let\'s first download a dataset of proteins from UniProt. We will obtain a TSV (Tab-Separated Values) file with specific columns such as Protein families, Binding site, Active site, and Sequence. You can achieve this following these steps:\n     </p>\n     <ul>\n      <li>\n       <p>\n        Go to the\n        <a href="https://www.uniprot.org/">\n         UniProt website\n        </a>\n        and perform a search to query for the proteins of interest (you can search by organism, protein name, function, etc). Filter your results with the filters on the left-hand side to refine your results further if necessary. Here I performed the search: (organism_id:9606) AND (family:kinase) AND (existence:1 OR existence:2) in UniProtKB.\n       </p>\n      </li>\n      <li>\n       <p>\n        Select columns: Above the search results, there is an option to select the columns you want to be included in your download. Click on the \'Columns\' button and a dropdown menu will appear.\n       </p>\n      </li>\n      <li>\n       <p>\n        Customize columns: In the dropdown menu, you can check the boxes next to the columns you want to include in your TSV file. Look for the \'Protein families\', \'Binding site\', \'Active site\', and \'Sequence\' options. I also added further info such as entry name, protein name, gene name, organism, sequence length and whether the entry has been reviewed.\n       </p>\n      </li>\n      <li>\n       <p>\n        Download the file: After selecting the desired columns, click the \'Download\' button located above the search results. Choose the \'Tab-separated\' format from the list of available formats. You may also have the option to select the number of entries you want to download (e.g., all entries, displayed entries, or a custom range).\nClick on the \'Download\' button to start the download process and your browser will prompt you to save the TSV file.\n       </p>\n      </li>\n     </ul>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <h2>\n      Process data\n      <a class="anchor-link" href="#Process-data">\n       \xb6\n      </a>\n     </h2>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <p>\n      Now, let\'s process the downloaded UniProt TSV file with columns (Protein families, Binding site, Active site, Sequence). If the family annotation or binding sites are missing, the code will filter out this sequence. If the Active site annotation is missing, the sequence will be included without issue. Missing sequences are not handled by this notebook.\n     </p>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <p>\n      But first, let\'s set up the environment:\n     </p>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[\xa0]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-python">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="err">!</span><span class="n">pip</span> <span class="n">install</span> <span class="n">pandas</span>\n<span class="err">!</span><span class="n">pip</span> <span class="n">install</span> <span class="n">numpy</span>\n<span class="err">!</span><span class="n">pip</span> <span class="n">install</span> <span class="n">requests</span>\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n  <div class="jp-Cell-outputWrapper">\n   <div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser">\n   </div>\n   <div class="jp-OutputArea jp-Cell-outputArea">\n    <div class="jp-OutputArea-child">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n     </div>\n     <div class="jp-RenderedText jp-OutputArea-output" data-mime-type="text/plain" tabindex="0">\n      <pre class="overflow-x-scroll font-mono">Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (2.0.3)\nRequirement already satisfied: python-dateutil&gt;=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas) (2.8.2)\nRequirement already satisfied: pytz&gt;=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2023.4)\nRequirement already satisfied: tzdata&gt;=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.1)\nRequirement already satisfied: numpy&gt;=1.21.0 in /usr/local/lib/python3.10/dist-packages (from pandas) (1.25.2)\nRequirement already satisfied: six&gt;=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil&gt;=2.8.2-&gt;pandas) (1.16.0)\nRequirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (1.25.2)\nRequirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (2.31.0)\nRequirement already satisfied: charset-normalizer&lt;4,&gt;=2 in /usr/local/lib/python3.10/dist-packages (from requests) (3.3.2)\nRequirement already satisfied: idna&lt;4,&gt;=2.5 in /usr/local/lib/python3.10/dist-packages (from requests) (3.7)\nRequirement already satisfied: urllib3&lt;3,&gt;=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests) (2.0.7)\nRequirement already satisfied: certifi&gt;=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests) (2024.7.4)\n</pre>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell jp-mod-noOutputs">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[\xa0]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-python">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="c1"># I/O</span>\n<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>\n<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>\n<span class="kn">import</span> <span class="nn">re</span>\n<span class="kn">import</span> <span class="nn">random</span>\n<span class="kn">import</span> <span class="nn">pickle</span>\n<span class="kn">import</span> <span class="nn">os</span>\n<span class="kn">import</span> <span class="nn">requests</span>\n<span class="kn">import</span> <span class="nn">xml.etree.ElementTree</span> <span class="k">as</span> <span class="nn">ET</span>\n<span class="c1"># set seed</span>\n<span class="n">random</span><span class="o">.</span><span class="n">seed</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span>\n<span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">seed</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span>\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <p>\n      If you upload the downloaded file from UniProt to Google Drive, you should be able to access it by first mounting your Google Drive and then loading it:\n     </p>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[\xa0]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-python">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="kn">from</span> <span class="nn">google.colab</span> <span class="kn">import</span> <span class="n">drive</span>\n<span class="n">drive</span><span class="o">.</span><span class="n">mount</span><span class="p">(</span><span class="s1">\'/content/gdrive\'</span><span class="p">)</span>\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n  <div class="jp-Cell-outputWrapper">\n   <div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser">\n   </div>\n   <div class="jp-OutputArea jp-Cell-outputArea">\n    <div class="jp-OutputArea-child">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n     </div>\n     <div class="jp-RenderedText jp-OutputArea-output" data-mime-type="text/plain" tabindex="0">\n      <pre class="overflow-x-scroll font-mono">Mounted at /content/gdrive\n</pre>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[\xa0]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-python">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="c1"># Load the dataset</span>\n<span class="n">file_path</span> <span class="o">=</span> <span class="s2">"/content/gdrive/MyDrive/ESMbind/data/uniprotkb_data_2024_05_29.tsv"</span>\n<span class="n">data</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span> <span class="n">sep</span><span class="o">=</span><span class="s1">\'</span><span class="se">\\t</span><span class="s1">\'</span><span class="p">)</span>\n<span class="n">data</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n  <div class="jp-Cell-outputWrapper">\n   <div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser">\n   </div>\n   <div class="jp-OutputArea jp-Cell-outputArea">\n    <div class="jp-OutputArea-child jp-OutputArea-executeResult">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n      Out[\xa0]:\n     </div>\n     <div class="jp-RenderedHTMLCommon jp-RenderedHTML jp-OutputArea-output jp-OutputArea-executeResult" data-mime-type="text/html" tabindex="0">\n      <div class="colab-df-container" id="df-b826ec50-25f1-4bf4-9997-7db39bd58f37">\n       <div>\n        <style scoped="">\n         .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n        </style>\n        <table border="1" class="dataframe">\n         <thead>\n          <tr style="text-align: right;">\n           <th>\n           </th>\n           <th>\n            Entry\n           </th>\n           <th>\n            Reviewed\n           </th>\n           <th>\n            Entry Name\n           </th>\n           <th>\n            Protein names\n           </th>\n           <th>\n            Gene Names\n           </th>\n           <th>\n            Organism\n           </th>\n           <th>\n            Protein families\n           </th>\n           <th>\n            Sequence\n           </th>\n           <th>\n            Length\n           </th>\n           <th>\n            Binding site\n           </th>\n           <th>\n            Active site\n           </th>\n          </tr>\n         </thead>\n         <tbody>\n          <tr>\n           <th>\n            0\n           </th>\n           <td>\n            A0A087WV00\n           </td>\n           <td>\n            unreviewed\n           </td>\n           <td>\n            A0A087WV00_HUMAN\n           </td>\n           <td>\n            Diacylglycerol kinase (DAG kinase) (EC 2.7.1.107)\n           </td>\n           <td>\n            DGKI\n           </td>\n           <td>\n            Homo sapiens (Human)\n           </td>\n           <td>\n            Eukaryotic diacylglycerol kinase family\n           </td>\n           <td>\n            MDAAGRGCHLLPLPAARGPARAPAAAAAAAASPPGPCSGAACAPSA...\n           </td>\n           <td>\n            1057\n           </td>\n           <td>\n            NaN\n           </td>\n           <td>\n            NaN\n           </td>\n          </tr>\n          <tr>\n           <th>\n            1\n           </th>\n           <td>\n            A0A090N7W4\n           </td>\n           <td>\n            unreviewed\n           </td>\n           <td>\n            A0A090N7W4_HUMAN\n           </td>\n           <td>\n            Cell division protein kinase 5\n           </td>\n           <td>\n            CDK5 hCG_18690 tcag7.772\n           </td>\n           <td>\n            Homo sapiens (Human)\n           </td>\n           <td>\n            Protein kinase superfamily, CMGC Ser/Thr prote...\n           </td>\n           <td>\n            MQKYEKLEKIGEGTYGTVFKAKNRETHEIVALKRVRLDDDDEGVPS...\n           </td>\n           <td>\n            292\n           </td>\n           <td>\n            BINDING 33; /ligand="ATP"; /ligand_id="ChEBI:C...\n           </td>\n           <td>\n            NaN\n           </td>\n          </tr>\n          <tr>\n           <th>\n            2\n           </th>\n           <td>\n            A0A0S2Z310\n           </td>\n           <td>\n            unreviewed\n           </td>\n           <td>\n            A0A0S2Z310_HUMAN\n           </td>\n           <td>\n            Serine/threonine-protein kinase receptor (EC 2...\n           </td>\n           <td>\n            ACVRL1\n           </td>\n           <td>\n            Homo sapiens (Human)\n           </td>\n           <td>\n            Protein kinase superfamily, TKL Ser/Thr protei...\n           </td>\n           <td>\n            MTLGSPRKGLLMLLMALVTQGDPVKPSRGPLVTCTCESPHCKGPTC...\n           </td>\n           <td>\n            503\n           </td>\n           <td>\n            BINDING 229; /ligand="ATP"; /ligand_id="ChEBI:...\n           </td>\n           <td>\n            NaN\n           </td>\n          </tr>\n          <tr>\n           <th>\n            3\n           </th>\n           <td>\n            A0A0S2Z4D1\n           </td>\n           <td>\n            unreviewed\n           </td>\n           <td>\n            A0A0S2Z4D1_HUMAN\n           </td>\n           <td>\n            non-specific serine/threonine protein kinase (...\n           </td>\n           <td>\n            STK11\n           </td>\n           <td>\n            Homo sapiens (Human)\n           </td>\n           <td>\n            Protein kinase superfamily, CAMK Ser/Thr prote...\n           </td>\n           <td>\n            MEVVDPQQLGMFTEGELMSVGMDTFIHRIDSTEVIYQPRRKRAKLI...\n           </td>\n           <td>\n            433\n           </td>\n           <td>\n            BINDING 78; /ligand="ATP"; /ligand_id="ChEBI:C...\n           </td>\n           <td>\n            NaN\n           </td>\n          </tr>\n          <tr>\n           <th>\n            4\n           </th>\n           <td>\n            A0A2P9DU05\n           </td>\n           <td>\n            unreviewed\n           </td>\n           <td>\n            A0A2P9DU05_HUMAN\n           </td>\n           <td>\n            Rho-associated protein kinase (EC 2.7.11.1)\n           </td>\n           <td>\n            ROCK2\n           </td>\n           <td>\n            Homo sapiens (Human)\n           </td>\n           <td>\n            Protein kinase superfamily, AGC Ser/Thr protei...\n           </td>\n           <td>\n            MSRPPPTGKMPGAPETAPGDGAGASRQRKLEALIRDPRSPINVESL...\n           </td>\n           <td>\n            1388\n           </td>\n           <td>\n            BINDING 121; /ligand="ATP"; /ligand_id="ChEBI:...\n           </td>\n           <td>\n            ACT_SITE 214; /note="Proton acceptor"; /eviden...\n           </td>\n          </tr>\n         </tbody>\n        </table>\n       </div>\n       <div class="colab-df-buttons">\n        <div class="colab-df-container">\n         <button class="colab-df-convert" onclick="convertToInteractive(\'df-b826ec50-25f1-4bf4-9997-7db39bd58f37\')" style="display:none;" title="Convert this dataframe to an interactive table.">\n          <svg height="24px" viewbox="0 -960 960 960" xmlns="http://www.w3.org/2000/svg">\n           <path d="M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z">\n           </path>\n          </svg>\n         </button>\n         <style>\n          .colab-df-container {\n      display:flex;\n      gap: 12px;\n    }\n\n    .colab-df-convert {\n      background-color: #E8F0FE;\n      border: none;\n      border-radius: 50%;\n      cursor: pointer;\n      display: none;\n      fill: #1967D2;\n      height: 32px;\n      padding: 0 0 0 0;\n      width: 32px;\n    }\n\n    .colab-df-convert:hover {\n      background-color: #E2EBFA;\n      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n      fill: #174EA6;\n    }\n\n    .colab-df-buttons div {\n      margin-bottom: 4px;\n    }\n\n    [theme=dark] .colab-df-convert {\n      background-color: #3B4455;\n      fill: #D2E3FC;\n    }\n\n    [theme=dark] .colab-df-convert:hover {\n      background-color: #434B5C;\n      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n      fill: #FFFFFF;\n    }\n         </style>\n         <script>\n          const buttonEl =\n        document.querySelector(\'#df-b826ec50-25f1-4bf4-9997-7db39bd58f37 button.colab-df-convert\');\n      buttonEl.style.display =\n        google.colab.kernel.accessAllowed ? \'block\' : \'none\';\n\n      async function convertToInteractive(key) {\n        const element = document.querySelector(\'#df-b826ec50-25f1-4bf4-9997-7db39bd58f37\');\n        const dataTable =\n          await google.colab.kernel.invokeFunction(\'convertToInteractive\',\n                                                    [key], {});\n        if (!dataTable) return;\n\n        const docLinkHtml = \'Like what you see? Visit the \' +\n          \'<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>\'\n          + \' to learn more about interactive tables.\';\n        element.innerHTML = \'\';\n        dataTable[\'output_type\'] = \'display_data\';\n        await google.colab.output.renderOutput(dataTable, element);\n        const docLink = document.createElement(\'div\');\n        docLink.innerHTML = docLinkHtml;\n        element.appendChild(docLink);\n      }\n         </script>\n        </div>\n        <div id="df-e90966b3-2755-44ca-b283-e1084844189c">\n         <button class="colab-df-quickchart" onclick="quickchart(\'df-e90966b3-2755-44ca-b283-e1084844189c\')" style="display:none;" title="Suggest charts">\n          <svg height="24px" viewbox="0 0 24 24" width="24px" xmlns="http://www.w3.org/2000/svg">\n           <g>\n            <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z">\n            </path>\n           </g>\n          </svg>\n         </button>\n         <style>\n          .colab-df-quickchart {\n      --bg-color: #E8F0FE;\n      --fill-color: #1967D2;\n      --hover-bg-color: #E2EBFA;\n      --hover-fill-color: #174EA6;\n      --disabled-fill-color: #AAA;\n      --disabled-bg-color: #DDD;\n  }\n\n  [theme=dark] .colab-df-quickchart {\n      --bg-color: #3B4455;\n      --fill-color: #D2E3FC;\n      --hover-bg-color: #434B5C;\n      --hover-fill-color: #FFFFFF;\n      --disabled-bg-color: #3B4455;\n      --disabled-fill-color: #666;\n  }\n\n  .colab-df-quickchart {\n    background-color: var(--bg-color);\n    border: none;\n    border-radius: 50%;\n    cursor: pointer;\n    display: none;\n    fill: var(--fill-color);\n    height: 32px;\n    padding: 0;\n    width: 32px;\n  }\n\n  .colab-df-quickchart:hover {\n    background-color: var(--hover-bg-color);\n    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n    fill: var(--button-hover-fill-color);\n  }\n\n  .colab-df-quickchart-complete:disabled,\n  .colab-df-quickchart-complete:disabled:hover {\n    background-color: var(--disabled-bg-color);\n    fill: var(--disabled-fill-color);\n    box-shadow: none;\n  }\n\n  .colab-df-spinner {\n    border: 2px solid var(--fill-color);\n    border-color: transparent;\n    border-bottom-color: var(--fill-color);\n    animation:\n      spin 1s steps(1) infinite;\n  }\n\n  @keyframes spin {\n    0% {\n      border-color: transparent;\n      border-bottom-color: var(--fill-color);\n      border-left-color: var(--fill-color);\n    }\n    20% {\n      border-color: transparent;\n      border-left-color: var(--fill-color);\n      border-top-color: var(--fill-color);\n    }\n    30% {\n      border-color: transparent;\n      border-left-color: var(--fill-color);\n      border-top-color: var(--fill-color);\n      border-right-color: var(--fill-color);\n    }\n    40% {\n      border-color: transparent;\n      border-right-color: var(--fill-color);\n      border-top-color: var(--fill-color);\n    }\n    60% {\n      border-color: transparent;\n      border-right-color: var(--fill-color);\n    }\n    80% {\n      border-color: transparent;\n      border-right-color: var(--fill-color);\n      border-bottom-color: var(--fill-color);\n    }\n    90% {\n      border-color: transparent;\n      border-bottom-color: var(--fill-color);\n    }\n  }\n         </style>\n         <script>\n          async function quickchart(key) {\n      const quickchartButtonEl =\n        document.querySelector(\'#\' + key + \' button\');\n      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n      quickchartButtonEl.classList.add(\'colab-df-spinner\');\n      try {\n        const charts = await google.colab.kernel.invokeFunction(\n            \'suggestCharts\', [key], {});\n      } catch (error) {\n        console.error(\'Error during call to suggestCharts:\', error);\n      }\n      quickchartButtonEl.classList.remove(\'colab-df-spinner\');\n      quickchartButtonEl.classList.add(\'colab-df-quickchart-complete\');\n    }\n    (() => {\n      let quickchartButtonEl =\n        document.querySelector(\'#df-e90966b3-2755-44ca-b283-e1084844189c button\');\n      quickchartButtonEl.style.display =\n        google.colab.kernel.accessAllowed ? \'block\' : \'none\';\n    })();\n         </script>\n        </div>\n       </div>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <p>\n      Now let\'s extract the required information for the purposes of this task: Protein families, Binding site, Active site, Sequence. Also, let\'s filter out entries without binding site or protein families information.\n     </p>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[\xa0]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-python">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="n">data</span><span class="p">[</span><span class="s2">"Binding site"</span><span class="p">]</span>\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n  <div class="jp-Cell-outputWrapper">\n   <div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser">\n   </div>\n   <div class="jp-OutputArea jp-Cell-outputArea">\n    <div class="jp-OutputArea-child jp-OutputArea-executeResult">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n      Out[\xa0]:\n     </div>\n     <div class="jp-RenderedText jp-OutputArea-output jp-OutputArea-executeResult" data-mime-type="text/plain" tabindex="0">\n      <pre class="overflow-x-scroll font-mono">0                                                     NaN\n1       BINDING 33; /ligand="ATP"; /ligand_id="ChEBI:C...\n2       BINDING 229; /ligand="ATP"; /ligand_id="ChEBI:...\n3       BINDING 78; /ligand="ATP"; /ligand_id="ChEBI:C...\n4       BINDING 121; /ligand="ATP"; /ligand_id="ChEBI:...\n                              ...                        \n2186                                                  NaN\n2187                                                  NaN\n2188                                                  NaN\n2189    BINDING 73; /ligand="ATP"; /ligand_id="ChEBI:C...\n2190    BINDING 165; /ligand="ATP"; /ligand_id="ChEBI:...\nName: Binding site, Length: 2191, dtype: object</pre>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[\xa0]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-python">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">[[</span><span class="s2">"Entry"</span><span class="p">,</span> <span class="s2">"Protein families"</span><span class="p">,</span> <span class="s2">"Binding site"</span><span class="p">,</span> <span class="s2">"Active site"</span><span class="p">,</span> <span class="s2">"Sequence"</span><span class="p">]]</span>\n<span class="c1"># Filter out rows with NaN values in the \'Protein families\' column nor the \'Binding site\' column nor the \'Sequence\' column</span>\n<span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">pd</span><span class="o">.</span><span class="n">notna</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s1">\'Protein families\'</span><span class="p">])</span> <span class="o">&amp;</span> <span class="n">pd</span><span class="o">.</span><span class="n">notna</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s1">\'Binding site\'</span><span class="p">])</span> <span class="o">&amp;</span> <span class="n">pd</span><span class="o">.</span><span class="n">notna</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s1">\'Sequence\'</span><span class="p">])]</span>\n<span class="nb">print</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>\n<span class="n">data</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n  <div class="jp-Cell-outputWrapper">\n   <div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser">\n   </div>\n   <div class="jp-OutputArea jp-Cell-outputArea">\n    <div class="jp-OutputArea-child">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n     </div>\n     <div class="jp-RenderedText jp-OutputArea-output" data-mime-type="text/plain" tabindex="0">\n      <pre class="overflow-x-scroll font-mono">(1406, 5)\n</pre>\n     </div>\n    </div>\n    <div class="jp-OutputArea-child jp-OutputArea-executeResult">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n      Out[\xa0]:\n     </div>\n     <div class="jp-RenderedHTMLCommon jp-RenderedHTML jp-OutputArea-output jp-OutputArea-executeResult" data-mime-type="text/html" tabindex="0">\n      <div class="colab-df-container" id="df-fa828e7c-1be0-4bc3-9078-3f27591dd30a">\n       <div>\n        <style scoped="">\n         .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n        </style>\n        <table border="1" class="dataframe">\n         <thead>\n          <tr style="text-align: right;">\n           <th>\n           </th>\n           <th>\n            Entry\n           </th>\n           <th>\n            Protein families\n           </th>\n           <th>\n            Binding site\n           </th>\n           <th>\n            Active site\n           </th>\n           <th>\n            Sequence\n           </th>\n          </tr>\n         </thead>\n         <tbody>\n          <tr>\n           <th>\n            1\n           </th>\n           <td>\n            A0A090N7W4\n           </td>\n           <td>\n            Protein kinase superfamily, CMGC Ser/Thr prote...\n           </td>\n           <td>\n            BINDING 33; /ligand="ATP"; /ligand_id="ChEBI:C...\n           </td>\n           <td>\n            NaN\n           </td>\n           <td>\n            MQKYEKLEKIGEGTYGTVFKAKNRETHEIVALKRVRLDDDDEGVPS...\n           </td>\n          </tr>\n          <tr>\n           <th>\n            2\n           </th>\n           <td>\n            A0A0S2Z310\n           </td>\n           <td>\n            Protein kinase superfamily, TKL Ser/Thr protei...\n           </td>\n           <td>\n            BINDING 229; /ligand="ATP"; /ligand_id="ChEBI:...\n           </td>\n           <td>\n            NaN\n           </td>\n           <td>\n            MTLGSPRKGLLMLLMALVTQGDPVKPSRGPLVTCTCESPHCKGPTC...\n           </td>\n          </tr>\n          <tr>\n           <th>\n            3\n           </th>\n           <td>\n            A0A0S2Z4D1\n           </td>\n           <td>\n            Protein kinase superfamily, CAMK Ser/Thr prote...\n           </td>\n           <td>\n            BINDING 78; /ligand="ATP"; /ligand_id="ChEBI:C...\n           </td>\n           <td>\n            NaN\n           </td>\n           <td>\n            MEVVDPQQLGMFTEGELMSVGMDTFIHRIDSTEVIYQPRRKRAKLI...\n           </td>\n          </tr>\n          <tr>\n           <th>\n            4\n           </th>\n           <td>\n            A0A2P9DU05\n           </td>\n           <td>\n            Protein kinase superfamily, AGC Ser/Thr protei...\n           </td>\n           <td>\n            BINDING 121; /ligand="ATP"; /ligand_id="ChEBI:...\n           </td>\n           <td>\n            ACT_SITE 214; /note="Proton acceptor"; /eviden...\n           </td>\n           <td>\n            MSRPPPTGKMPGAPETAPGDGAGASRQRKLEALIRDPRSPINVESL...\n           </td>\n          </tr>\n          <tr>\n           <th>\n            5\n           </th>\n           <td>\n            A3QNQ0\n           </td>\n           <td>\n            Protein kinase superfamily, TKL Ser/Thr protei...\n           </td>\n           <td>\n            BINDING 250..258; /ligand="ATP"; /ligand_id="C...\n           </td>\n           <td>\n            ACT_SITE 379; /note="Proton acceptor"; /eviden...\n           </td>\n           <td>\n            MGRGLLRGLWPLHIVLWTRIASTIPPHVQKSVNNDMIVTDNNGAVK...\n           </td>\n          </tr>\n         </tbody>\n        </table>\n       </div>\n       <div class="colab-df-buttons">\n        <div class="colab-df-container">\n         <button class="colab-df-convert" onclick="convertToInteractive(\'df-fa828e7c-1be0-4bc3-9078-3f27591dd30a\')" style="display:none;" title="Convert this dataframe to an interactive table.">\n          <svg height="24px" viewbox="0 -960 960 960" xmlns="http://www.w3.org/2000/svg">\n           <path d="M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z">\n           </path>\n          </svg>\n         </button>\n         <style>\n          .colab-df-container {\n      display:flex;\n      gap: 12px;\n    }\n\n    .colab-df-convert {\n      background-color: #E8F0FE;\n      border: none;\n      border-radius: 50%;\n      cursor: pointer;\n      display: none;\n      fill: #1967D2;\n      height: 32px;\n      padding: 0 0 0 0;\n      width: 32px;\n    }\n\n    .colab-df-convert:hover {\n      background-color: #E2EBFA;\n      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n      fill: #174EA6;\n    }\n\n    .colab-df-buttons div {\n      margin-bottom: 4px;\n    }\n\n    [theme=dark] .colab-df-convert {\n      background-color: #3B4455;\n      fill: #D2E3FC;\n    }\n\n    [theme=dark] .colab-df-convert:hover {\n      background-color: #434B5C;\n      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n      fill: #FFFFFF;\n    }\n         </style>\n         <script>\n          const buttonEl =\n        document.querySelector(\'#df-fa828e7c-1be0-4bc3-9078-3f27591dd30a button.colab-df-convert\');\n      buttonEl.style.display =\n        google.colab.kernel.accessAllowed ? \'block\' : \'none\';\n\n      async function convertToInteractive(key) {\n        const element = document.querySelector(\'#df-fa828e7c-1be0-4bc3-9078-3f27591dd30a\');\n        const dataTable =\n          await google.colab.kernel.invokeFunction(\'convertToInteractive\',\n                                                    [key], {});\n        if (!dataTable) return;\n\n        const docLinkHtml = \'Like what you see? Visit the \' +\n          \'<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>\'\n          + \' to learn more about interactive tables.\';\n        element.innerHTML = \'\';\n        dataTable[\'output_type\'] = \'display_data\';\n        await google.colab.output.renderOutput(dataTable, element);\n        const docLink = document.createElement(\'div\');\n        docLink.innerHTML = docLinkHtml;\n        element.appendChild(docLink);\n      }\n         </script>\n        </div>\n        <div id="df-0e71b5c9-ce1a-4e47-84ce-722c692f6871">\n         <button class="colab-df-quickchart" onclick="quickchart(\'df-0e71b5c9-ce1a-4e47-84ce-722c692f6871\')" style="display:none;" title="Suggest charts">\n          <svg height="24px" viewbox="0 0 24 24" width="24px" xmlns="http://www.w3.org/2000/svg">\n           <g>\n            <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z">\n            </path>\n           </g>\n          </svg>\n         </button>\n         <style>\n          .colab-df-quickchart {\n      --bg-color: #E8F0FE;\n      --fill-color: #1967D2;\n      --hover-bg-color: #E2EBFA;\n      --hover-fill-color: #174EA6;\n      --disabled-fill-color: #AAA;\n      --disabled-bg-color: #DDD;\n  }\n\n  [theme=dark] .colab-df-quickchart {\n      --bg-color: #3B4455;\n      --fill-color: #D2E3FC;\n      --hover-bg-color: #434B5C;\n      --hover-fill-color: #FFFFFF;\n      --disabled-bg-color: #3B4455;\n      --disabled-fill-color: #666;\n  }\n\n  .colab-df-quickchart {\n    background-color: var(--bg-color);\n    border: none;\n    border-radius: 50%;\n    cursor: pointer;\n    display: none;\n    fill: var(--fill-color);\n    height: 32px;\n    padding: 0;\n    width: 32px;\n  }\n\n  .colab-df-quickchart:hover {\n    background-color: var(--hover-bg-color);\n    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n    fill: var(--button-hover-fill-color);\n  }\n\n  .colab-df-quickchart-complete:disabled,\n  .colab-df-quickchart-complete:disabled:hover {\n    background-color: var(--disabled-bg-color);\n    fill: var(--disabled-fill-color);\n    box-shadow: none;\n  }\n\n  .colab-df-spinner {\n    border: 2px solid var(--fill-color);\n    border-color: transparent;\n    border-bottom-color: var(--fill-color);\n    animation:\n      spin 1s steps(1) infinite;\n  }\n\n  @keyframes spin {\n    0% {\n      border-color: transparent;\n      border-bottom-color: var(--fill-color);\n      border-left-color: var(--fill-color);\n    }\n    20% {\n      border-color: transparent;\n      border-left-color: var(--fill-color);\n      border-top-color: var(--fill-color);\n    }\n    30% {\n      border-color: transparent;\n      border-left-color: var(--fill-color);\n      border-top-color: var(--fill-color);\n      border-right-color: var(--fill-color);\n    }\n    40% {\n      border-color: transparent;\n      border-right-color: var(--fill-color);\n      border-top-color: var(--fill-color);\n    }\n    60% {\n      border-color: transparent;\n      border-right-color: var(--fill-color);\n    }\n    80% {\n      border-color: transparent;\n      border-right-color: var(--fill-color);\n      border-bottom-color: var(--fill-color);\n    }\n    90% {\n      border-color: transparent;\n      border-bottom-color: var(--fill-color);\n    }\n  }\n         </style>\n         <script>\n          async function quickchart(key) {\n      const quickchartButtonEl =\n        document.querySelector(\'#\' + key + \' button\');\n      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n      quickchartButtonEl.classList.add(\'colab-df-spinner\');\n      try {\n        const charts = await google.colab.kernel.invokeFunction(\n            \'suggestCharts\', [key], {});\n      } catch (error) {\n        console.error(\'Error during call to suggestCharts:\', error);\n      }\n      quickchartButtonEl.classList.remove(\'colab-df-spinner\');\n      quickchartButtonEl.classList.add(\'colab-df-quickchart-complete\');\n    }\n    (() => {\n      let quickchartButtonEl =\n        document.querySelector(\'#df-0e71b5c9-ce1a-4e47-84ce-722c692f6871 button\');\n      quickchartButtonEl.style.display =\n        google.colab.kernel.accessAllowed ? \'block\' : \'none\';\n    })();\n         </script>\n        </div>\n       </div>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <p>\n      So we have a dataset of 1406 proteins, all having a binding site and information of the aminoacids sequence and the protein family. We download proteins proteins from human and kinase family, however there may still exist subgroups of protein families:\n     </p>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[\xa0]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-python">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="c1"># Group the data by \'Protein families\' and get the size of each group</span>\n<span class="n">family_sizes</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="s1">\'Protein families\'</span><span class="p">)</span><span class="o">.</span><span class="n">size</span><span class="p">()</span>\n<span class="nb">print</span><span class="p">(</span><span class="n">family_sizes</span><span class="o">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">ascending</span><span class="o">=</span><span class="kc">False</span><span class="p">))</span>\n\n<span class="c1"># Create a new column with the size of each family and sort by \'Family size\' in descending order and then by \'Protein families\'</span>\n<span class="n">data</span><span class="p">[</span><span class="s1">\'Family size\'</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s1">\'Protein families\'</span><span class="p">]</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="n">family_sizes</span><span class="p">)</span>\n<span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span><span class="o">=</span><span class="p">[</span><span class="s1">\'Family size\'</span><span class="p">,</span> <span class="s1">\'Protein families\'</span><span class="p">],</span> <span class="n">ascending</span><span class="o">=</span><span class="p">[</span><span class="kc">False</span><span class="p">,</span> <span class="kc">True</span><span class="p">])</span>\n<span class="n">data</span><span class="o">.</span><span class="n">drop</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="s1">\'Family size\'</span><span class="p">,</span> <span class="n">inplace</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span> <span class="c1"># Drop the \'Family size\' column as it is no longer needed</span>\n<span class="n">data</span>\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n  <div class="jp-Cell-outputWrapper">\n   <div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser">\n   </div>\n   <div class="jp-OutputArea jp-Cell-outputArea">\n    <div class="jp-OutputArea-child">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n     </div>\n     <div class="jp-RenderedText jp-OutputArea-output" data-mime-type="text/plain" tabindex="0">\n      <pre class="overflow-x-scroll font-mono">Protein families\nProtein kinase superfamily                                                             164\nProtein kinase superfamily, CMGC Ser/Thr protein kinase family, CDC2/CDKX subfamily     96\nProtein kinase superfamily, STE Ser/Thr protein kinase family, STE20 subfamily          78\nProtein kinase superfamily, Tyr protein kinase family, Insulin receptor subfamily       73\nProtein kinase superfamily, CAMK Ser/Thr protein kinase family                          56\n                                                                                      ... \nGHMP kinase family, Mevalonate kinase subfamily                                          1\nProtein kinase superfamily, TKL Ser/Thr protein kinase family, ROCO subfamily            1\nGlutamate 5-kinase family; Gamma-glutamyl phosphate reductase family                     1\nGuanylate kinase family                                                                  1\nGHMP kinase family                                                                       1\nLength: 126, dtype: int64\n</pre>\n     </div>\n    </div>\n    <div class="jp-OutputArea-child jp-OutputArea-executeResult">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n      Out[\xa0]:\n     </div>\n     <div class="jp-RenderedHTMLCommon jp-RenderedHTML jp-OutputArea-output jp-OutputArea-executeResult" data-mime-type="text/html" tabindex="0">\n      <div class="colab-df-container" id="df-41104dbd-3b0d-4d7f-a634-c64ed20096f2">\n       <div>\n        <style scoped="">\n         .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n        </style>\n        <table border="1" class="dataframe">\n         <thead>\n          <tr style="text-align: right;">\n           <th>\n           </th>\n           <th>\n            Entry\n           </th>\n           <th>\n            Protein families\n           </th>\n           <th>\n            Binding site\n           </th>\n           <th>\n            Active site\n           </th>\n           <th>\n            Sequence\n           </th>\n          </tr>\n         </thead>\n         <tbody>\n          <tr>\n           <th>\n            359\n           </th>\n           <td>\n            Q504Y2\n           </td>\n           <td>\n            Protein kinase superfamily\n           </td>\n           <td>\n            BINDING 144..152; /ligand="ATP"; /ligand_id="C...\n           </td>\n           <td>\n            ACT_SITE 278; /note="Proton acceptor"; /eviden...\n           </td>\n           <td>\n            MRRRRAAVAAGFCASFLLGSVLNVLFAPGSEPPRPGQSPEPSPAPG...\n           </td>\n          </tr>\n          <tr>\n           <th>\n            414\n           </th>\n           <td>\n            Q8IWB6\n           </td>\n           <td>\n            Protein kinase superfamily\n           </td>\n           <td>\n            BINDING 233..241; /ligand="ATP"; /ligand_id="C...\n           </td>\n           <td>\n            NaN\n           </td>\n           <td>\n            MSRAVRLPVPCPVQLGTLRNDSLEAQLHEYVKQGNYVKVKKILKKG...\n           </td>\n          </tr>\n          <tr>\n           <th>\n            427\n           </th>\n           <td>\n            Q8NB16\n           </td>\n           <td>\n            Protein kinase superfamily\n           </td>\n           <td>\n            BINDING 209..217; /ligand="ATP"; /ligand_id="C...\n           </td>\n           <td>\n            NaN\n           </td>\n           <td>\n            MENLKHIITLGQVIHKRCEEMKYCKKQCRRLGHRVLGLIKPLEMLQ...\n           </td>\n          </tr>\n          <tr>\n           <th>\n            778\n           </th>\n           <td>\n            A0A7P0T838\n           </td>\n           <td>\n            Protein kinase superfamily\n           </td>\n           <td>\n            BINDING 71; /ligand="ATP"; /ligand_id="ChEBI:C...\n           </td>\n           <td>\n            NaN\n           </td>\n           <td>\n            MPRVKAAQAGRQSSAKRHLAEQFAVGEIITDMAKKEWKVGLPIGQG...\n           </td>\n          </tr>\n          <tr>\n           <th>\n            779\n           </th>\n           <td>\n            A0A7P0T952\n           </td>\n           <td>\n            Protein kinase superfamily\n           </td>\n           <td>\n            BINDING 71; /ligand="ATP"; /ligand_id="ChEBI:C...\n           </td>\n           <td>\n            NaN\n           </td>\n           <td>\n            MPRVKAAQAGRQSSAKRHLAEQFAVGEIITDMAKKEWKVGLPIGQG...\n           </td>\n          </tr>\n          <tr>\n           <th>\n            ...\n           </th>\n           <td>\n            ...\n           </td>\n           <td>\n            ...\n           </td>\n           <td>\n            ...\n           </td>\n           <td>\n            ...\n           </td>\n           <td>\n            ...\n           </td>\n          </tr>\n          <tr>\n           <th>\n            1770\n           </th>\n           <td>\n            M1VPF4\n           </td>\n           <td>\n            Protein kinase superfamily, Tyr protein kinase...\n           </td>\n           <td>\n            BINDING 358; /ligand="ATP"; /ligand_id="ChEBI:...\n           </td>\n           <td>\n            NaN\n           </td>\n           <td>\n            MMEAIKKKMQMLKLDKENALDRAEQAEAEQKQAEERSKQLEDELAA...\n           </td>\n          </tr>\n          <tr>\n           <th>\n            21\n           </th>\n           <td>\n            O00764\n           </td>\n           <td>\n            Pyridoxine kinase family\n           </td>\n           <td>\n            BINDING 12; /ligand="pyridoxal"; /ligand_id="C...\n           </td>\n           <td>\n            ACT_SITE 235; /note="Proton acceptor"; /eviden...\n           </td>\n           <td>\n            MEEECRVLSIQSHVIRGYVGNRAATFPLQVLGFEIDAVNSVQFSNH...\n           </td>\n          </tr>\n          <tr>\n           <th>\n            1017\n           </th>\n           <td>\n            M1V485\n           </td>\n           <td>\n            SLC34A transporter family; Protein kinase supe...\n           </td>\n           <td>\n            BINDING 906; /ligand="ATP"; /ligand_id="ChEBI:...\n           </td>\n           <td>\n            NaN\n           </td>\n           <td>\n            MAPWPELGDAQPNPDKYLEGAAGQQPTAPDKSKETNKTDNTEAPVT...\n           </td>\n          </tr>\n          <tr>\n           <th>\n            82\n           </th>\n           <td>\n            P04183\n           </td>\n           <td>\n            Thymidine kinase family\n           </td>\n           <td>\n            BINDING 26..33; /ligand="ATP"; /ligand_id="ChE...\n           </td>\n           <td>\n            ACT_SITE 98; /note="Proton acceptor"; /evidenc...\n           </td>\n           <td>\n            MSCINLPTVLPGSPSKTRGQIQVILGPMFSGKSTELMRRVRRFQIA...\n           </td>\n          </tr>\n          <tr>\n           <th>\n            542\n           </th>\n           <td>\n            Q9NVE7\n           </td>\n           <td>\n            Type II pantothenate kinase family; Damage-con...\n           </td>\n           <td>\n            BINDING 196; /ligand="acetyl-CoA"; /ligand_id=...\n           </td>\n           <td>\n            NaN\n           </td>\n           <td>\n            MAECGASGSGSSGDSLDKSITLPPDEIFRNLENAKRFAIDIGGSLT...\n           </td>\n          </tr>\n         </tbody>\n        </table>\n        <p>\n         1406 rows \xd7 5 columns\n        </p>\n       </div>\n       <div class="colab-df-buttons">\n        <div class="colab-df-container">\n         <button class="colab-df-convert" onclick="convertToInteractive(\'df-41104dbd-3b0d-4d7f-a634-c64ed20096f2\')" style="display:none;" title="Convert this dataframe to an interactive table.">\n          <svg height="24px" viewbox="0 -960 960 960" xmlns="http://www.w3.org/2000/svg">\n           <path d="M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z">\n           </path>\n          </svg>\n         </button>\n         <style>\n          .colab-df-container {\n      display:flex;\n      gap: 12px;\n    }\n\n    .colab-df-convert {\n      background-color: #E8F0FE;\n      border: none;\n      border-radius: 50%;\n      cursor: pointer;\n      display: none;\n      fill: #1967D2;\n      height: 32px;\n      padding: 0 0 0 0;\n      width: 32px;\n    }\n\n    .colab-df-convert:hover {\n      background-color: #E2EBFA;\n      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n      fill: #174EA6;\n    }\n\n    .colab-df-buttons div {\n      margin-bottom: 4px;\n    }\n\n    [theme=dark] .colab-df-convert {\n      background-color: #3B4455;\n      fill: #D2E3FC;\n    }\n\n    [theme=dark] .colab-df-convert:hover {\n      background-color: #434B5C;\n      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n      fill: #FFFFFF;\n    }\n         </style>\n         <script>\n          const buttonEl =\n        document.querySelector(\'#df-41104dbd-3b0d-4d7f-a634-c64ed20096f2 button.colab-df-convert\');\n      buttonEl.style.display =\n        google.colab.kernel.accessAllowed ? \'block\' : \'none\';\n\n      async function convertToInteractive(key) {\n        const element = document.querySelector(\'#df-41104dbd-3b0d-4d7f-a634-c64ed20096f2\');\n        const dataTable =\n          await google.colab.kernel.invokeFunction(\'convertToInteractive\',\n                                                    [key], {});\n        if (!dataTable) return;\n\n        const docLinkHtml = \'Like what you see? Visit the \' +\n          \'<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>\'\n          + \' to learn more about interactive tables.\';\n        element.innerHTML = \'\';\n        dataTable[\'output_type\'] = \'display_data\';\n        await google.colab.output.renderOutput(dataTable, element);\n        const docLink = document.createElement(\'div\');\n        docLink.innerHTML = docLinkHtml;\n        element.appendChild(docLink);\n      }\n         </script>\n        </div>\n        <div id="df-dbd11a08-a4b5-4509-9d3a-a78b782a21f3">\n         <button class="colab-df-quickchart" onclick="quickchart(\'df-dbd11a08-a4b5-4509-9d3a-a78b782a21f3\')" style="display:none;" title="Suggest charts">\n          <svg height="24px" viewbox="0 0 24 24" width="24px" xmlns="http://www.w3.org/2000/svg">\n           <g>\n            <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z">\n            </path>\n           </g>\n          </svg>\n         </button>\n         <style>\n          .colab-df-quickchart {\n      --bg-color: #E8F0FE;\n      --fill-color: #1967D2;\n      --hover-bg-color: #E2EBFA;\n      --hover-fill-color: #174EA6;\n      --disabled-fill-color: #AAA;\n      --disabled-bg-color: #DDD;\n  }\n\n  [theme=dark] .colab-df-quickchart {\n      --bg-color: #3B4455;\n      --fill-color: #D2E3FC;\n      --hover-bg-color: #434B5C;\n      --hover-fill-color: #FFFFFF;\n      --disabled-bg-color: #3B4455;\n      --disabled-fill-color: #666;\n  }\n\n  .colab-df-quickchart {\n    background-color: var(--bg-color);\n    border: none;\n    border-radius: 50%;\n    cursor: pointer;\n    display: none;\n    fill: var(--fill-color);\n    height: 32px;\n    padding: 0;\n    width: 32px;\n  }\n\n  .colab-df-quickchart:hover {\n    background-color: var(--hover-bg-color);\n    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n    fill: var(--button-hover-fill-color);\n  }\n\n  .colab-df-quickchart-complete:disabled,\n  .colab-df-quickchart-complete:disabled:hover {\n    background-color: var(--disabled-bg-color);\n    fill: var(--disabled-fill-color);\n    box-shadow: none;\n  }\n\n  .colab-df-spinner {\n    border: 2px solid var(--fill-color);\n    border-color: transparent;\n    border-bottom-color: var(--fill-color);\n    animation:\n      spin 1s steps(1) infinite;\n  }\n\n  @keyframes spin {\n    0% {\n      border-color: transparent;\n      border-bottom-color: var(--fill-color);\n      border-left-color: var(--fill-color);\n    }\n    20% {\n      border-color: transparent;\n      border-left-color: var(--fill-color);\n      border-top-color: var(--fill-color);\n    }\n    30% {\n      border-color: transparent;\n      border-left-color: var(--fill-color);\n      border-top-color: var(--fill-color);\n      border-right-color: var(--fill-color);\n    }\n    40% {\n      border-color: transparent;\n      border-right-color: var(--fill-color);\n      border-top-color: var(--fill-color);\n    }\n    60% {\n      border-color: transparent;\n      border-right-color: var(--fill-color);\n    }\n    80% {\n      border-color: transparent;\n      border-right-color: var(--fill-color);\n      border-bottom-color: var(--fill-color);\n    }\n    90% {\n      border-color: transparent;\n      border-bottom-color: var(--fill-color);\n    }\n  }\n         </style>\n         <script>\n          async function quickchart(key) {\n      const quickchartButtonEl =\n        document.querySelector(\'#\' + key + \' button\');\n      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n      quickchartButtonEl.classList.add(\'colab-df-spinner\');\n      try {\n        const charts = await google.colab.kernel.invokeFunction(\n            \'suggestCharts\', [key], {});\n      } catch (error) {\n        console.error(\'Error during call to suggestCharts:\', error);\n      }\n      quickchartButtonEl.classList.remove(\'colab-df-spinner\');\n      quickchartButtonEl.classList.add(\'colab-df-quickchart-complete\');\n    }\n    (() => {\n      let quickchartButtonEl =\n        document.querySelector(\'#df-dbd11a08-a4b5-4509-9d3a-a78b782a21f3 button\');\n      quickchartButtonEl.style.display =\n        google.colab.kernel.accessAllowed ? \'block\' : \'none\';\n    })();\n         </script>\n        </div>\n        <div id="id_a1631877-e0fa-4060-8a7d-e6d101de2071">\n         <style>\n          .colab-df-generate {\n        background-color: #E8F0FE;\n        border: none;\n        border-radius: 50%;\n        cursor: pointer;\n        display: none;\n        fill: #1967D2;\n        height: 32px;\n        padding: 0 0 0 0;\n        width: 32px;\n      }\n\n      .colab-df-generate:hover {\n        background-color: #E2EBFA;\n        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n        fill: #174EA6;\n      }\n\n      [theme=dark] .colab-df-generate {\n        background-color: #3B4455;\n        fill: #D2E3FC;\n      }\n\n      [theme=dark] .colab-df-generate:hover {\n        background-color: #434B5C;\n        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n        fill: #FFFFFF;\n      }\n         </style>\n         <button class="colab-df-generate" onclick="generateWithVariable(\'data\')" style="display:none;" title="Generate code using this dataframe.">\n          <svg height="24px" viewbox="0 0 24 24" width="24px" xmlns="http://www.w3.org/2000/svg">\n           <path d="M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z">\n           </path>\n          </svg>\n         </button>\n         <script>\n          (() => {\n      const buttonEl =\n        document.querySelector(\'#id_a1631877-e0fa-4060-8a7d-e6d101de2071 button.colab-df-generate\');\n      buttonEl.style.display =\n        google.colab.kernel.accessAllowed ? \'block\' : \'none\';\n\n      buttonEl.onclick = () => {\n        google.colab.notebook.generateWithVariable(\'data\');\n      }\n      })();\n         </script>\n        </div>\n       </div>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <p>\n      Now let\'s make the binding and active sites information clearer:\n     </p>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[\xa0]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-python">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="c1"># Extract the location from the binding and active site columns</span>\n<span class="k">def</span> <span class="nf">extract_location</span><span class="p">(</span><span class="n">site_info</span><span class="p">):</span>\n    <span class="k">if</span> <span class="n">pd</span><span class="o">.</span><span class="n">isnull</span><span class="p">(</span><span class="n">site_info</span><span class="p">):</span>\n        <span class="k">return</span> <span class="kc">None</span>\n    <span class="n">locations</span> <span class="o">=</span> <span class="p">[]</span>\n    <span class="k">for</span> <span class="n">info</span> <span class="ow">in</span> <span class="n">site_info</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">\';\'</span><span class="p">):</span>\n        <span class="k">if</span> <span class="s1">\'BINDING\'</span> <span class="ow">in</span> <span class="n">info</span> <span class="ow">or</span> <span class="s1">\'ACT_SITE\'</span> <span class="ow">in</span> <span class="n">info</span><span class="p">:</span>\n            <span class="n">locations</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">info</span><span class="o">.</span><span class="n">split</span><span class="p">()[</span><span class="mi">1</span><span class="p">])</span>\n    <span class="k">return</span> <span class="s1">\'; \'</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">locations</span><span class="p">)</span>\n\n<span class="c1"># Apply the function to the \'Binding site\' and \'Active site\' columns to extract the locations</span>\n<span class="n">data</span><span class="p">[</span><span class="s1">\'Binding site\'</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s1">\'Binding site\'</span><span class="p">]</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="n">extract_location</span><span class="p">)</span>\n<span class="n">data</span><span class="p">[</span><span class="s1">\'Active site\'</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s1">\'Active site\'</span><span class="p">]</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="n">extract_location</span><span class="p">)</span>\n\n<span class="c1"># Display the first few rows of the modified dataframe</span>\n<span class="n">data</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n  <div class="jp-Cell-outputWrapper">\n   <div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser">\n   </div>\n   <div class="jp-OutputArea jp-Cell-outputArea">\n    <div class="jp-OutputArea-child jp-OutputArea-executeResult">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n      Out[\xa0]:\n     </div>\n     <div class="jp-RenderedHTMLCommon jp-RenderedHTML jp-OutputArea-output jp-OutputArea-executeResult" data-mime-type="text/html" tabindex="0">\n      <div class="colab-df-container" id="df-117c4736-5ab6-4c7b-a539-1d7a599d2202">\n       <div>\n        <style scoped="">\n         .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n        </style>\n        <table border="1" class="dataframe">\n         <thead>\n          <tr style="text-align: right;">\n           <th>\n           </th>\n           <th>\n            Entry\n           </th>\n           <th>\n            Protein families\n           </th>\n           <th>\n            Binding site\n           </th>\n           <th>\n            Active site\n           </th>\n           <th>\n            Sequence\n           </th>\n          </tr>\n         </thead>\n         <tbody>\n          <tr>\n           <th>\n            359\n           </th>\n           <td>\n            Q504Y2\n           </td>\n           <td>\n            Protein kinase superfamily\n           </td>\n           <td>\n            144..152; 166\n           </td>\n           <td>\n            278\n           </td>\n           <td>\n            MRRRRAAVAAGFCASFLLGSVLNVLFAPGSEPPRPGQSPEPSPAPG...\n           </td>\n          </tr>\n          <tr>\n           <th>\n            414\n           </th>\n           <td>\n            Q8IWB6\n           </td>\n           <td>\n            Protein kinase superfamily\n           </td>\n           <td>\n            233..241; 273\n           </td>\n           <td>\n            None\n           </td>\n           <td>\n            MSRAVRLPVPCPVQLGTLRNDSLEAQLHEYVKQGNYVKVKKILKKG...\n           </td>\n          </tr>\n          <tr>\n           <th>\n            427\n           </th>\n           <td>\n            Q8NB16\n           </td>\n           <td>\n            Protein kinase superfamily\n           </td>\n           <td>\n            209..217; 230\n           </td>\n           <td>\n            None\n           </td>\n           <td>\n            MENLKHIITLGQVIHKRCEEMKYCKKQCRRLGHRVLGLIKPLEMLQ...\n           </td>\n          </tr>\n          <tr>\n           <th>\n            778\n           </th>\n           <td>\n            A0A7P0T838\n           </td>\n           <td>\n            Protein kinase superfamily\n           </td>\n           <td>\n            71\n           </td>\n           <td>\n            None\n           </td>\n           <td>\n            MPRVKAAQAGRQSSAKRHLAEQFAVGEIITDMAKKEWKVGLPIGQG...\n           </td>\n          </tr>\n          <tr>\n           <th>\n            779\n           </th>\n           <td>\n            A0A7P0T952\n           </td>\n           <td>\n            Protein kinase superfamily\n           </td>\n           <td>\n            71\n           </td>\n           <td>\n            None\n           </td>\n           <td>\n            MPRVKAAQAGRQSSAKRHLAEQFAVGEIITDMAKKEWKVGLPIGQG...\n           </td>\n          </tr>\n         </tbody>\n        </table>\n       </div>\n       <div class="colab-df-buttons">\n        <div class="colab-df-container">\n         <button class="colab-df-convert" onclick="convertToInteractive(\'df-117c4736-5ab6-4c7b-a539-1d7a599d2202\')" style="display:none;" title="Convert this dataframe to an interactive table.">\n          <svg height="24px" viewbox="0 -960 960 960" xmlns="http://www.w3.org/2000/svg">\n           <path d="M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z">\n           </path>\n          </svg>\n         </button>\n         <style>\n          .colab-df-container {\n      display:flex;\n      gap: 12px;\n    }\n\n    .colab-df-convert {\n      background-color: #E8F0FE;\n      border: none;\n      border-radius: 50%;\n      cursor: pointer;\n      display: none;\n      fill: #1967D2;\n      height: 32px;\n      padding: 0 0 0 0;\n      width: 32px;\n    }\n\n    .colab-df-convert:hover {\n      background-color: #E2EBFA;\n      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n      fill: #174EA6;\n    }\n\n    .colab-df-buttons div {\n      margin-bottom: 4px;\n    }\n\n    [theme=dark] .colab-df-convert {\n      background-color: #3B4455;\n      fill: #D2E3FC;\n    }\n\n    [theme=dark] .colab-df-convert:hover {\n      background-color: #434B5C;\n      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n      fill: #FFFFFF;\n    }\n         </style>\n         <script>\n          const buttonEl =\n        document.querySelector(\'#df-117c4736-5ab6-4c7b-a539-1d7a599d2202 button.colab-df-convert\');\n      buttonEl.style.display =\n        google.colab.kernel.accessAllowed ? \'block\' : \'none\';\n\n      async function convertToInteractive(key) {\n        const element = document.querySelector(\'#df-117c4736-5ab6-4c7b-a539-1d7a599d2202\');\n        const dataTable =\n          await google.colab.kernel.invokeFunction(\'convertToInteractive\',\n                                                    [key], {});\n        if (!dataTable) return;\n\n        const docLinkHtml = \'Like what you see? Visit the \' +\n          \'<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>\'\n          + \' to learn more about interactive tables.\';\n        element.innerHTML = \'\';\n        dataTable[\'output_type\'] = \'display_data\';\n        await google.colab.output.renderOutput(dataTable, element);\n        const docLink = document.createElement(\'div\');\n        docLink.innerHTML = docLinkHtml;\n        element.appendChild(docLink);\n      }\n         </script>\n        </div>\n        <div id="df-21462b0b-15dc-4f1c-89d7-f27790d48613">\n         <button class="colab-df-quickchart" onclick="quickchart(\'df-21462b0b-15dc-4f1c-89d7-f27790d48613\')" style="display:none;" title="Suggest charts">\n          <svg height="24px" viewbox="0 0 24 24" width="24px" xmlns="http://www.w3.org/2000/svg">\n           <g>\n            <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z">\n            </path>\n           </g>\n          </svg>\n         </button>\n         <style>\n          .colab-df-quickchart {\n      --bg-color: #E8F0FE;\n      --fill-color: #1967D2;\n      --hover-bg-color: #E2EBFA;\n      --hover-fill-color: #174EA6;\n      --disabled-fill-color: #AAA;\n      --disabled-bg-color: #DDD;\n  }\n\n  [theme=dark] .colab-df-quickchart {\n      --bg-color: #3B4455;\n      --fill-color: #D2E3FC;\n      --hover-bg-color: #434B5C;\n      --hover-fill-color: #FFFFFF;\n      --disabled-bg-color: #3B4455;\n      --disabled-fill-color: #666;\n  }\n\n  .colab-df-quickchart {\n    background-color: var(--bg-color);\n    border: none;\n    border-radius: 50%;\n    cursor: pointer;\n    display: none;\n    fill: var(--fill-color);\n    height: 32px;\n    padding: 0;\n    width: 32px;\n  }\n\n  .colab-df-quickchart:hover {\n    background-color: var(--hover-bg-color);\n    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n    fill: var(--button-hover-fill-color);\n  }\n\n  .colab-df-quickchart-complete:disabled,\n  .colab-df-quickchart-complete:disabled:hover {\n    background-color: var(--disabled-bg-color);\n    fill: var(--disabled-fill-color);\n    box-shadow: none;\n  }\n\n  .colab-df-spinner {\n    border: 2px solid var(--fill-color);\n    border-color: transparent;\n    border-bottom-color: var(--fill-color);\n    animation:\n      spin 1s steps(1) infinite;\n  }\n\n  @keyframes spin {\n    0% {\n      border-color: transparent;\n      border-bottom-color: var(--fill-color);\n      border-left-color: var(--fill-color);\n    }\n    20% {\n      border-color: transparent;\n      border-left-color: var(--fill-color);\n      border-top-color: var(--fill-color);\n    }\n    30% {\n      border-color: transparent;\n      border-left-color: var(--fill-color);\n      border-top-color: var(--fill-color);\n      border-right-color: var(--fill-color);\n    }\n    40% {\n      border-color: transparent;\n      border-right-color: var(--fill-color);\n      border-top-color: var(--fill-color);\n    }\n    60% {\n      border-color: transparent;\n      border-right-color: var(--fill-color);\n    }\n    80% {\n      border-color: transparent;\n      border-right-color: var(--fill-color);\n      border-bottom-color: var(--fill-color);\n    }\n    90% {\n      border-color: transparent;\n      border-bottom-color: var(--fill-color);\n    }\n  }\n         </style>\n         <script>\n          async function quickchart(key) {\n      const quickchartButtonEl =\n        document.querySelector(\'#\' + key + \' button\');\n      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n      quickchartButtonEl.classList.add(\'colab-df-spinner\');\n      try {\n        const charts = await google.colab.kernel.invokeFunction(\n            \'suggestCharts\', [key], {});\n      } catch (error) {\n        console.error(\'Error during call to suggestCharts:\', error);\n      }\n      quickchartButtonEl.classList.remove(\'colab-df-spinner\');\n      quickchartButtonEl.classList.add(\'colab-df-quickchart-complete\');\n    }\n    (() => {\n      let quickchartButtonEl =\n        document.querySelector(\'#df-21462b0b-15dc-4f1c-89d7-f27790d48613 button\');\n      quickchartButtonEl.style.display =\n        google.colab.kernel.accessAllowed ? \'block\' : \'none\';\n    })();\n         </script>\n        </div>\n       </div>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[\xa0]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-python">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="c1"># Create a new column that combines the \'Binding site\' and \'Active site\' columns</span>\n<span class="n">data</span><span class="p">[</span><span class="s1">\'Binding-Active site\'</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s1">\'Binding site\'</span><span class="p">]</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">str</span><span class="p">)</span> <span class="o">+</span> <span class="s1">\'; \'</span> <span class="o">+</span> <span class="n">data</span><span class="p">[</span><span class="s1">\'Active site\'</span><span class="p">]</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">str</span><span class="p">)</span>\n<span class="c1"># Replace \'nan\' values with None</span>\n<span class="n">data</span><span class="p">[</span><span class="s1">\'Binding-Active site\'</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s1">\'Binding-Active site\'</span><span class="p">]</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">\'nan; nan\'</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>\n\n<span class="n">data</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n  <div class="jp-Cell-outputWrapper">\n   <div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser">\n   </div>\n   <div class="jp-OutputArea jp-Cell-outputArea">\n    <div class="jp-OutputArea-child jp-OutputArea-executeResult">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n      Out[\xa0]:\n     </div>\n     <div class="jp-RenderedHTMLCommon jp-RenderedHTML jp-OutputArea-output jp-OutputArea-executeResult" data-mime-type="text/html" tabindex="0">\n      <div class="colab-df-container" id="df-7cc7e55b-40be-4416-b1f9-442373789d52">\n       <div>\n        <style scoped="">\n         .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n        </style>\n        <table border="1" class="dataframe">\n         <thead>\n          <tr style="text-align: right;">\n           <th>\n           </th>\n           <th>\n            Entry\n           </th>\n           <th>\n            Protein families\n           </th>\n           <th>\n            Binding site\n           </th>\n           <th>\n            Active site\n           </th>\n           <th>\n            Sequence\n           </th>\n           <th>\n            Binding-Active site\n           </th>\n          </tr>\n         </thead>\n         <tbody>\n          <tr>\n           <th>\n            359\n           </th>\n           <td>\n            Q504Y2\n           </td>\n           <td>\n            Protein kinase superfamily\n           </td>\n           <td>\n            144..152; 166\n           </td>\n           <td>\n            278\n           </td>\n           <td>\n            MRRRRAAVAAGFCASFLLGSVLNVLFAPGSEPPRPGQSPEPSPAPG...\n           </td>\n           <td>\n            144..152; 166; 278\n           </td>\n          </tr>\n          <tr>\n           <th>\n            414\n           </th>\n           <td>\n            Q8IWB6\n           </td>\n           <td>\n            Protein kinase superfamily\n           </td>\n           <td>\n            233..241; 273\n           </td>\n           <td>\n            None\n           </td>\n           <td>\n            MSRAVRLPVPCPVQLGTLRNDSLEAQLHEYVKQGNYVKVKKILKKG...\n           </td>\n           <td>\n            233..241; 273; None\n           </td>\n          </tr>\n          <tr>\n           <th>\n            427\n           </th>\n           <td>\n            Q8NB16\n           </td>\n           <td>\n            Protein kinase superfamily\n           </td>\n           <td>\n            209..217; 230\n           </td>\n           <td>\n            None\n           </td>\n           <td>\n            MENLKHIITLGQVIHKRCEEMKYCKKQCRRLGHRVLGLIKPLEMLQ...\n           </td>\n           <td>\n            209..217; 230; None\n           </td>\n          </tr>\n          <tr>\n           <th>\n            778\n           </th>\n           <td>\n            A0A7P0T838\n           </td>\n           <td>\n            Protein kinase superfamily\n           </td>\n           <td>\n            71\n           </td>\n           <td>\n            None\n           </td>\n           <td>\n            MPRVKAAQAGRQSSAKRHLAEQFAVGEIITDMAKKEWKVGLPIGQG...\n           </td>\n           <td>\n            71; None\n           </td>\n          </tr>\n          <tr>\n           <th>\n            779\n           </th>\n           <td>\n            A0A7P0T952\n           </td>\n           <td>\n            Protein kinase superfamily\n           </td>\n           <td>\n            71\n           </td>\n           <td>\n            None\n           </td>\n           <td>\n            MPRVKAAQAGRQSSAKRHLAEQFAVGEIITDMAKKEWKVGLPIGQG...\n           </td>\n           <td>\n            71; None\n           </td>\n          </tr>\n         </tbody>\n        </table>\n       </div>\n       <div class="colab-df-buttons">\n        <div class="colab-df-container">\n         <button class="colab-df-convert" onclick="convertToInteractive(\'df-7cc7e55b-40be-4416-b1f9-442373789d52\')" style="display:none;" title="Convert this dataframe to an interactive table.">\n          <svg height="24px" viewbox="0 -960 960 960" xmlns="http://www.w3.org/2000/svg">\n           <path d="M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z">\n           </path>\n          </svg>\n         </button>\n         <style>\n          .colab-df-container {\n      display:flex;\n      gap: 12px;\n    }\n\n    .colab-df-convert {\n      background-color: #E8F0FE;\n      border: none;\n      border-radius: 50%;\n      cursor: pointer;\n      display: none;\n      fill: #1967D2;\n      height: 32px;\n      padding: 0 0 0 0;\n      width: 32px;\n    }\n\n    .colab-df-convert:hover {\n      background-color: #E2EBFA;\n      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n      fill: #174EA6;\n    }\n\n    .colab-df-buttons div {\n      margin-bottom: 4px;\n    }\n\n    [theme=dark] .colab-df-convert {\n      background-color: #3B4455;\n      fill: #D2E3FC;\n    }\n\n    [theme=dark] .colab-df-convert:hover {\n      background-color: #434B5C;\n      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n      fill: #FFFFFF;\n    }\n         </style>\n         <script>\n          const buttonEl =\n        document.querySelector(\'#df-7cc7e55b-40be-4416-b1f9-442373789d52 button.colab-df-convert\');\n      buttonEl.style.display =\n        google.colab.kernel.accessAllowed ? \'block\' : \'none\';\n\n      async function convertToInteractive(key) {\n        const element = document.querySelector(\'#df-7cc7e55b-40be-4416-b1f9-442373789d52\');\n        const dataTable =\n          await google.colab.kernel.invokeFunction(\'convertToInteractive\',\n                                                    [key], {});\n        if (!dataTable) return;\n\n        const docLinkHtml = \'Like what you see? Visit the \' +\n          \'<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>\'\n          + \' to learn more about interactive tables.\';\n        element.innerHTML = \'\';\n        dataTable[\'output_type\'] = \'display_data\';\n        await google.colab.output.renderOutput(dataTable, element);\n        const docLink = document.createElement(\'div\');\n        docLink.innerHTML = docLinkHtml;\n        element.appendChild(docLink);\n      }\n         </script>\n        </div>\n        <div id="df-e041f621-57c2-4b2c-af1d-a31b8c0faa83">\n         <button class="colab-df-quickchart" onclick="quickchart(\'df-e041f621-57c2-4b2c-af1d-a31b8c0faa83\')" style="display:none;" title="Suggest charts">\n          <svg height="24px" viewbox="0 0 24 24" width="24px" xmlns="http://www.w3.org/2000/svg">\n           <g>\n            <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z">\n            </path>\n           </g>\n          </svg>\n         </button>\n         <style>\n          .colab-df-quickchart {\n      --bg-color: #E8F0FE;\n      --fill-color: #1967D2;\n      --hover-bg-color: #E2EBFA;\n      --hover-fill-color: #174EA6;\n      --disabled-fill-color: #AAA;\n      --disabled-bg-color: #DDD;\n  }\n\n  [theme=dark] .colab-df-quickchart {\n      --bg-color: #3B4455;\n      --fill-color: #D2E3FC;\n      --hover-bg-color: #434B5C;\n      --hover-fill-color: #FFFFFF;\n      --disabled-bg-color: #3B4455;\n      --disabled-fill-color: #666;\n  }\n\n  .colab-df-quickchart {\n    background-color: var(--bg-color);\n    border: none;\n    border-radius: 50%;\n    cursor: pointer;\n    display: none;\n    fill: var(--fill-color);\n    height: 32px;\n    padding: 0;\n    width: 32px;\n  }\n\n  .colab-df-quickchart:hover {\n    background-color: var(--hover-bg-color);\n    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n    fill: var(--button-hover-fill-color);\n  }\n\n  .colab-df-quickchart-complete:disabled,\n  .colab-df-quickchart-complete:disabled:hover {\n    background-color: var(--disabled-bg-color);\n    fill: var(--disabled-fill-color);\n    box-shadow: none;\n  }\n\n  .colab-df-spinner {\n    border: 2px solid var(--fill-color);\n    border-color: transparent;\n    border-bottom-color: var(--fill-color);\n    animation:\n      spin 1s steps(1) infinite;\n  }\n\n  @keyframes spin {\n    0% {\n      border-color: transparent;\n      border-bottom-color: var(--fill-color);\n      border-left-color: var(--fill-color);\n    }\n    20% {\n      border-color: transparent;\n      border-left-color: var(--fill-color);\n      border-top-color: var(--fill-color);\n    }\n    30% {\n      border-color: transparent;\n      border-left-color: var(--fill-color);\n      border-top-color: var(--fill-color);\n      border-right-color: var(--fill-color);\n    }\n    40% {\n      border-color: transparent;\n      border-right-color: var(--fill-color);\n      border-top-color: var(--fill-color);\n    }\n    60% {\n      border-color: transparent;\n      border-right-color: var(--fill-color);\n    }\n    80% {\n      border-color: transparent;\n      border-right-color: var(--fill-color);\n      border-bottom-color: var(--fill-color);\n    }\n    90% {\n      border-color: transparent;\n      border-bottom-color: var(--fill-color);\n    }\n  }\n         </style>\n         <script>\n          async function quickchart(key) {\n      const quickchartButtonEl =\n        document.querySelector(\'#\' + key + \' button\');\n      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n      quickchartButtonEl.classList.add(\'colab-df-spinner\');\n      try {\n        const charts = await google.colab.kernel.invokeFunction(\n            \'suggestCharts\', [key], {});\n      } catch (error) {\n        console.error(\'Error during call to suggestCharts:\', error);\n      }\n      quickchartButtonEl.classList.remove(\'colab-df-spinner\');\n      quickchartButtonEl.classList.add(\'colab-df-quickchart-complete\');\n    }\n    (() => {\n      let quickchartButtonEl =\n        document.querySelector(\'#df-e041f621-57c2-4b2c-af1d-a31b8c0faa83 button\');\n      quickchartButtonEl.style.display =\n        google.colab.kernel.accessAllowed ? \'block\' : \'none\';\n    })();\n         </script>\n        </div>\n       </div>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <h3 id="Angle-bracket-symbols-in-Binding/Active-site">\n      Angle bracket symbols in Binding/Active site\n      <a class="anchor-link" href="#Angle-bracket-symbols-in-Binding/Active-site">\n       \xb6\n      </a>\n     </h3>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <p>\n      In biological databases like UniProt, you may encounter entries in the "Binding site" or "Active site" columns (or any other feature-related columns) that contain symbols like \'&lt;\' or \'&gt;\', these typically indicate positional uncertainty or boundaries that are outside the range of the sequence currently being annotated:\n     </p>\n     <ul>\n      <li>\n       <p>\n        \'&lt;\': This symbol is used to indicate that the feature (such as a binding or active site) starts before the position given. For example, if you see "&lt;5" in the context of a binding site, it suggests that the binding site starts before amino acid position 5 in the protein sequence.\n       </p>\n      </li>\n      <li>\n       <p>\n        \'&gt;\': Conversely, this symbol is used to show that the feature extends beyond the position given. If you see "&gt;200" for an active site, it implies that the active site extends beyond amino acid position 200.\n       </p>\n      </li>\n     </ul>\n     <p>\n      These annotations provide information about the location of certain functional sites within a protein, but with an acknowledgment of some level of uncertainty or incompleteness in the data that could be due to various reasons, such as limitations in experimental data, partial protein sequences, or predictions based on related proteins rather than direct evidence.\n     </p>\n     <p>\n      We will filter out entries containing these symbols so as to work with a dataset with certainty on the binding/active sites.\n     </p>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[\xa0]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-python">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="c1"># Find entries containing \'&lt;\' or \'&gt;\'</span>\n<span class="n">entries_angles</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s1">\'Binding-Active site\'</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">contains</span><span class="p">(</span><span class="s1">\'&lt;|&gt;\'</span><span class="p">,</span> <span class="n">na</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>\n<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Number of entries with angle brackets: </span><span class="si">{</span><span class="n">entries_angles</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>\n\n<span class="c1"># Remove all rows where the "Binding-Active site" column contains \'&lt;\' or \'&gt;\'</span>\n<span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="o">~</span><span class="n">entries_angles</span><span class="p">]</span>\n<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Number of remaining rows: </span><span class="si">{</span><span class="n">data</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n  <div class="jp-Cell-outputWrapper">\n   <div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser">\n   </div>\n   <div class="jp-OutputArea jp-Cell-outputArea">\n    <div class="jp-OutputArea-child">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n     </div>\n     <div class="jp-RenderedText jp-OutputArea-output" data-mime-type="text/plain" tabindex="0">\n      <pre class="overflow-x-scroll font-mono">Number of entries with angle brackets: 0\nNumber of remaining rows: 1406\n</pre>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <h3 id="Question-mark-(%22?%22)-symbols-in-Binding/Active-site">\n      Question mark ("?") symbols in Binding/Active site\n      <a class="anchor-link" href="#Question-mark-(%22?%22)-symbols-in-Binding/Active-site">\n       \xb6\n      </a>\n     </h3>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <p>\n      In biological databases like UniProt, a question mark ("?") in the "Binding site" or "Active site" columns typically indicates uncertainty or incomplete information regarding the feature in question. It might mean the exact position of the binding or active site within the protein sequence may not be clearly determined, or it may be a predicted feature based on computational models or inferred from homologous proteins, but not yet experimentally verified. It can also be due to conflicting data or interpretations about the presence or characteristics of the site, or the annotation process just being incomplete.\n     </p>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[\xa0]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-python">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="c1"># Find rows where the "Binding-Active site" column contains the character "?", treating "?" as a literal character</span>\n<span class="n">entries_question_mark</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">data</span><span class="p">[</span><span class="s1">\'Binding-Active site\'</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">contains</span><span class="p">(</span><span class="s1">\'\\?\'</span><span class="p">,</span> <span class="n">na</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span> <span class="n">regex</span><span class="o">=</span><span class="kc">True</span><span class="p">)]</span>\n<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Number of entries with angle brackets: </span><span class="si">{</span><span class="n">entries_question_mark</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>\n\n<span class="c1"># Remove all rows containing \'?\' in the "Binding-Active site" column</span>\n<span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">drop</span><span class="p">(</span><span class="n">entries_question_mark</span><span class="o">.</span><span class="n">index</span><span class="p">)</span>\n<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Number of remaining rows: </span><span class="si">{</span><span class="n">data</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n  <div class="jp-Cell-outputWrapper">\n   <div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser">\n   </div>\n   <div class="jp-OutputArea jp-Cell-outputArea">\n    <div class="jp-OutputArea-child">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n     </div>\n     <div class="jp-RenderedText jp-OutputArea-output" data-mime-type="text/plain" tabindex="0">\n      <pre class="overflow-x-scroll font-mono">Number of entries with angle brackets: 0\nNumber of remaining rows: 1406\n</pre>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <h3 id="Binding/active-sites-labels">\n      Binding/active sites labels\n      <a class="anchor-link" href="#Binding/active-sites-labels">\n       \xb6\n      </a>\n     </h3>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <p>\n      Now let\'s define all aminoacids involved in binding/active sites by expanding the ranges to especify all amino acid indexes that are a binding/active site:\n     </p>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[\xa0]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-python">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="k">def</span> <span class="nf">expand_ranges</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>\n    <span class="sd">"""Expand ranges into a comma-separated string."""</span>\n    <span class="k">return</span> <span class="n">re</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="sa">r</span><span class="s1">\'(\\d+)\\.\\.(\\d+)\'</span><span class="p">,</span> <span class="k">lambda</span> <span class="n">m</span><span class="p">:</span> <span class="s1">\', \'</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="nb">range</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">m</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">)),</span> <span class="nb">int</span><span class="p">(</span><span class="n">m</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span><span class="o">+</span><span class="mi">1</span><span class="p">))),</span> <span class="nb">str</span><span class="p">(</span><span class="n">s</span><span class="p">))</span>\n\n<span class="n">data</span><span class="p">[</span><span class="s1">\'Binding-Active site\'</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s1">\'Binding-Active site\'</span><span class="p">]</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="n">expand_ranges</span><span class="p">)</span>\n<span class="nb">print</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="n">head</span><span class="p">())</span>\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n  <div class="jp-Cell-outputWrapper">\n   <div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser">\n   </div>\n   <div class="jp-OutputArea jp-Cell-outputArea">\n    <div class="jp-OutputArea-child">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n     </div>\n     <div class="jp-RenderedText jp-OutputArea-output" data-mime-type="text/plain" tabindex="0">\n      <pre class="overflow-x-scroll font-mono">          Entry            Protein families   Binding site Active site  \\\n359      Q504Y2  Protein kinase superfamily  144..152; 166         278   \n414      Q8IWB6  Protein kinase superfamily  233..241; 273        None   \n427      Q8NB16  Protein kinase superfamily  209..217; 230        None   \n778  A0A7P0T838  Protein kinase superfamily             71        None   \n779  A0A7P0T952  Protein kinase superfamily             71        None   \n\n                                              Sequence  \\\n359  MRRRRAAVAAGFCASFLLGSVLNVLFAPGSEPPRPGQSPEPSPAPG...   \n414  MSRAVRLPVPCPVQLGTLRNDSLEAQLHEYVKQGNYVKVKKILKKG...   \n427  MENLKHIITLGQVIHKRCEEMKYCKKQCRRLGHRVLGLIKPLEMLQ...   \n778  MPRVKAAQAGRQSSAKRHLAEQFAVGEIITDMAKKEWKVGLPIGQG...   \n779  MPRVKAAQAGRQSSAKRHLAEQFAVGEIITDMAKKEWKVGLPIGQG...   \n\n                                   Binding-Active site  \n359  144, 145, 146, 147, 148, 149, 150, 151, 152; 1...  \n414  233, 234, 235, 236, 237, 238, 239, 240, 241; 2...  \n427  209, 210, 211, 212, 213, 214, 215, 216, 217; 2...  \n778                                           71; None  \n779                                           71; None  \n</pre>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <p>\n      You can now convert the binding/active sites information into a binary label: 1s where there is a binding/active site; 0s where there is not. Retrieve the indices in \'Bindig/active site\' column, and set their corresponding positions in the protein sequence to 1. All other aminoacids of the sequence are set to 0:\n     </p>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[\xa0]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-python">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="k">def</span> <span class="nf">convert_to_binary_list</span><span class="p">(</span><span class="n">binding_active_str</span><span class="p">,</span> <span class="n">sequence_len</span><span class="p">):</span>\n    <span class="sd">"""Convert a Binding-Active site string to a binary list based on the sequence length."""</span>\n    <span class="n">binary_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">sequence_len</span>\n    <span class="c1"># Retrieve the indices in bindig/active sites and set their corresponding positions to 1</span>\n    <span class="k">if</span> <span class="n">pd</span><span class="o">.</span><span class="n">notna</span><span class="p">(</span><span class="n">binding_active_str</span><span class="p">):</span>\n        <span class="n">indices</span> <span class="o">=</span> <span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span> <span class="k">for</span> <span class="n">segment</span> <span class="ow">in</span> <span class="n">binding_active_str</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">\';\'</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">segment</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">\',\'</span><span class="p">)</span> <span class="k">if</span> <span class="n">x</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span><span class="o">.</span><span class="n">isdigit</span><span class="p">()]</span>\n        <span class="k">for</span> <span class="n">idx</span> <span class="ow">in</span> <span class="n">indices</span><span class="p">:</span>\n            <span class="k">if</span> <span class="mi">0</span> <span class="o">&lt;=</span> <span class="n">idx</span> <span class="o">&lt;</span> <span class="n">sequence_len</span><span class="p">:</span> <span class="c1"># Ensure the index is within the valid range</span>\n                <span class="n">binary_list</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>\n\n    <span class="k">return</span> <span class="n">binary_list</span>\n\n<span class="c1"># Apply the function to both datasets</span>\n<span class="n">data</span><span class="p">[</span><span class="s1">\'Binding-Active site\'</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">row</span><span class="p">:</span> <span class="n">convert_to_binary_list</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="s1">\'Binding-Active site\'</span><span class="p">],</span> <span class="nb">len</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="s1">\'Sequence\'</span><span class="p">])),</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>\n<span class="n">data</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n  <div class="jp-Cell-outputWrapper">\n   <div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser">\n   </div>\n   <div class="jp-OutputArea jp-Cell-outputArea">\n    <div class="jp-OutputArea-child jp-OutputArea-executeResult">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n      Out[\xa0]:\n     </div>\n     <div class="jp-RenderedHTMLCommon jp-RenderedHTML jp-OutputArea-output jp-OutputArea-executeResult" data-mime-type="text/html" tabindex="0">\n      <div class="colab-df-container" id="df-7ea5b4ae-0460-4711-b3ed-56b171c61c76">\n       <div>\n        <style scoped="">\n         .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n        </style>\n        <table border="1" class="dataframe">\n         <thead>\n          <tr style="text-align: right;">\n           <th>\n           </th>\n           <th>\n            Entry\n           </th>\n           <th>\n            Protein families\n           </th>\n           <th>\n            Binding site\n           </th>\n           <th>\n            Active site\n           </th>\n           <th>\n            Sequence\n           </th>\n           <th>\n            Binding-Active site\n           </th>\n          </tr>\n         </thead>\n         <tbody>\n          <tr>\n           <th>\n            359\n           </th>\n           <td>\n            Q504Y2\n           </td>\n           <td>\n            Protein kinase superfamily\n           </td>\n           <td>\n            144..152; 166\n           </td>\n           <td>\n            278\n           </td>\n           <td>\n            MRRRRAAVAAGFCASFLLGSVLNVLFAPGSEPPRPGQSPEPSPAPG...\n           </td>\n           <td>\n            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...\n           </td>\n          </tr>\n          <tr>\n           <th>\n            414\n           </th>\n           <td>\n            Q8IWB6\n           </td>\n           <td>\n            Protein kinase superfamily\n           </td>\n           <td>\n            233..241; 273\n           </td>\n           <td>\n            None\n           </td>\n           <td>\n            MSRAVRLPVPCPVQLGTLRNDSLEAQLHEYVKQGNYVKVKKILKKG...\n           </td>\n           <td>\n            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...\n           </td>\n          </tr>\n          <tr>\n           <th>\n            427\n           </th>\n           <td>\n            Q8NB16\n           </td>\n           <td>\n            Protein kinase superfamily\n           </td>\n           <td>\n            209..217; 230\n           </td>\n           <td>\n            None\n           </td>\n           <td>\n            MENLKHIITLGQVIHKRCEEMKYCKKQCRRLGHRVLGLIKPLEMLQ...\n           </td>\n           <td>\n            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...\n           </td>\n          </tr>\n          <tr>\n           <th>\n            778\n           </th>\n           <td>\n            A0A7P0T838\n           </td>\n           <td>\n            Protein kinase superfamily\n           </td>\n           <td>\n            71\n           </td>\n           <td>\n            None\n           </td>\n           <td>\n            MPRVKAAQAGRQSSAKRHLAEQFAVGEIITDMAKKEWKVGLPIGQG...\n           </td>\n           <td>\n            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...\n           </td>\n          </tr>\n          <tr>\n           <th>\n            779\n           </th>\n           <td>\n            A0A7P0T952\n           </td>\n           <td>\n            Protein kinase superfamily\n           </td>\n           <td>\n            71\n           </td>\n           <td>\n            None\n           </td>\n           <td>\n            MPRVKAAQAGRQSSAKRHLAEQFAVGEIITDMAKKEWKVGLPIGQG...\n           </td>\n           <td>\n            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...\n           </td>\n          </tr>\n         </tbody>\n        </table>\n       </div>\n       <div class="colab-df-buttons">\n        <div class="colab-df-container">\n         <button class="colab-df-convert" onclick="convertToInteractive(\'df-7ea5b4ae-0460-4711-b3ed-56b171c61c76\')" style="display:none;" title="Convert this dataframe to an interactive table.">\n          <svg height="24px" viewbox="0 -960 960 960" xmlns="http://www.w3.org/2000/svg">\n           <path d="M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z">\n           </path>\n          </svg>\n         </button>\n         <style>\n          .colab-df-container {\n      display:flex;\n      gap: 12px;\n    }\n\n    .colab-df-convert {\n      background-color: #E8F0FE;\n      border: none;\n      border-radius: 50%;\n      cursor: pointer;\n      display: none;\n      fill: #1967D2;\n      height: 32px;\n      padding: 0 0 0 0;\n      width: 32px;\n    }\n\n    .colab-df-convert:hover {\n      background-color: #E2EBFA;\n      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n      fill: #174EA6;\n    }\n\n    .colab-df-buttons div {\n      margin-bottom: 4px;\n    }\n\n    [theme=dark] .colab-df-convert {\n      background-color: #3B4455;\n      fill: #D2E3FC;\n    }\n\n    [theme=dark] .colab-df-convert:hover {\n      background-color: #434B5C;\n      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n      fill: #FFFFFF;\n    }\n         </style>\n         <script>\n          const buttonEl =\n        document.querySelector(\'#df-7ea5b4ae-0460-4711-b3ed-56b171c61c76 button.colab-df-convert\');\n      buttonEl.style.display =\n        google.colab.kernel.accessAllowed ? \'block\' : \'none\';\n\n      async function convertToInteractive(key) {\n        const element = document.querySelector(\'#df-7ea5b4ae-0460-4711-b3ed-56b171c61c76\');\n        const dataTable =\n          await google.colab.kernel.invokeFunction(\'convertToInteractive\',\n                                                    [key], {});\n        if (!dataTable) return;\n\n        const docLinkHtml = \'Like what you see? Visit the \' +\n          \'<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>\'\n          + \' to learn more about interactive tables.\';\n        element.innerHTML = \'\';\n        dataTable[\'output_type\'] = \'display_data\';\n        await google.colab.output.renderOutput(dataTable, element);\n        const docLink = document.createElement(\'div\');\n        docLink.innerHTML = docLinkHtml;\n        element.appendChild(docLink);\n      }\n         </script>\n        </div>\n        <div id="df-b15a51dd-6168-41b0-ae00-d9341d809622">\n         <button class="colab-df-quickchart" onclick="quickchart(\'df-b15a51dd-6168-41b0-ae00-d9341d809622\')" style="display:none;" title="Suggest charts">\n          <svg height="24px" viewbox="0 0 24 24" width="24px" xmlns="http://www.w3.org/2000/svg">\n           <g>\n            <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z">\n            </path>\n           </g>\n          </svg>\n         </button>\n         <style>\n          .colab-df-quickchart {\n      --bg-color: #E8F0FE;\n      --fill-color: #1967D2;\n      --hover-bg-color: #E2EBFA;\n      --hover-fill-color: #174EA6;\n      --disabled-fill-color: #AAA;\n      --disabled-bg-color: #DDD;\n  }\n\n  [theme=dark] .colab-df-quickchart {\n      --bg-color: #3B4455;\n      --fill-color: #D2E3FC;\n      --hover-bg-color: #434B5C;\n      --hover-fill-color: #FFFFFF;\n      --disabled-bg-color: #3B4455;\n      --disabled-fill-color: #666;\n  }\n\n  .colab-df-quickchart {\n    background-color: var(--bg-color);\n    border: none;\n    border-radius: 50%;\n    cursor: pointer;\n    display: none;\n    fill: var(--fill-color);\n    height: 32px;\n    padding: 0;\n    width: 32px;\n  }\n\n  .colab-df-quickchart:hover {\n    background-color: var(--hover-bg-color);\n    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n    fill: var(--button-hover-fill-color);\n  }\n\n  .colab-df-quickchart-complete:disabled,\n  .colab-df-quickchart-complete:disabled:hover {\n    background-color: var(--disabled-bg-color);\n    fill: var(--disabled-fill-color);\n    box-shadow: none;\n  }\n\n  .colab-df-spinner {\n    border: 2px solid var(--fill-color);\n    border-color: transparent;\n    border-bottom-color: var(--fill-color);\n    animation:\n      spin 1s steps(1) infinite;\n  }\n\n  @keyframes spin {\n    0% {\n      border-color: transparent;\n      border-bottom-color: var(--fill-color);\n      border-left-color: var(--fill-color);\n    }\n    20% {\n      border-color: transparent;\n      border-left-color: var(--fill-color);\n      border-top-color: var(--fill-color);\n    }\n    30% {\n      border-color: transparent;\n      border-left-color: var(--fill-color);\n      border-top-color: var(--fill-color);\n      border-right-color: var(--fill-color);\n    }\n    40% {\n      border-color: transparent;\n      border-right-color: var(--fill-color);\n      border-top-color: var(--fill-color);\n    }\n    60% {\n      border-color: transparent;\n      border-right-color: var(--fill-color);\n    }\n    80% {\n      border-color: transparent;\n      border-right-color: var(--fill-color);\n      border-bottom-color: var(--fill-color);\n    }\n    90% {\n      border-color: transparent;\n      border-bottom-color: var(--fill-color);\n    }\n  }\n         </style>\n         <script>\n          async function quickchart(key) {\n      const quickchartButtonEl =\n        document.querySelector(\'#\' + key + \' button\');\n      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n      quickchartButtonEl.classList.add(\'colab-df-spinner\');\n      try {\n        const charts = await google.colab.kernel.invokeFunction(\n            \'suggestCharts\', [key], {});\n      } catch (error) {\n        console.error(\'Error during call to suggestCharts:\', error);\n      }\n      quickchartButtonEl.classList.remove(\'colab-df-spinner\');\n      quickchartButtonEl.classList.add(\'colab-df-quickchart-complete\');\n    }\n    (() => {\n      let quickchartButtonEl =\n        document.querySelector(\'#df-b15a51dd-6168-41b0-ae00-d9341d809622 button\');\n      quickchartButtonEl.style.display =\n        google.colab.kernel.accessAllowed ? \'block\' : \'none\';\n    })();\n         </script>\n        </div>\n       </div>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <h2>\n      Split train/test sets\n      <a class="anchor-link" href="#Split-train/test-sets">\n       \xb6\n      </a>\n     </h2>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <p>\n      Let\'s create a split of the data into training and test sets based on UniProt protein families, such that it ensures entire protein families are either in the training set or the test set. The goal is that the test set will contain completely "new" families of proteins that are not seen in the training set, so the evaluation represents the model\'s ability to generalize to entirely new families of proteins that it has not seen during training.\n     </p>\n     <p>\n      Notably, this is different from the traiditional stratified split, which aims to preserve the distribution of classes across both sets.\n     </p>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[\xa0]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-python">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="c1"># Get the number of distinct protein families</span>\n<span class="n">num_families</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s1">\'Protein families\'</span><span class="p">]</span><span class="o">.</span><span class="n">nunique</span><span class="p">()</span>\n<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Number of distinct protein families: </span><span class="si">{</span><span class="n">num_families</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n  <div class="jp-Cell-outputWrapper">\n   <div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser">\n   </div>\n   <div class="jp-OutputArea jp-Cell-outputArea">\n    <div class="jp-OutputArea-child">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n     </div>\n     <div class="jp-RenderedText jp-OutputArea-output" data-mime-type="text/plain" tabindex="0">\n      <pre class="overflow-x-scroll font-mono">Number of distinct protein families: 126\n</pre>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[\xa0]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-python">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="k">def</span> <span class="nf">split_data_by_family</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">test_ratio</span><span class="o">=</span><span class="mf">0.20</span><span class="p">):</span>\n    <span class="sd">"""</span>\n<span class="sd">    Splits the dataset into train and test sets by entire protein families (not a family-stratified split!).</span>\n\n<span class="sd">    Parameters:</span>\n<span class="sd">    - data: pandas DataFrame containing the dataset with a \'Protein families\' column.</span>\n<span class="sd">    - test_ratio: float, the proportion of the dataset to include in the test split.</span>\n\n<span class="sd">    Returns:</span>\n<span class="sd">    - test_df: pandas DataFrame containing the test set.</span>\n<span class="sd">    - train_df: pandas DataFrame containing the training set.</span>\n<span class="sd">    """</span>\n    <span class="c1"># Get unique protein families and shuffle them to randomize the selection</span>\n    <span class="n">unique_families</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s1">\'Protein families\'</span><span class="p">]</span><span class="o">.</span><span class="n">unique</span><span class="p">()</span>\n    <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">shuffle</span><span class="p">(</span><span class="n">unique_families</span><span class="p">)</span>\n\n    <span class="c1"># Loop through the shuffled families and add rows to the test set</span>\n    <span class="n">test_rows</span> <span class="o">=</span> <span class="p">[]</span>\n    <span class="n">current_test_rows</span> <span class="o">=</span> <span class="mi">0</span>\n    <span class="k">for</span> <span class="n">family</span> <span class="ow">in</span> <span class="n">unique_families</span><span class="p">:</span>\n        <span class="n">family_rows</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">data</span><span class="p">[</span><span class="s1">\'Protein families\'</span><span class="p">]</span> <span class="o">==</span> <span class="n">family</span><span class="p">]</span><span class="o">.</span><span class="n">index</span><span class="o">.</span><span class="n">tolist</span><span class="p">()</span>\n        <span class="k">if</span> <span class="n">current_test_rows</span> <span class="o">+</span> <span class="nb">len</span><span class="p">(</span><span class="n">family_rows</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="nb">int</span><span class="p">(</span><span class="n">test_ratio</span> <span class="o">*</span> <span class="n">data</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]):</span>\n            <span class="n">test_rows</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">family_rows</span><span class="p">)</span>\n            <span class="n">current_test_rows</span> <span class="o">+=</span> <span class="nb">len</span><span class="p">(</span><span class="n">family_rows</span><span class="p">)</span>\n        <span class="k">else</span><span class="p">:</span>\n            <span class="c1"># If adding the current family exceeds the target, stop adding</span>\n            <span class="n">test_rows</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">family_rows</span><span class="p">)</span>\n            <span class="k">break</span>\n\n    <span class="c1"># Create the test and train datasets</span>\n    <span class="n">train_rows</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">data</span><span class="o">.</span><span class="n">index</span> <span class="k">if</span> <span class="n">i</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">test_rows</span><span class="p">]</span>\n    <span class="n">test_df</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="n">test_rows</span><span class="p">]</span>\n    <span class="n">train_df</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="n">train_rows</span><span class="p">]</span>\n\n    <span class="k">return</span> <span class="n">test_df</span><span class="p">,</span> <span class="n">train_df</span>\n\n<span class="n">test_df</span><span class="p">,</span> <span class="n">train_df</span> <span class="o">=</span> <span class="n">split_data_by_family</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">test_ratio</span><span class="o">=</span><span class="mf">0.20</span><span class="p">)</span>\n<span class="nb">print</span><span class="p">(</span><span class="n">test_df</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">train_df</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n  <div class="jp-Cell-outputWrapper">\n   <div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser">\n   </div>\n   <div class="jp-OutputArea jp-Cell-outputArea">\n    <div class="jp-OutputArea-child">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n     </div>\n     <div class="jp-RenderedText jp-OutputArea-output" data-mime-type="text/plain" tabindex="0">\n      <pre class="overflow-x-scroll font-mono">392 1014\n</pre>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[\xa0]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-python">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="n">test_df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n  <div class="jp-Cell-outputWrapper">\n   <div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser">\n   </div>\n   <div class="jp-OutputArea jp-Cell-outputArea">\n    <div class="jp-OutputArea-child jp-OutputArea-executeResult">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n      Out[\xa0]:\n     </div>\n     <div class="jp-RenderedHTMLCommon jp-RenderedHTML jp-OutputArea-output jp-OutputArea-executeResult" data-mime-type="text/html" tabindex="0">\n      <div class="colab-df-container" id="df-7ed403a7-3485-4b7d-8f5c-9b5804be8e65">\n       <div>\n        <style scoped="">\n         .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n        </style>\n        <table border="1" class="dataframe">\n         <thead>\n          <tr style="text-align: right;">\n           <th>\n           </th>\n           <th>\n            Entry\n           </th>\n           <th>\n            Protein families\n           </th>\n           <th>\n            Binding site\n           </th>\n           <th>\n            Active site\n           </th>\n           <th>\n            Sequence\n           </th>\n           <th>\n            Binding-Active site\n           </th>\n          </tr>\n         </thead>\n         <tbody>\n          <tr>\n           <th>\n            39\n           </th>\n           <td>\n            O43252\n           </td>\n           <td>\n            APS kinase family; Sulfate adenylyltransferase...\n           </td>\n           <td>\n            62..67; 89..92; 101; 106..109; 132..133; 171; ...\n           </td>\n           <td>\n            None\n           </td>\n           <td>\n            MEIPGSLCKKVKLSNNAQNWGMQRATNVTYQAHHVSRNKRGQVVGT...\n           </td>\n           <td>\n            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...\n           </td>\n          </tr>\n          <tr>\n           <th>\n            68\n           </th>\n           <td>\n            O95340\n           </td>\n           <td>\n            APS kinase family; Sulfate adenylyltransferase...\n           </td>\n           <td>\n            52..57; 79..82; 91; 96..99; 122..123; 161; 174...\n           </td>\n           <td>\n            None\n           </td>\n           <td>\n            MSGIKKQKTENQQKSTNVVYQAHHVSRNKRGQVVGTRGGFRGCTVW...\n           </td>\n           <td>\n            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...\n           </td>\n          </tr>\n          <tr>\n           <th>\n            4\n           </th>\n           <td>\n            A0A2P9DU05\n           </td>\n           <td>\n            Protein kinase superfamily, AGC Ser/Thr protei...\n           </td>\n           <td>\n            121\n           </td>\n           <td>\n            214\n           </td>\n           <td>\n            MSRPPPTGKMPGAPETAPGDGAGASRQRKLEALIRDPRSPINVESL...\n           </td>\n           <td>\n            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...\n           </td>\n          </tr>\n          <tr>\n           <th>\n            12\n           </th>\n           <td>\n            O00141\n           </td>\n           <td>\n            Protein kinase superfamily, AGC Ser/Thr protei...\n           </td>\n           <td>\n            104..112; 127\n           </td>\n           <td>\n            222\n           </td>\n           <td>\n            MTVKTEAAKGTLTYSRMRGMVAILIAFMKQRRMGLNDFIQKIANNS...\n           </td>\n           <td>\n            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...\n           </td>\n          </tr>\n          <tr>\n           <th>\n            22\n           </th>\n           <td>\n            O14578\n           </td>\n           <td>\n            Protein kinase superfamily, AGC Ser/Thr protei...\n           </td>\n           <td>\n            103..111; 126\n           </td>\n           <td>\n            221\n           </td>\n           <td>\n            MLKFKYGARNPLDAGAAEPIASRASRLNLFFQGKPPFMTQQQMSPL...\n           </td>\n           <td>\n            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...\n           </td>\n          </tr>\n         </tbody>\n        </table>\n       </div>\n       <div class="colab-df-buttons">\n        <div class="colab-df-container">\n         <button class="colab-df-convert" onclick="convertToInteractive(\'df-7ed403a7-3485-4b7d-8f5c-9b5804be8e65\')" style="display:none;" title="Convert this dataframe to an interactive table.">\n          <svg height="24px" viewbox="0 -960 960 960" xmlns="http://www.w3.org/2000/svg">\n           <path d="M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z">\n           </path>\n          </svg>\n         </button>\n         <style>\n          .colab-df-container {\n      display:flex;\n      gap: 12px;\n    }\n\n    .colab-df-convert {\n      background-color: #E8F0FE;\n      border: none;\n      border-radius: 50%;\n      cursor: pointer;\n      display: none;\n      fill: #1967D2;\n      height: 32px;\n      padding: 0 0 0 0;\n      width: 32px;\n    }\n\n    .colab-df-convert:hover {\n      background-color: #E2EBFA;\n      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n      fill: #174EA6;\n    }\n\n    .colab-df-buttons div {\n      margin-bottom: 4px;\n    }\n\n    [theme=dark] .colab-df-convert {\n      background-color: #3B4455;\n      fill: #D2E3FC;\n    }\n\n    [theme=dark] .colab-df-convert:hover {\n      background-color: #434B5C;\n      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n      fill: #FFFFFF;\n    }\n         </style>\n         <script>\n          const buttonEl =\n        document.querySelector(\'#df-7ed403a7-3485-4b7d-8f5c-9b5804be8e65 button.colab-df-convert\');\n      buttonEl.style.display =\n        google.colab.kernel.accessAllowed ? \'block\' : \'none\';\n\n      async function convertToInteractive(key) {\n        const element = document.querySelector(\'#df-7ed403a7-3485-4b7d-8f5c-9b5804be8e65\');\n        const dataTable =\n          await google.colab.kernel.invokeFunction(\'convertToInteractive\',\n                                                    [key], {});\n        if (!dataTable) return;\n\n        const docLinkHtml = \'Like what you see? Visit the \' +\n          \'<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>\'\n          + \' to learn more about interactive tables.\';\n        element.innerHTML = \'\';\n        dataTable[\'output_type\'] = \'display_data\';\n        await google.colab.output.renderOutput(dataTable, element);\n        const docLink = document.createElement(\'div\');\n        docLink.innerHTML = docLinkHtml;\n        element.appendChild(docLink);\n      }\n         </script>\n        </div>\n        <div id="df-50f317fa-87c1-46a3-be88-3479ebb0f48d">\n         <button class="colab-df-quickchart" onclick="quickchart(\'df-50f317fa-87c1-46a3-be88-3479ebb0f48d\')" style="display:none;" title="Suggest charts">\n          <svg height="24px" viewbox="0 0 24 24" width="24px" xmlns="http://www.w3.org/2000/svg">\n           <g>\n            <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z">\n            </path>\n           </g>\n          </svg>\n         </button>\n         <style>\n          .colab-df-quickchart {\n      --bg-color: #E8F0FE;\n      --fill-color: #1967D2;\n      --hover-bg-color: #E2EBFA;\n      --hover-fill-color: #174EA6;\n      --disabled-fill-color: #AAA;\n      --disabled-bg-color: #DDD;\n  }\n\n  [theme=dark] .colab-df-quickchart {\n      --bg-color: #3B4455;\n      --fill-color: #D2E3FC;\n      --hover-bg-color: #434B5C;\n      --hover-fill-color: #FFFFFF;\n      --disabled-bg-color: #3B4455;\n      --disabled-fill-color: #666;\n  }\n\n  .colab-df-quickchart {\n    background-color: var(--bg-color);\n    border: none;\n    border-radius: 50%;\n    cursor: pointer;\n    display: none;\n    fill: var(--fill-color);\n    height: 32px;\n    padding: 0;\n    width: 32px;\n  }\n\n  .colab-df-quickchart:hover {\n    background-color: var(--hover-bg-color);\n    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n    fill: var(--button-hover-fill-color);\n  }\n\n  .colab-df-quickchart-complete:disabled,\n  .colab-df-quickchart-complete:disabled:hover {\n    background-color: var(--disabled-bg-color);\n    fill: var(--disabled-fill-color);\n    box-shadow: none;\n  }\n\n  .colab-df-spinner {\n    border: 2px solid var(--fill-color);\n    border-color: transparent;\n    border-bottom-color: var(--fill-color);\n    animation:\n      spin 1s steps(1) infinite;\n  }\n\n  @keyframes spin {\n    0% {\n      border-color: transparent;\n      border-bottom-color: var(--fill-color);\n      border-left-color: var(--fill-color);\n    }\n    20% {\n      border-color: transparent;\n      border-left-color: var(--fill-color);\n      border-top-color: var(--fill-color);\n    }\n    30% {\n      border-color: transparent;\n      border-left-color: var(--fill-color);\n      border-top-color: var(--fill-color);\n      border-right-color: var(--fill-color);\n    }\n    40% {\n      border-color: transparent;\n      border-right-color: var(--fill-color);\n      border-top-color: var(--fill-color);\n    }\n    60% {\n      border-color: transparent;\n      border-right-color: var(--fill-color);\n    }\n    80% {\n      border-color: transparent;\n      border-right-color: var(--fill-color);\n      border-bottom-color: var(--fill-color);\n    }\n    90% {\n      border-color: transparent;\n      border-bottom-color: var(--fill-color);\n    }\n  }\n         </style>\n         <script>\n          async function quickchart(key) {\n      const quickchartButtonEl =\n        document.querySelector(\'#\' + key + \' button\');\n      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n      quickchartButtonEl.classList.add(\'colab-df-spinner\');\n      try {\n        const charts = await google.colab.kernel.invokeFunction(\n            \'suggestCharts\', [key], {});\n      } catch (error) {\n        console.error(\'Error during call to suggestCharts:\', error);\n      }\n      quickchartButtonEl.classList.remove(\'colab-df-spinner\');\n      quickchartButtonEl.classList.add(\'colab-df-quickchart-complete\');\n    }\n    (() => {\n      let quickchartButtonEl =\n        document.querySelector(\'#df-50f317fa-87c1-46a3-be88-3479ebb0f48d button\');\n      quickchartButtonEl.style.display =\n        google.colab.kernel.accessAllowed ? \'block\' : \'none\';\n    })();\n         </script>\n        </div>\n       </div>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <p>\n      In case you don\'t want to keep the entire train/test datasets, you can create a smaller version (with a random representation of the original dataset). Uncomment the code below if that is the case:\n     </p>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell jp-mod-noOutputs">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[\xa0]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-python">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="c1"># # Percentage of data you want to keep</span>\n<span class="c1"># k = 0.05  # for keeping 5% of the data</span>\n\n<span class="c1"># # Generate random indices representing a percentage of each dataset</span>\n<span class="c1"># train_df = train_df.sample(frac=k, random_state=42)</span>\n<span class="c1"># test_df = test_df.sample(frac=k, random_state=42)</span>\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <h2>\n      Split sequences into chunks\n      <a class="anchor-link" href="#Split-sequences-into-chunks">\n       \xb6\n      </a>\n     </h2>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <p>\n      Sequences aren’t always of the same length. We will split the longer protein sequences and their lables into non-overlapping chunks of certain length or less to account for a given context window of ESM-2 models. Most protein sequences are on average 350 or so residues, so having longer context windows is often unnecessary, but keep in mind this will effect training time and batch size. Here, we pick a context of 1000.\n     </p>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell jp-mod-noOutputs">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[\xa0]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-python">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="k">def</span> <span class="nf">split_into_chunks</span><span class="p">(</span><span class="n">sequences</span><span class="p">,</span> <span class="n">labels</span><span class="p">,</span> <span class="n">chunk_size</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">):</span>\n    <span class="sd">"""Split sequences and labels into chunks of size "chunk_size" or less."""</span>\n    <span class="n">new_sequences</span> <span class="o">=</span> <span class="p">[]</span>\n    <span class="n">new_labels</span> <span class="o">=</span> <span class="p">[]</span>\n    <span class="k">for</span> <span class="n">seq</span><span class="p">,</span> <span class="n">lbl</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">sequences</span><span class="p">,</span> <span class="n">labels</span><span class="p">):</span>\n        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">chunk_size</span><span class="p">:</span>\n            <span class="c1"># Split the sequence and labels into chunks of size "chunk_size" or less</span>\n            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">seq</span><span class="p">),</span> <span class="n">chunk_size</span><span class="p">):</span>\n                <span class="n">new_sequences</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">seq</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="n">chunk_size</span><span class="p">])</span>\n                <span class="n">new_labels</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">lbl</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="n">chunk_size</span><span class="p">])</span>\n        <span class="k">else</span><span class="p">:</span>\n            <span class="n">new_sequences</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span>\n            <span class="n">new_labels</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">lbl</span><span class="p">)</span>\n\n    <span class="k">return</span> <span class="n">new_sequences</span><span class="p">,</span> <span class="n">new_labels</span>\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell jp-mod-noOutputs">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[\xa0]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-python">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="c1"># Create lists of sequences and labels</span>\n<span class="n">test_seq</span> <span class="o">=</span> <span class="n">test_df</span><span class="p">[</span><span class="s1">\'Sequence\'</span><span class="p">]</span><span class="o">.</span><span class="n">tolist</span><span class="p">()</span>\n<span class="n">test_labels</span> <span class="o">=</span> <span class="n">test_df</span><span class="p">[</span><span class="s1">\'Binding-Active site\'</span><span class="p">]</span><span class="o">.</span><span class="n">tolist</span><span class="p">()</span>\n<span class="n">train_seq</span> <span class="o">=</span> <span class="n">train_df</span><span class="p">[</span><span class="s1">\'Sequence\'</span><span class="p">]</span><span class="o">.</span><span class="n">tolist</span><span class="p">()</span>\n<span class="n">train_labels</span> <span class="o">=</span> <span class="n">train_df</span><span class="p">[</span><span class="s1">\'Binding-Active site\'</span><span class="p">]</span><span class="o">.</span><span class="n">tolist</span><span class="p">()</span>\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell jp-mod-noOutputs">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[\xa0]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-python">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="c1"># Apply the function to create new datasets with chunks of size "chunk_size" or less</span>\n<span class="n">chunk_size</span> <span class="o">=</span> <span class="mi">1000</span>\n<span class="n">test_seq_chunked</span><span class="p">,</span> <span class="n">test_labels_chunked</span> <span class="o">=</span> <span class="n">split_into_chunks</span><span class="p">(</span><span class="n">test_seq</span><span class="p">,</span> <span class="n">test_labels</span><span class="p">)</span>\n<span class="n">train_seq_chunked</span><span class="p">,</span> <span class="n">train_labels_chunked</span> <span class="o">=</span> <span class="n">split_into_chunks</span><span class="p">(</span><span class="n">train_seq</span><span class="p">,</span> <span class="n">train_labels</span><span class="p">)</span>\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <p>\n      The resulting train and test files will be exported to the same path where the input data file was located:\n     </p>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[\xa0]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-python">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="n">filename</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">splitext</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">basename</span><span class="p">(</span><span class="n">file_path</span><span class="p">))[</span><span class="mi">0</span><span class="p">]</span>\n<span class="nb">dir</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="n">file_path</span><span class="p">)</span>\n\n<span class="c1"># Paths to save the new chunked pickle files</span>\n<span class="n">test_labels_path</span> <span class="o">=</span>  <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">dir</span><span class="p">,</span> <span class="n">filename</span> <span class="o">+</span> <span class="s2">"_test_labels_chunked_"</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">chunk_size</span><span class="p">)</span> <span class="o">+</span> <span class="s2">".pkl"</span><span class="p">)</span>\n<span class="n">test_seq_path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">dir</span><span class="p">,</span> <span class="n">filename</span> <span class="o">+</span> <span class="s2">"_test_sequences_chunked_"</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">chunk_size</span><span class="p">)</span> <span class="o">+</span> <span class="s2">".pkl"</span><span class="p">)</span>\n<span class="n">train_labels_path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">dir</span><span class="p">,</span> <span class="n">filename</span> <span class="o">+</span> <span class="s2">"_train_labels_chunked_"</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">chunk_size</span><span class="p">)</span> <span class="o">+</span> <span class="s2">".pkl"</span><span class="p">)</span>\n<span class="n">train_seq_path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">dir</span><span class="p">,</span> <span class="n">filename</span> <span class="o">+</span> <span class="s2">"_train_sequences_chunked_"</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">chunk_size</span><span class="p">)</span> <span class="o">+</span> <span class="s2">".pkl"</span><span class="p">)</span>\n\n<span class="c1"># Save the chunked datasets as new pickle files</span>\n<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">test_labels_path</span><span class="p">,</span> <span class="s1">\'wb\'</span><span class="p">)</span> <span class="k">as</span> <span class="n">file</span><span class="p">:</span>\n    <span class="n">pickle</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="n">test_labels_chunked</span><span class="p">,</span> <span class="n">file</span><span class="p">)</span>\n<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">test_seq_path</span><span class="p">,</span> <span class="s1">\'wb\'</span><span class="p">)</span> <span class="k">as</span> <span class="n">file</span><span class="p">:</span>\n    <span class="n">pickle</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="n">test_seq_chunked</span><span class="p">,</span> <span class="n">file</span><span class="p">)</span>\n<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">train_labels_path</span><span class="p">,</span> <span class="s1">\'wb\'</span><span class="p">)</span> <span class="k">as</span> <span class="n">file</span><span class="p">:</span>\n    <span class="n">pickle</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="n">train_labels_chunked</span><span class="p">,</span> <span class="n">file</span><span class="p">)</span>\n<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">train_seq_path</span><span class="p">,</span> <span class="s1">\'wb\'</span><span class="p">)</span> <span class="k">as</span> <span class="n">file</span><span class="p">:</span>\n    <span class="n">pickle</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="n">train_seq_chunked</span><span class="p">,</span> <span class="n">file</span><span class="p">)</span>\n\n<span class="n">test_labels_path</span><span class="p">,</span> <span class="n">test_seq_path</span><span class="p">,</span> <span class="n">train_labels_path</span><span class="p">,</span> <span class="n">train_seq_path</span>\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n  <div class="jp-Cell-outputWrapper">\n   <div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser">\n   </div>\n   <div class="jp-OutputArea jp-Cell-outputArea">\n    <div class="jp-OutputArea-child jp-OutputArea-executeResult">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n      Out[\xa0]:\n     </div>\n     <div class="jp-RenderedText jp-OutputArea-output jp-OutputArea-executeResult" data-mime-type="text/plain" tabindex="0">\n      <pre class="overflow-x-scroll font-mono">(\'/content/gdrive/MyDrive/ESMbind/data/uniprotkb_data_2024_05_29_test_labels_chunked_1000.pkl\',\n \'/content/gdrive/MyDrive/ESMbind/data/uniprotkb_data_2024_05_29_test_sequences_chunked_1000.pkl\',\n \'/content/gdrive/MyDrive/ESMbind/data/uniprotkb_data_2024_05_29_train_labels_chunked_1000.pkl\',\n \'/content/gdrive/MyDrive/ESMbind/data/uniprotkb_data_2024_05_29_train_sequences_chunked_1000.pkl\')</pre>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <h1>\n      Congratulations! Time to join the Community!\n      <a class="anchor-link" href="#Congratulations!-Time-to-join-the-Community!">\n       \xb6\n      </a>\n     </h1>\n     <p>\n      Congratulations on completing this tutorial notebook! If you enjoyed working through the tutorial, and want to continue working with DeepChem, we encourage you to finish the rest of the tutorials in this series. You can also help the DeepChem community in the following ways:\n     </p>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <h2>\n      Star DeepChem on\n      <a href="https://github.com/deepchem/deepchem">\n       GitHub\n      </a>\n      <a class="anchor-link" href="#Star-DeepChem-on-GitHub">\n       \xb6\n      </a>\n     </h2>\n     <p>\n      This helps build awareness of the DeepChem project and the tools for open source drug discovery that we\'re trying to build.\n     </p>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <h2>\n      Join the DeepChem Discord\n      <a class="anchor-link" href="#Join-the-DeepChem-Discord">\n       \xb6\n      </a>\n     </h2>\n     <p>\n      The DeepChem\n      <a href="https://discord.gg/cGzwCdrUqS">\n       Discord\n      </a>\n      hosts a number of scientists, developers, and enthusiasts interested in deep learning for the life sciences. Join the conversation!\n     </p>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <h1>\n      Citing this tutorial\n      <a class="anchor-link" href="#Citing-this-tutorial">\n       \xb6\n      </a>\n     </h1>\n     <p>\n      If you found this tutorial useful please consider citing it using the provided BibTeX.\n     </p>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <pre class="overflow-x-scroll font-mono"><code>@manual{Bioinformatics,\n title={UniProt data pre-processing for binding site prediction downstream task},\n organization={DeepChem},\n author={G\xf3mez de Lope, Elisa},\n howpublished = {\\url{https://github.com/deepchem/deepchem/blob/master/examples/tutorials/UniProt_Data_Preprocessing_for_Binding_Sites.ipynb}},\n year={2024},\n}\n</code></pre>\n    </div>\n   </div>\n  </div>\n </div>\n</main>\n'},o=a(7294),r=a(7466),i=a.n(r);let c=()=>((0,o.useEffect)(()=>{var n,s;null===(n=document.getElementsByClassName("scroll-nav")[0])||void 0===n||n.remove();let a=document.querySelector(".notebook"),p=document.querySelector(".notebook");p&&a&&i().init(a,{sections:"h1, h2",insertTarget:p,insertLocation:"after"}),null==MathJax||null===(s=MathJax.Hub)||void 0===s||s.Queue(["Typeset",MathJax.Hub])},[]),(0,p.jsx)("div",{className:"overflow-x-scroll",dangerouslySetInnerHTML:{__html:"".concat(l.html," ").concat(e.Z)}}));c.Layout=t.Z;var d=c}},function(n){n.O(0,[2443,9774,2888,179],function(){return n(n.s=3315)}),_N_E=n.O()}]);