(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[2223],{9533:function(n,e,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/tutorials/introduction-to-bioinformatics",function(){return t(24)}])},24:function(n,e,t){"use strict";t.r(e),t.d(e,{default:function(){return c}});var s=t(5893),a=t(1618),p=t(6485),l={html:'<main>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <h1>\n      Introduction to Bioinformatics\n      <a class="anchor-link" href="#Introduction-to-Bioinformatics">\n       \xb6\n      </a>\n     </h1>\n     <p>\n      So far in this tutorial, we\'ve primarily worked on the problems of cheminformatics. We\'ve been interested in seeing how we can use the techniques of machine learning to make predictions about the properties of molecules. In this tutorial, we\'re going to shift a bit and see how we can use classical computer science techniques and machine learning to tackle problems in bioinformatics.\n     </p>\n     <p>\n      For this, we\'re going to use the venerable\n      <a href="https://biopython.org/">\n       biopython\n      </a>\n      library to do some basic bioinformatics. A lot of the material in this notebook is adapted from the extensive official [Biopython tutorial]\n      <a href="http://biopython.org/DIST/docs/tutorial/Tutorial.html">\n       http://biopython.org/DIST/docs/tutorial/Tutorial.html\n      </a>\n      ). We strongly recommend checking out the official tutorial after you work through this notebook!\n     </p>\n     <h2>\n      Colab\n      <a class="anchor-link" href="#Colab">\n       \xb6\n      </a>\n     </h2>\n     <p>\n      This tutorial and the rest in this sequence are designed to be done in Google colab. If you\'d like to open this notebook in colab, you can use the following link.\n     </p>\n     <p>\n      <a href="https://colab.research.google.com/github/deepchem/deepchem/blob/master/examples/tutorials/Introduction_to_Bioinformatics.ipynb">\n       <img alt="Open In Colab" src="https://colab.research.google.com/assets/colab-badge.svg"/>\n      </a>\n     </p>\n     <h2>\n      Setup\n      <a class="anchor-link" href="#Setup">\n       \xb6\n      </a>\n     </h2>\n     <p>\n      To run DeepChem within Colab, you\'ll need to run the following cell of installation commands. This will take about 5 minutes to run to completion and install your environment.\n     </p>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[\xa0]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-ipython3">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="o">!</span>curl -Lo conda_installer.py https://raw.githubusercontent.com/deepchem/deepchem/master/scripts/colab_install.py\n<span class="kn">import</span> <span class="nn">conda_installer</span>\n<span class="n">conda_installer</span><span class="o">.</span><span class="n">install</span><span class="p">()</span>\n<span class="o">!</span>/root/miniconda/bin/conda info -e\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n  <div class="jp-Cell-outputWrapper">\n   <div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser">\n   </div>\n   <div class="jp-OutputArea jp-Cell-outputArea">\n    <div class="jp-OutputArea-child">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n     </div>\n     <div class="jp-RenderedText jp-OutputArea-output" data-mime-type="text/plain" tabindex="0">\n      <pre class="overflow-x-scroll font-mono">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100  3457  100  3457    0     0  11516      0 --:--:-- --:--:-- --:--:-- 11523\n</pre>\n     </div>\n    </div>\n    <div class="jp-OutputArea-child">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n     </div>\n     <div class="jp-RenderedText jp-OutputArea-output" data-mime-type="application/vnd.jupyter.stderr" tabindex="0">\n      <pre class="overflow-x-scroll font-mono">add /root/miniconda/lib/python3.10/site-packages to PYTHONPATH\nINFO:conda_installer:add /root/miniconda/lib/python3.10/site-packages to PYTHONPATH\npython version: 3.10.12\nINFO:conda_installer:python version: 3.10.12\nfetching installer from https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh\nINFO:conda_installer:fetching installer from https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh\ndone\nINFO:conda_installer:done\ninstalling miniconda to /root/miniconda\nINFO:conda_installer:installing miniconda to /root/miniconda\ndone\nINFO:conda_installer:done\ninstalling openmm, pdbfixer\nINFO:conda_installer:installing openmm, pdbfixer\nadded conda-forge to channels\nINFO:conda_installer:added conda-forge to channels\ndone\nINFO:conda_installer:done\nconda packages installation finished!\nINFO:conda_installer:conda packages installation finished!\n</pre>\n     </div>\n    </div>\n    <div class="jp-OutputArea-child">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n     </div>\n     <div class="jp-RenderedText jp-OutputArea-output" data-mime-type="text/plain" tabindex="0">\n      <pre class="overflow-x-scroll font-mono"># conda environments:\n#\nbase                     /root/miniconda\n\n</pre>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[2]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-ipython3">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="o">!</span>pip install --pre deepchem\n<span class="kn">import</span> <span class="nn">deepchem</span>\n<span class="n">deepchem</span><span class="o">.</span><span class="n">__version__</span>\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n  <div class="jp-Cell-outputWrapper">\n   <div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser">\n   </div>\n   <div class="jp-OutputArea jp-Cell-outputArea">\n    <div class="jp-OutputArea-child">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n     </div>\n     <div class="jp-RenderedText jp-OutputArea-output" data-mime-type="text/plain" tabindex="0">\n      <pre class="overflow-x-scroll font-mono">Collecting deepchem\n  Downloading deepchem-2.7.2.dev20230730200710-py3-none-any.whl (827 kB)\n     <span class="ansi-black-intense-fg">━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━</span> <span class="ansi-green-fg">827.4/827.4 kB</span> <span class="ansi-red-fg">7.3 MB/s</span> eta <span class="ansi-cyan-fg">0:00:00</span>\nRequirement already satisfied: joblib in /usr/local/lib/python3.10/dist-packages (from deepchem) (1.3.1)\nRequirement already satisfied: numpy&gt;=1.21 in /usr/local/lib/python3.10/dist-packages (from deepchem) (1.22.4)\nRequirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (from deepchem) (1.5.3)\nRequirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (from deepchem) (1.2.2)\nRequirement already satisfied: scipy&gt;=1.10.1 in /usr/local/lib/python3.10/dist-packages (from deepchem) (1.10.1)\nCollecting rdkit (from deepchem)\n  Downloading rdkit-2023.3.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (29.7 MB)\n     <span class="ansi-black-intense-fg">━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━</span> <span class="ansi-green-fg">29.7/29.7 MB</span> <span class="ansi-red-fg">46.3 MB/s</span> eta <span class="ansi-cyan-fg">0:00:00</span>\nRequirement already satisfied: python-dateutil&gt;=2.8.1 in /usr/local/lib/python3.10/dist-packages (from pandas-&gt;deepchem) (2.8.2)\nRequirement already satisfied: pytz&gt;=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas-&gt;deepchem) (2022.7.1)\nRequirement already satisfied: Pillow in /usr/local/lib/python3.10/dist-packages (from rdkit-&gt;deepchem) (9.4.0)\nRequirement already satisfied: threadpoolctl&gt;=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn-&gt;deepchem) (3.2.0)\nRequirement already satisfied: six&gt;=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil&gt;=2.8.1-&gt;pandas-&gt;deepchem) (1.16.0)\nInstalling collected packages: rdkit, deepchem\nSuccessfully installed deepchem-2.7.2.dev20230730200710 rdkit-2023.3.2\n</pre>\n     </div>\n    </div>\n    <div class="jp-OutputArea-child">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n     </div>\n     <div class="jp-RenderedText jp-OutputArea-output" data-mime-type="application/vnd.jupyter.stderr" tabindex="0">\n      <pre class="overflow-x-scroll font-mono">WARNING:deepchem.feat.molecule_featurizers.rdkit_descriptors:No normalization for AvgIpc. Feature removed!\nWARNING:deepchem.models.torch_models:Skipped loading modules with pytorch-geometric dependency, missing a dependency. No module named \'torch_geometric\'\nWARNING:deepchem.models.torch_models:Skipped loading modules with transformers dependency. No module named \'transformers\'\nWARNING:deepchem.models:cannot import name \'HuggingFaceModel\' from \'deepchem.models.torch_models\' (/usr/local/lib/python3.10/dist-packages/deepchem/models/torch_models/__init__.py)\nWARNING:deepchem.models:Skipped loading modules with pytorch-geometric dependency, missing a dependency. cannot import name \'DMPNN\' from \'deepchem.models.torch_models\' (/usr/local/lib/python3.10/dist-packages/deepchem/models/torch_models/__init__.py)\nWARNING:deepchem.models:Skipped loading modules with pytorch-lightning dependency, missing a dependency. No module named \'pytorch_lightning\'\nWARNING:deepchem.models:Skipped loading some Jax models, missing a dependency. No module named \'haiku\'\n</pre>\n     </div>\n    </div>\n    <div class="jp-OutputArea-child jp-OutputArea-executeResult">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n      Out[2]:\n     </div>\n     <div class="jp-RenderedText jp-OutputArea-output jp-OutputArea-executeResult" data-mime-type="text/plain" tabindex="0">\n      <pre class="overflow-x-scroll font-mono">\'2.7.2.dev\'</pre>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <p>\n      We\'ll use\n      <code>\n       pip\n      </code>\n      to install\n      <code>\n       biopython\n      </code>\n     </p>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[3]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-ipython3">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="o">!</span>pip install biopython\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n  <div class="jp-Cell-outputWrapper">\n   <div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser">\n   </div>\n   <div class="jp-OutputArea jp-Cell-outputArea">\n    <div class="jp-OutputArea-child">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n     </div>\n     <div class="jp-RenderedText jp-OutputArea-output" data-mime-type="text/plain" tabindex="0">\n      <pre class="overflow-x-scroll font-mono">Collecting biopython\n  Downloading biopython-1.81-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.1 MB)\n     <span class="ansi-black-intense-fg">━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━</span> <span class="ansi-green-fg">3.1/3.1 MB</span> <span class="ansi-red-fg">12.1 MB/s</span> eta <span class="ansi-cyan-fg">0:00:00</span>\nRequirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from biopython) (1.22.4)\nInstalling collected packages: biopython\nSuccessfully installed biopython-1.81\n</pre>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[4]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-ipython3">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="kn">import</span> <span class="nn">Bio</span>\n<span class="n">Bio</span><span class="o">.</span><span class="n">__version__</span>\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n  <div class="jp-Cell-outputWrapper">\n   <div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser">\n   </div>\n   <div class="jp-OutputArea jp-Cell-outputArea">\n    <div class="jp-OutputArea-child jp-OutputArea-executeResult">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n      Out[4]:\n     </div>\n     <div class="jp-RenderedText jp-OutputArea-output jp-OutputArea-executeResult" data-mime-type="text/plain" tabindex="0">\n      <pre class="overflow-x-scroll font-mono">\'1.81\'</pre>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[5]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-ipython3">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="kn">from</span> <span class="nn">Bio.Seq</span> <span class="kn">import</span> <span class="n">Seq</span>\n<span class="n">my_seq</span> <span class="o">=</span> <span class="n">Seq</span><span class="p">(</span><span class="s2">"AGTACACATTG"</span><span class="p">)</span>\n<span class="n">my_seq</span>\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n  <div class="jp-Cell-outputWrapper">\n   <div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser">\n   </div>\n   <div class="jp-OutputArea jp-Cell-outputArea">\n    <div class="jp-OutputArea-child jp-OutputArea-executeResult">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n      Out[5]:\n     </div>\n     <div class="jp-RenderedText jp-OutputArea-output jp-OutputArea-executeResult" data-mime-type="text/plain" tabindex="0">\n      <pre class="overflow-x-scroll font-mono">Seq(\'AGTACACATTG\')</pre>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <p>\n      The complement() method in Biopython\'s Seq object returns the complement of a DNA sequence. It replaces each base with its complement according to the Watson-Crick base pairing rules. Adenine (A) is complemented by thymine (T), and guanine (G) is complemented by cytosine (C).\n     </p>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[6]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-ipython3">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="n">my_seq</span><span class="o">.</span><span class="n">complement</span><span class="p">()</span>\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n  <div class="jp-Cell-outputWrapper">\n   <div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser">\n   </div>\n   <div class="jp-OutputArea jp-Cell-outputArea">\n    <div class="jp-OutputArea-child jp-OutputArea-executeResult">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n      Out[6]:\n     </div>\n     <div class="jp-RenderedText jp-OutputArea-output jp-OutputArea-executeResult" data-mime-type="text/plain" tabindex="0">\n      <pre class="overflow-x-scroll font-mono">Seq(\'TCATGTGTAAC\')</pre>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <p>\n      The reverse_complement() method in Biopython\'s Seq object returns the reverse complement of a DNA sequence. It first reverses the sequence and then replaces each base with its complement according to the Watson-Crick base pairing rules.\n     </p>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[7]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-ipython3">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="n">my_seq</span><span class="o">.</span><span class="n">reverse_complement</span><span class="p">()</span>\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n  <div class="jp-Cell-outputWrapper">\n   <div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser">\n   </div>\n   <div class="jp-OutputArea jp-Cell-outputArea">\n    <div class="jp-OutputArea-child jp-OutputArea-executeResult">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n      Out[7]:\n     </div>\n     <div class="jp-RenderedText jp-OutputArea-output jp-OutputArea-executeResult" data-mime-type="text/plain" tabindex="0">\n      <pre class="overflow-x-scroll font-mono">Seq(\'CAATGTGTACT\')</pre>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <h2>\n      Parsing Sequence Records\n      <a class="anchor-link" href="#Parsing-Sequence-Records">\n       \xb6\n      </a>\n     </h2>\n     <p>\n      We\'re going to download a sample\n      <code>\n       fasta\n      </code>\n      file from the Biopython tutorial to use in some exercises. This file is a set of hits for a sequence (of lady slipper orcid genes).\n     </p>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[8]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-ipython3">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="o">!</span>wget https://raw.githubusercontent.com/biopython/biopython/master/Doc/examples/ls_orchid.fasta\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n  <div class="jp-Cell-outputWrapper">\n   <div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser">\n   </div>\n   <div class="jp-OutputArea jp-Cell-outputArea">\n    <div class="jp-OutputArea-child">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n     </div>\n     <div class="jp-RenderedText jp-OutputArea-output" data-mime-type="text/plain" tabindex="0">\n      <pre class="overflow-x-scroll font-mono">--2023-08-02 14:46:07--  https://raw.githubusercontent.com/biopython/biopython/master/Doc/examples/ls_orchid.fasta\nResolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.110.133, 185.199.111.133, 185.199.108.133, ...\nConnecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.110.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 76480 (75K) [text/plain]\nSaving to: ‘ls_orchid.fasta’\n\n\nls_orchid.fasta       0%[                    ]       0  --.-KB/s               \nls_orchid.fasta     100%[===================&gt;]  74.69K  --.-KB/s    in 0.01s   \n\n2023-08-02 14:46:07 (5.24 MB/s) - ‘ls_orchid.fasta’ saved [76480/76480]\n\n</pre>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <p>\n      Let\'s take a look at what the contents of this file look like:\n     </p>\n     <ol>\n      <li>\n       List item\n      </li>\n      <li>\n       List item\n      </li>\n     </ol>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[9]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-ipython3">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="kn">from</span> <span class="nn">Bio</span> <span class="kn">import</span> <span class="n">SeqIO</span>\n<span class="k">for</span> <span class="n">seq_record</span> <span class="ow">in</span> <span class="n">SeqIO</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="s1">\'ls_orchid.fasta\'</span><span class="p">,</span> <span class="s1">\'fasta\'</span><span class="p">):</span>\n    <span class="nb">print</span><span class="p">(</span><span class="n">seq_record</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>\n    <span class="nb">print</span><span class="p">(</span><span class="nb">repr</span><span class="p">(</span><span class="n">seq_record</span><span class="o">.</span><span class="n">seq</span><span class="p">))</span>\n    <span class="nb">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">seq_record</span><span class="p">))</span>\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n  <div class="jp-Cell-outputWrapper">\n   <div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser">\n   </div>\n   <div class="jp-OutputArea jp-Cell-outputArea">\n    <div class="jp-OutputArea-child">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n     </div>\n     <div class="jp-RenderedText jp-OutputArea-output" data-mime-type="text/plain" tabindex="0">\n      <pre class="overflow-x-scroll font-mono">gi|2765658|emb|Z78533.1|CIZ78533\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGATGAGACCGTGG...CGC\')\n740\ngi|2765657|emb|Z78532.1|CCZ78532\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGACAACAG...GGC\')\n753\ngi|2765656|emb|Z78531.1|CFZ78531\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGACAGCAG...TAA\')\n748\ngi|2765655|emb|Z78530.1|CMZ78530\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAAACAACAT...CAT\')\n744\ngi|2765654|emb|Z78529.1|CLZ78529\nSeq(\'ACGGCGAGCTGCCGAAGGACATTGTTGAGACAGCAGAATATACGATTGAGTGAA...AAA\')\n733\ngi|2765652|emb|Z78527.1|CYZ78527\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGACAGTAG...CCC\')\n718\ngi|2765651|emb|Z78526.1|CGZ78526\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGACAGTAG...TGT\')\n730\ngi|2765650|emb|Z78525.1|CAZ78525\nSeq(\'TGTTGAGATAGCAGAATATACATCGAGTGAATCCGGAGGACCTGTGGTTATTCG...GCA\')\n704\ngi|2765649|emb|Z78524.1|CFZ78524\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGATAGTAG...AGC\')\n740\ngi|2765648|emb|Z78523.1|CHZ78523\nSeq(\'CGTAACCAGGTTTCCGTAGGTGAACCTGCGGCAGGATCATTGTTGAGACAGCAG...AAG\')\n709\ngi|2765647|emb|Z78522.1|CMZ78522\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGACAGCAG...GAG\')\n700\ngi|2765646|emb|Z78521.1|CCZ78521\nSeq(\'GTAGGTGAACCTGCGGAAGGATCATTGTTGAGACAGTAGAATATATGATCGAGT...ACC\')\n726\ngi|2765645|emb|Z78520.1|CSZ78520\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGACAGCAG...TTT\')\n753\ngi|2765644|emb|Z78519.1|CPZ78519\nSeq(\'ATATGATCGAGTGAATCTGGTGGACTTGTGGTTACTCAGCTCGCCATAGGCTTT...TTA\')\n699\ngi|2765643|emb|Z78518.1|CRZ78518\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTGCGGGAGGATCATTGTTGAGATAGTAG...TCC\')\n658\ngi|2765642|emb|Z78517.1|CFZ78517\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGACAGTAG...AGC\')\n752\ngi|2765641|emb|Z78516.1|CPZ78516\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGACAGTAT...TAA\')\n726\ngi|2765640|emb|Z78515.1|MXZ78515\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGCTGAGACCGTAG...AGC\')\n765\ngi|2765639|emb|Z78514.1|PSZ78514\nSeq(\'CGTAACAAGGTTTCCGTAGGTGGACCTTCGGGAGGATCATTTTTGAAGCCCCCA...CTA\')\n755\ngi|2765638|emb|Z78513.1|PBZ78513\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGACCGCCA...GAG\')\n742\ngi|2765637|emb|Z78512.1|PWZ78512\nSeq(\'CGTAACAAGGTTTCCGTAGGTGGACCTTCGGGAGGATCATTTTTGAAGCCCCCA...AGC\')\n762\ngi|2765636|emb|Z78511.1|PEZ78511\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTTCGGAAGGATCATTGTTGAGACCCCCA...GGA\')\n745\ngi|2765635|emb|Z78510.1|PCZ78510\nSeq(\'CTAACCAGGGTTCCGAGGTGACCTTCGGGAGGATTCCTTTTTAAGCCCCCGAAA...TTA\')\n750\ngi|2765634|emb|Z78509.1|PPZ78509\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGACCGCCA...GGA\')\n731\ngi|2765633|emb|Z78508.1|PLZ78508\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGACCGCCA...TGA\')\n741\ngi|2765632|emb|Z78507.1|PLZ78507\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGACCCCCA...TGA\')\n740\ngi|2765631|emb|Z78506.1|PLZ78506\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGACCGCAA...TGA\')\n727\ngi|2765630|emb|Z78505.1|PSZ78505\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGACCGCCA...TTT\')\n711\ngi|2765629|emb|Z78504.1|PKZ78504\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTTCGGAAGGATCATTGTTGAGACCGCAA...TAA\')\n743\ngi|2765628|emb|Z78503.1|PCZ78503\nSeq(\'CGTAACCAGGTTTCCGTAGGTGAACCTCCGGAAGGATCCTTGTTGAGACCGCCA...TAA\')\n727\ngi|2765627|emb|Z78502.1|PBZ78502\nSeq(\'CGTAACCAGGTTTCCGTAGGTGAACCTCCGGAAGGATCATTGTTGAGACCGCCA...CGC\')\n757\ngi|2765626|emb|Z78501.1|PCZ78501\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGACCGCAA...AGA\')\n770\ngi|2765625|emb|Z78500.1|PWZ78500\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGCTCATTGTTGAGACCGCAA...AAG\')\n767\ngi|2765624|emb|Z78499.1|PMZ78499\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAGGGATCATTGTTGAGATCGCAT...ACC\')\n759\ngi|2765623|emb|Z78498.1|PMZ78498\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAAGGTCATTGTTGAGATCACAT...AGC\')\n750\ngi|2765622|emb|Z78497.1|PDZ78497\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGATCACAT...AGC\')\n788\ngi|2765621|emb|Z78496.1|PAZ78496\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGATCGCAT...AGC\')\n774\ngi|2765620|emb|Z78495.1|PEZ78495\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTCCGGAAGGATCATTGTTGAGATCACAT...GTG\')\n789\ngi|2765619|emb|Z78494.1|PNZ78494\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGGTCGCAT...AAG\')\n688\ngi|2765618|emb|Z78493.1|PGZ78493\nSeq(\'CGTAACAAGGATTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGATCGCAT...CCC\')\n719\ngi|2765617|emb|Z78492.1|PBZ78492\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGATCGCAT...ATA\')\n743\ngi|2765616|emb|Z78491.1|PCZ78491\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGATCGCAT...AGC\')\n737\ngi|2765615|emb|Z78490.1|PFZ78490\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGATCACAT...TGA\')\n728\ngi|2765614|emb|Z78489.1|PDZ78489\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGATCACAT...GGC\')\n740\ngi|2765613|emb|Z78488.1|PTZ78488\nSeq(\'CTGTAGGTGAACCTGCGGAAGGATCATTGTTGAGATCACGCAATAATTGATCGA...GCT\')\n696\ngi|2765612|emb|Z78487.1|PHZ78487\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGATCACAT...TAA\')\n732\ngi|2765611|emb|Z78486.1|PBZ78486\nSeq(\'CGTCACGAGGTTTCCGTAGGTGAATCTGCGGGAGGATCATTGTTGAGATCACAT...TGA\')\n731\ngi|2765610|emb|Z78485.1|PHZ78485\nSeq(\'CTGAACCTGGTGTCCGAAGGTGAATCTGCGGATGGATCATTGTTGAGATATCAT...GTA\')\n735\ngi|2765609|emb|Z78484.1|PCZ78484\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTGGGGAAGGATCATTGTTGAGATCACAT...TTT\')\n720\ngi|2765608|emb|Z78483.1|PVZ78483\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGATCACAT...GCA\')\n740\ngi|2765607|emb|Z78482.1|PEZ78482\nSeq(\'TCTACTGCAGTGACCGAGATTTGCCATCGAGCCTCCTGGGAGCTTTCTTGCTGG...GCA\')\n629\ngi|2765606|emb|Z78481.1|PIZ78481\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGATCACAT...TGA\')\n572\ngi|2765605|emb|Z78480.1|PGZ78480\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGATCACAT...TGA\')\n587\ngi|2765604|emb|Z78479.1|PPZ78479\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGATCACAT...AGT\')\n700\ngi|2765603|emb|Z78478.1|PVZ78478\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTCCGGAAGGATCAGTGTTGAGATCACAT...GGC\')\n636\ngi|2765602|emb|Z78477.1|PVZ78477\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGATCACAT...TGC\')\n716\ngi|2765601|emb|Z78476.1|PGZ78476\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGATCACAT...CCC\')\n592\ngi|2765600|emb|Z78475.1|PSZ78475\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGATCACAT...GGT\')\n716\ngi|2765599|emb|Z78474.1|PKZ78474\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGATCACGT...CTT\')\n733\ngi|2765598|emb|Z78473.1|PSZ78473\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGATCACAT...AGG\')\n626\ngi|2765597|emb|Z78472.1|PLZ78472\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGATCACAT...AGC\')\n737\ngi|2765596|emb|Z78471.1|PDZ78471\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGATCACAT...AGC\')\n740\ngi|2765595|emb|Z78470.1|PPZ78470\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGATCACAT...GTT\')\n574\ngi|2765594|emb|Z78469.1|PHZ78469\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGATCACAT...GTT\')\n594\ngi|2765593|emb|Z78468.1|PAZ78468\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGATCGCAT...GTT\')\n610\ngi|2765592|emb|Z78467.1|PSZ78467\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGATCACAT...TGA\')\n730\ngi|2765591|emb|Z78466.1|PPZ78466\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGATCACAT...CCC\')\n641\ngi|2765590|emb|Z78465.1|PRZ78465\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGATCACAT...TGC\')\n702\ngi|2765589|emb|Z78464.1|PGZ78464\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAGCGGAAGGGTCATTGTTGAGATCACATAATA...AGC\')\n733\ngi|2765588|emb|Z78463.1|PGZ78463\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGTTCATTGTTGAGATCACAT...AGC\')\n738\ngi|2765587|emb|Z78462.1|PSZ78462\nSeq(\'CGTCACGAGGTCTCCGGATGTGACCCTGCGGAAGGATCATTGTTGAGATCACAT...CAT\')\n736\ngi|2765586|emb|Z78461.1|PWZ78461\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTCCGGAAGGATCATTGTTGAGATCACAT...TAA\')\n732\ngi|2765585|emb|Z78460.1|PCZ78460\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTCCGGAAGGATCATTGTTGAGATCACAT...TTA\')\n745\ngi|2765584|emb|Z78459.1|PDZ78459\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGATCACAT...TTT\')\n744\ngi|2765583|emb|Z78458.1|PHZ78458\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGATCACAT...TTG\')\n738\ngi|2765582|emb|Z78457.1|PCZ78457\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTCCGGAAGGATCATTGTTGAGATCACAT...GAG\')\n739\ngi|2765581|emb|Z78456.1|PTZ78456\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGATCACAT...AGC\')\n740\ngi|2765580|emb|Z78455.1|PJZ78455\nSeq(\'CGTAACCAGGTTTCCGTAGGTGGACCTTCGGGAGGATCATTTTTGAGATCACAT...GCA\')\n745\ngi|2765579|emb|Z78454.1|PFZ78454\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGATCACAT...AAC\')\n695\ngi|2765578|emb|Z78453.1|PSZ78453\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGATCACAT...GCA\')\n745\ngi|2765577|emb|Z78452.1|PBZ78452\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGATCACAT...GCA\')\n743\ngi|2765576|emb|Z78451.1|PHZ78451\nSeq(\'CGTAACAAGGTTTCCGTAGGTGTACCTCCGGAAGGATCATTGTTGAGATCACAT...AGC\')\n730\ngi|2765575|emb|Z78450.1|PPZ78450\nSeq(\'GGAAGGATCATTGCTGATATCACATAATAATTGATCGAGTTAAGCTGGAGGATC...GAG\')\n706\ngi|2765574|emb|Z78449.1|PMZ78449\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGATCACAT...TGC\')\n744\ngi|2765573|emb|Z78448.1|PAZ78448\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGATCACAT...AGG\')\n742\ngi|2765572|emb|Z78447.1|PVZ78447\nSeq(\'CGTAACAAGGATTCCGTAGGTGAACCTGCGGGAGGATCATTGTTGAGATCACAT...AGC\')\n694\ngi|2765571|emb|Z78446.1|PAZ78446\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTCCGGAAGGATCATTGTTGAGATCACAT...CCC\')\n712\ngi|2765570|emb|Z78445.1|PUZ78445\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGATCACAT...TGT\')\n715\ngi|2765569|emb|Z78444.1|PAZ78444\nSeq(\'CGTAACAAGGTTTCCGTAGGGTGAACTGCGGAAGGATCATTGTTGAGATCACAT...ATT\')\n688\ngi|2765568|emb|Z78443.1|PLZ78443\nSeq(\'CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGATCACAT...AGG\')\n784\ngi|2765567|emb|Z78442.1|PBZ78442\nSeq(\'GTAGGTGAACCTGCGGAAGGATCATTGTTGAGATCACATAATAATTGATCGAGT...AGT\')\n721\ngi|2765566|emb|Z78441.1|PSZ78441\nSeq(\'GGAAGGTCATTGCCGATATCACATAATAATTGATCGAGTTAATCTGGAGGATCT...GAG\')\n703\ngi|2765565|emb|Z78440.1|PPZ78440\nSeq(\'CGTAACAAGGTTTCCGTAGGTGGACCTCCGGGAGGATCATTGTTGAGATCACAT...GCA\')\n744\ngi|2765564|emb|Z78439.1|PBZ78439\nSeq(\'CATTGTTGAGATCACATAATAATTGATCGAGTTAATCTGGAGGATCTGTTTACT...GCC\')\n592\n</pre>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <h2>\n      Sequence Objects\n      <a class="anchor-link" href="#Sequence-Objects">\n       \xb6\n      </a>\n     </h2>\n     <p>\n      A large part of the biopython infrastructure deals with tools for handlings sequences. These could be DNA sequences, RNA sequences, amino acid sequences or even more exotic constructs. To tell biopython what type of sequence it\'s dealing with, you can specify the alphabet explicitly.\n     </p>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[10]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-ipython3">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="kn">from</span> <span class="nn">Bio.Seq</span> <span class="kn">import</span> <span class="n">Seq</span>\n<span class="n">my_seq</span> <span class="o">=</span> <span class="n">Seq</span><span class="p">(</span><span class="s2">"ACAGTAGAC"</span><span class="p">)</span>\n<span class="nb">print</span><span class="p">(</span><span class="n">my_seq</span><span class="p">)</span>\n<span class="n">my_seq</span>\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n  <div class="jp-Cell-outputWrapper">\n   <div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser">\n   </div>\n   <div class="jp-OutputArea jp-Cell-outputArea">\n    <div class="jp-OutputArea-child">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n     </div>\n     <div class="jp-RenderedText jp-OutputArea-output" data-mime-type="text/plain" tabindex="0">\n      <pre class="overflow-x-scroll font-mono">ACAGTAGAC\n</pre>\n     </div>\n    </div>\n    <div class="jp-OutputArea-child jp-OutputArea-executeResult">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n      Out[10]:\n     </div>\n     <div class="jp-RenderedText jp-OutputArea-output jp-OutputArea-executeResult" data-mime-type="text/plain" tabindex="0">\n      <pre class="overflow-x-scroll font-mono">Seq(\'ACAGTAGAC\')</pre>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <p>\n      If we want to code a protein sequence, we can do that just as easily.\n     </p>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[11]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-ipython3">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="n">my_prot</span> <span class="o">=</span> <span class="n">Seq</span><span class="p">(</span><span class="s2">"AAAAA"</span><span class="p">)</span>\n<span class="n">my_prot</span>\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n  <div class="jp-Cell-outputWrapper">\n   <div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser">\n   </div>\n   <div class="jp-OutputArea jp-Cell-outputArea">\n    <div class="jp-OutputArea-child jp-OutputArea-executeResult">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n      Out[11]:\n     </div>\n     <div class="jp-RenderedText jp-OutputArea-output jp-OutputArea-executeResult" data-mime-type="text/plain" tabindex="0">\n      <pre class="overflow-x-scroll font-mono">Seq(\'AAAAA\')</pre>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <p>\n      We can take the length of sequences and index into them like strings.\n     </p>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[12]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-ipython3">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="nb">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">my_prot</span><span class="p">))</span>\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n  <div class="jp-Cell-outputWrapper">\n   <div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser">\n   </div>\n   <div class="jp-OutputArea jp-Cell-outputArea">\n    <div class="jp-OutputArea-child">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n     </div>\n     <div class="jp-RenderedText jp-OutputArea-output" data-mime-type="text/plain" tabindex="0">\n      <pre class="overflow-x-scroll font-mono">5\n</pre>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[13]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-ipython3">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="n">my_prot</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n  <div class="jp-Cell-outputWrapper">\n   <div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser">\n   </div>\n   <div class="jp-OutputArea jp-Cell-outputArea">\n    <div class="jp-OutputArea-child jp-OutputArea-executeResult">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n      Out[13]:\n     </div>\n     <div class="jp-RenderedText jp-OutputArea-output jp-OutputArea-executeResult" data-mime-type="text/plain" tabindex="0">\n      <pre class="overflow-x-scroll font-mono">\'A\'</pre>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <p>\n      You can also use slice notation on sequences to get subsequences.\n     </p>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[14]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-ipython3">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="n">my_prot</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">3</span><span class="p">]</span>\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n  <div class="jp-Cell-outputWrapper">\n   <div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser">\n   </div>\n   <div class="jp-OutputArea jp-Cell-outputArea">\n    <div class="jp-OutputArea-child jp-OutputArea-executeResult">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n      Out[14]:\n     </div>\n     <div class="jp-RenderedText jp-OutputArea-output jp-OutputArea-executeResult" data-mime-type="text/plain" tabindex="0">\n      <pre class="overflow-x-scroll font-mono">Seq(\'AAA\')</pre>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n You can concatenate sequences if they have the same type so this works.\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[15]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-ipython3">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="n">my_prot</span> <span class="o">+</span> <span class="n">my_prot</span>\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n  <div class="jp-Cell-outputWrapper">\n   <div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser">\n   </div>\n   <div class="jp-OutputArea jp-Cell-outputArea">\n    <div class="jp-OutputArea-child jp-OutputArea-executeResult">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n      Out[15]:\n     </div>\n     <div class="jp-RenderedText jp-OutputArea-output jp-OutputArea-executeResult" data-mime-type="text/plain" tabindex="0">\n      <pre class="overflow-x-scroll font-mono">Seq(\'AAAAAAAAAA\')</pre>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <p>\n      Biopython automatically handles the concatenation as both sequences are of the generic alphabet.\n     </p>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[16]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-ipython3">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="n">my_prot</span> <span class="o">+</span> <span class="n">my_seq</span>\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n  <div class="jp-Cell-outputWrapper">\n   <div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser">\n   </div>\n   <div class="jp-OutputArea jp-Cell-outputArea">\n    <div class="jp-OutputArea-child jp-OutputArea-executeResult">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n      Out[16]:\n     </div>\n     <div class="jp-RenderedText jp-OutputArea-output jp-OutputArea-executeResult" data-mime-type="text/plain" tabindex="0">\n      <pre class="overflow-x-scroll font-mono">Seq(\'AAAAAACAGTAGAC\')</pre>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <h2>\n      Transcription\n      <a class="anchor-link" href="#Transcription">\n       \xb6\n      </a>\n     </h2>\n     <p>\n      Transcription is the process by which a DNA sequence is converted into messenger RNA. Remember that this is part of the "central dogma" of biology in which DNA engenders messenger RNA which engenders proteins. Here\'s a nice representation of this cycle borrowed from a Khan academy\n      <a href="https://cdn.kastatic.org/ka-perseus-images/20ce29384b2e7ff0cdea72acaa5b1dbd7287ab00.png">\n       lesson\n      </a>\n      .\n     </p>\n     <img alt="No description has been provided for this image" src="https://cdn.kastatic.org/ka-perseus-images/20ce29384b2e7ff0cdea72acaa5b1dbd7287ab00.png"/>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <p>\n      Note from the image above that DNA has two strands. The top strand is typically called the coding strand, and the bottom the template strand. The template strand is used for the actual transcription process of conversion into messenger RNA, but in bioinformatics, it\'s more common to work with the coding strand. Let\'s now see how we can execute a transcription computationally using Biopython.\n     </p>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[17]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-ipython3">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="kn">from</span> <span class="nn">Bio.Seq</span> <span class="kn">import</span> <span class="n">Seq</span>\n<span class="n">coding_dna</span> <span class="o">=</span> <span class="n">Seq</span><span class="p">(</span><span class="s2">"ATGATCTCGTAA"</span><span class="p">)</span>\n<span class="nb">print</span><span class="p">(</span><span class="n">coding_dna</span><span class="p">)</span>\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n  <div class="jp-Cell-outputWrapper">\n   <div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser">\n   </div>\n   <div class="jp-OutputArea jp-Cell-outputArea">\n    <div class="jp-OutputArea-child">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n     </div>\n     <div class="jp-RenderedText jp-OutputArea-output" data-mime-type="text/plain" tabindex="0">\n      <pre class="overflow-x-scroll font-mono">ATGATCTCGTAA\n</pre>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[18]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-ipython3">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="n">template_dna</span> <span class="o">=</span> <span class="n">coding_dna</span><span class="o">.</span><span class="n">reverse_complement</span><span class="p">()</span>\n<span class="n">template_dna</span>\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n  <div class="jp-Cell-outputWrapper">\n   <div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser">\n   </div>\n   <div class="jp-OutputArea jp-Cell-outputArea">\n    <div class="jp-OutputArea-child jp-OutputArea-executeResult">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n      Out[18]:\n     </div>\n     <div class="jp-RenderedText jp-OutputArea-output jp-OutputArea-executeResult" data-mime-type="text/plain" tabindex="0">\n      <pre class="overflow-x-scroll font-mono">Seq(\'TTACGAGATCAT\')</pre>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <p>\n      Note that these sequences match those in the image below. You might be confused about why the\n      <code>\n       template_dna\n      </code>\n      sequence is shown reversed. The reason is that by convention, the template strand is read in the reverse direction.\n     </p>\n     <p>\n      Let\'s now see how we can transcribe our\n      <code>\n       coding_dna\n      </code>\n      strand into messenger RNA. This will only swap \'T\' for \'U\' and change the alphabet for our object.\n     </p>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[19]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-ipython3">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="n">messenger_rna</span> <span class="o">=</span> <span class="n">coding_dna</span><span class="o">.</span><span class="n">transcribe</span><span class="p">()</span>\n<span class="n">messenger_rna</span>\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n  <div class="jp-Cell-outputWrapper">\n   <div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser">\n   </div>\n   <div class="jp-OutputArea jp-Cell-outputArea">\n    <div class="jp-OutputArea-child jp-OutputArea-executeResult">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n      Out[19]:\n     </div>\n     <div class="jp-RenderedText jp-OutputArea-output jp-OutputArea-executeResult" data-mime-type="text/plain" tabindex="0">\n      <pre class="overflow-x-scroll font-mono">Seq(\'AUGAUCUCGUAA\')</pre>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <p>\n      We can also perform a "back-transcription" to recover the original coding strand from the messenger RNA.\n     </p>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[20]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-ipython3">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="n">messenger_rna</span><span class="o">.</span><span class="n">back_transcribe</span><span class="p">()</span>\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n  <div class="jp-Cell-outputWrapper">\n   <div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser">\n   </div>\n   <div class="jp-OutputArea jp-Cell-outputArea">\n    <div class="jp-OutputArea-child jp-OutputArea-executeResult">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n      Out[20]:\n     </div>\n     <div class="jp-RenderedText jp-OutputArea-output jp-OutputArea-executeResult" data-mime-type="text/plain" tabindex="0">\n      <pre class="overflow-x-scroll font-mono">Seq(\'ATGATCTCGTAA\')</pre>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <h2>\n      Translation\n      <a class="anchor-link" href="#Translation">\n       \xb6\n      </a>\n     </h2>\n     <p>\n      Translation is the next step in the process, whereby a messenger RNA is transformed into a protein sequence. Here\'s a beautiful diagram\n      <a href="https://en.wikipedia.org/wiki/Translation_(biology">\n       from Wikipedia\n      </a>\n      #/media/File:Ribosome_mRNA_translation_en.svg) that lays out the basics of this process.\n     </p>\n     <img alt="No description has been provided for this image" src="https://upload.wikimedia.org/wikipedia/commons/thumb/b/b1/Ribosome_mRNA_translation_en.svg/1000px-Ribosome_mRNA_translation_en.svg.png"/>\n     <p>\n      Note how 3 nucleotides at a time correspond to one new amino acid added to the growing protein chain. A set of 3 nucleotides which codes for a given amino acid is called a "codon." We can use the\n      <code>\n       translate()\n      </code>\n      method on the messenger rna to perform this transformation in code.\n     </p>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <p>\n      messenger_rna.translate()\n     </p>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <p>\n      The translation can also be performed directly from the coding sequence DNA\n     </p>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[21]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-ipython3">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="n">coding_dna</span><span class="o">.</span><span class="n">translate</span><span class="p">()</span>\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n  <div class="jp-Cell-outputWrapper">\n   <div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser">\n   </div>\n   <div class="jp-OutputArea jp-Cell-outputArea">\n    <div class="jp-OutputArea-child jp-OutputArea-executeResult">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n      Out[21]:\n     </div>\n     <div class="jp-RenderedText jp-OutputArea-output jp-OutputArea-executeResult" data-mime-type="text/plain" tabindex="0">\n      <pre class="overflow-x-scroll font-mono">Seq(\'MIS*\')</pre>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <p>\n      Let\'s now consider a longer genetic sequence that has some more interesting structure for us to look at.\n     </p>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[22]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-ipython3">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="n">coding_dna</span> <span class="o">=</span> <span class="n">Seq</span><span class="p">(</span><span class="s2">"ATGGCCATTGTAATGGGCCGCTGAAAGGGTGCCCGATAG"</span><span class="p">)</span>\n<span class="n">coding_dna</span><span class="o">.</span><span class="n">translate</span><span class="p">()</span>\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n  <div class="jp-Cell-outputWrapper">\n   <div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser">\n   </div>\n   <div class="jp-OutputArea jp-Cell-outputArea">\n    <div class="jp-OutputArea-child jp-OutputArea-executeResult">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n      Out[22]:\n     </div>\n     <div class="jp-RenderedText jp-OutputArea-output jp-OutputArea-executeResult" data-mime-type="text/plain" tabindex="0">\n      <pre class="overflow-x-scroll font-mono">Seq(\'MAIVMGR*KGAR*\')</pre>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <p>\n      In both of the sequences above, \'*\' represents the\n      <a href="https://en.wikipedia.org/wiki/Stop_codon">\n       stop codon\n      </a>\n      . A stop codon is a sequence of 3 nucleotides that turns off the protein machinery. In DNA, the stop codons are \'TGA\', \'TAA\', \'TAG\'. Note that this latest sequence has multiple stop codons. It\'s possible to run the machinery up to the first stop codon and pause too.\n     </p>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[23]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-ipython3">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="n">coding_dna</span><span class="o">.</span><span class="n">translate</span><span class="p">(</span><span class="n">to_stop</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n  <div class="jp-Cell-outputWrapper">\n   <div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser">\n   </div>\n   <div class="jp-OutputArea jp-Cell-outputArea">\n    <div class="jp-OutputArea-child jp-OutputArea-executeResult">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n      Out[23]:\n     </div>\n     <div class="jp-RenderedText jp-OutputArea-output jp-OutputArea-executeResult" data-mime-type="text/plain" tabindex="0">\n      <pre class="overflow-x-scroll font-mono">Seq(\'MAIVMGR\')</pre>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <p>\n      We\'re going to introduce a bit of terminology here. A complete coding sequence CDS is a nucleotide sequence of messenger RNA which is made of a whole number of codons (that is, the length of the sequence is a multiple of 3), starts with a "start codon" and ends with a "stop codon". A start codon is basically the opposite of a stop codon and is mostly commonly the sequence "AUG", but can be different (especially if you\'re dealing with something like bacterial DNA).\n     </p>\n     <p>\n      Let\'s see how we can translate a complete CDS of bacterial messenger RNA.\n     </p>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[24]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-ipython3">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="kn">from</span> <span class="nn">Bio.Seq</span> <span class="kn">import</span> <span class="n">Seq</span>\n<span class="n">gene</span> <span class="o">=</span> <span class="n">Seq</span><span class="p">(</span>\n    <span class="s2">"GTGAAAAAGATGCAATCTATCGTACTCGCACTTTCCCTGGTTCTGGTCGCTCCCATGGCA"</span>\n    <span class="s2">"GCACAGGCTGCGGAAATTACGTTAGTCCCGTCAGTAAAATTACAGATAGGCGATCGTGAT"</span>\n    <span class="s2">"AATCGTGGCTATTACTGGGATGGAGGTCACTGGCGCGACCACGGCTGGTGGAAACAACAT"</span>\n    <span class="s2">"TATGAATGGCGAGGCAATCGCTGGCACCTACACGGACCGCCGCCACCGCCGCGCCACCAT"</span>\n    <span class="s2">"AAGAAAGCTCCTCATGATCATCACGGCGGTCATGGTCCAGGCAAACATCACCGCTAA"</span>\n<span class="p">)</span>\n<span class="n">protein_sequence</span> <span class="o">=</span> <span class="n">gene</span><span class="o">.</span><span class="n">translate</span><span class="p">(</span><span class="n">table</span><span class="o">=</span><span class="s2">"Bacterial"</span><span class="p">)</span>\n<span class="nb">print</span><span class="p">(</span><span class="n">protein_sequence</span><span class="p">)</span>\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n  <div class="jp-Cell-outputWrapper">\n   <div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser">\n   </div>\n   <div class="jp-OutputArea jp-Cell-outputArea">\n    <div class="jp-OutputArea-child">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n     </div>\n     <div class="jp-RenderedText jp-OutputArea-output" data-mime-type="text/plain" tabindex="0">\n      <pre class="overflow-x-scroll font-mono">VKKMQSIVLALSLVLVAPMAAQAAEITLVPSVKLQIGDRDNRGYYWDGGHWRDHGWWKQHYEWRGNRWHLHGPPPPPRHHKKAPHDHHGGHGPGKHHR*\n</pre>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[25]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-ipython3">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="n">gene</span><span class="o">.</span><span class="n">translate</span><span class="p">(</span><span class="n">table</span><span class="o">=</span><span class="s2">"Bacterial"</span><span class="p">,</span> <span class="n">to_stop</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n  <div class="jp-Cell-outputWrapper">\n   <div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser">\n   </div>\n   <div class="jp-OutputArea jp-Cell-outputArea">\n    <div class="jp-OutputArea-child jp-OutputArea-executeResult">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n      Out[25]:\n     </div>\n     <div class="jp-RenderedText jp-OutputArea-output jp-OutputArea-executeResult" data-mime-type="text/plain" tabindex="0">\n      <pre class="overflow-x-scroll font-mono">Seq(\'VKKMQSIVLALSLVLVAPMAAQAAEITLVPSVKLQIGDRDNRGYYWDGGHWRDH...HHR\')</pre>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <h1>\n      Handling Annotated Sequences\n      <a class="anchor-link" href="#Handling-Annotated-Sequences">\n       \xb6\n      </a>\n     </h1>\n     <p>\n      Sometimes it will be useful for us to be able to handle annotated sequences where there\'s richer annotations, as in GenBank or EMBL files. For these purposes, we\'ll want to use the\n      <code>\n       SeqRecord\n      </code>\n      class.\n     </p>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[26]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-ipython3">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="kn">from</span> <span class="nn">Bio.SeqRecord</span> <span class="kn">import</span> <span class="n">SeqRecord</span>\n<span class="n">help</span><span class="p">(</span><span class="n">SeqRecord</span><span class="p">)</span>\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n  <div class="jp-Cell-outputWrapper">\n   <div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser">\n   </div>\n   <div class="jp-OutputArea jp-Cell-outputArea">\n    <div class="jp-OutputArea-child">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n     </div>\n     <div class="jp-RenderedText jp-OutputArea-output" data-mime-type="text/plain" tabindex="0">\n      <pre class="overflow-x-scroll font-mono">Help on class SeqRecord in module Bio.SeqRecord:\n\nclass SeqRecord(builtins.object)\n |  SeqRecord(seq, id=\'&lt;unknown id&gt;\', name=\'&lt;unknown name&gt;\', description=\'&lt;unknown description&gt;\', dbxrefs=None, features=None, annotations=None, letter_annotations=None)\n |  \n |  A SeqRecord object holds a sequence and information about it.\n |  \n |  Main attributes:\n |   - id          - Identifier such as a locus tag (string)\n |   - seq         - The sequence itself (Seq object or similar)\n |  \n |  Additional attributes:\n |   - name        - Sequence name, e.g. gene name (string)\n |   - description - Additional text (string)\n |   - dbxrefs     - List of database cross references (list of strings)\n |   - features    - Any (sub)features defined (list of SeqFeature objects)\n |   - annotations - Further information about the whole sequence (dictionary).\n |     Most entries are strings, or lists of strings.\n |   - letter_annotations - Per letter/symbol annotation (restricted\n |     dictionary). This holds Python sequences (lists, strings\n |     or tuples) whose length matches that of the sequence.\n |     A typical use would be to hold a list of integers\n |     representing sequencing quality scores, or a string\n |     representing the secondary structure.\n |  \n |  You will typically use Bio.SeqIO to read in sequences from files as\n |  SeqRecord objects.  However, you may want to create your own SeqRecord\n |  objects directly (see the __init__ method for further details):\n |  \n |  &gt;&gt;&gt; from Bio.Seq import Seq\n |  &gt;&gt;&gt; from Bio.SeqRecord import SeqRecord\n |  &gt;&gt;&gt; record = SeqRecord(Seq("MKQHKAMIVALIVICITAVVAALVTRKDLCEVHIRTGQTEVAVF"),\n |  ...                    id="YP_025292.1", name="HokC",\n |  ...                    description="toxic membrane protein")\n |  &gt;&gt;&gt; print(record)\n |  ID: YP_025292.1\n |  Name: HokC\n |  Description: toxic membrane protein\n |  Number of features: 0\n |  Seq(\'MKQHKAMIVALIVICITAVVAALVTRKDLCEVHIRTGQTEVAVF\')\n |  \n |  If you want to save SeqRecord objects to a sequence file, use Bio.SeqIO\n |  for this.  For the special case where you want the SeqRecord turned into\n |  a string in a particular file format there is a format method which uses\n |  Bio.SeqIO internally:\n |  \n |  &gt;&gt;&gt; print(record.format("fasta"))\n |  &gt;YP_025292.1 toxic membrane protein\n |  MKQHKAMIVALIVICITAVVAALVTRKDLCEVHIRTGQTEVAVF\n |  &lt;BLANKLINE&gt;\n |  \n |  You can also do things like slicing a SeqRecord, checking its length, etc\n |  \n |  &gt;&gt;&gt; len(record)\n |  44\n |  &gt;&gt;&gt; edited = record[:10] + record[11:]\n |  &gt;&gt;&gt; print(edited.seq)\n |  MKQHKAMIVAIVICITAVVAALVTRKDLCEVHIRTGQTEVAVF\n |  &gt;&gt;&gt; print(record.seq)\n |  MKQHKAMIVALIVICITAVVAALVTRKDLCEVHIRTGQTEVAVF\n |  \n |  Methods defined here:\n |  \n |  __add__(self, other)\n |      Add another sequence or string to this sequence.\n |      \n |      The other sequence can be a SeqRecord object, a Seq object (or\n |      similar, e.g. a MutableSeq) or a plain Python string. If you add\n |      a plain string or a Seq (like) object, the new SeqRecord will simply\n |      have this appended to the existing data. However, any per letter\n |      annotation will be lost:\n |      \n |      &gt;&gt;&gt; from Bio import SeqIO\n |      &gt;&gt;&gt; record = SeqIO.read("Quality/solexa_faked.fastq", "fastq-solexa")\n |      &gt;&gt;&gt; print("%s %s" % (record.id, record.seq))\n |      slxa_0001_1_0001_01 ACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTNNNNNN\n |      &gt;&gt;&gt; print(list(record.letter_annotations))\n |      [\'solexa_quality\']\n |      \n |      &gt;&gt;&gt; new = record + "ACT"\n |      &gt;&gt;&gt; print("%s %s" % (new.id, new.seq))\n |      slxa_0001_1_0001_01 ACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTNNNNNNACT\n |      &gt;&gt;&gt; print(list(new.letter_annotations))\n |      []\n |      \n |      The new record will attempt to combine the annotation, but for any\n |      ambiguities (e.g. different names) it defaults to omitting that\n |      annotation.\n |      \n |      &gt;&gt;&gt; from Bio import SeqIO\n |      &gt;&gt;&gt; with open("GenBank/pBAD30.gb") as handle:\n |      ...     plasmid = SeqIO.read(handle, "gb")\n |      &gt;&gt;&gt; print("%s %i" % (plasmid.id, len(plasmid)))\n |      pBAD30 4923\n |      \n |      Now let\'s cut the plasmid into two pieces, and join them back up the\n |      other way round (i.e. shift the starting point on this plasmid, have\n |      a look at the annotated features in the original file to see why this\n |      particular split point might make sense):\n |      \n |      &gt;&gt;&gt; left = plasmid[:3765]\n |      &gt;&gt;&gt; right = plasmid[3765:]\n |      &gt;&gt;&gt; new = right + left\n |      &gt;&gt;&gt; print("%s %i" % (new.id, len(new)))\n |      pBAD30 4923\n |      &gt;&gt;&gt; str(new.seq) == str(right.seq + left.seq)\n |      True\n |      &gt;&gt;&gt; len(new.features) == len(left.features) + len(right.features)\n |      True\n |      \n |      When we add the left and right SeqRecord objects, their annotation\n |      is all consistent, so it is all conserved in the new SeqRecord:\n |      \n |      &gt;&gt;&gt; new.id == left.id == right.id == plasmid.id\n |      True\n |      &gt;&gt;&gt; new.name == left.name == right.name == plasmid.name\n |      True\n |      &gt;&gt;&gt; new.description == plasmid.description\n |      True\n |      &gt;&gt;&gt; new.annotations == left.annotations == right.annotations\n |      True\n |      &gt;&gt;&gt; new.letter_annotations == plasmid.letter_annotations\n |      True\n |      &gt;&gt;&gt; new.dbxrefs == left.dbxrefs == right.dbxrefs\n |      True\n |      \n |      However, we should point out that when we sliced the SeqRecord,\n |      any annotations dictionary or dbxrefs list entries were lost.\n |      You can explicitly copy them like this:\n |      \n |      &gt;&gt;&gt; new.annotations = plasmid.annotations.copy()\n |      &gt;&gt;&gt; new.dbxrefs = plasmid.dbxrefs[:]\n |  \n |  __bool__(self)\n |      Boolean value of an instance of this class (True).\n |      \n |      This behaviour is for backwards compatibility, since until the\n |      __len__ method was added, a SeqRecord always evaluated as True.\n |      \n |      Note that in comparison, a Seq object will evaluate to False if it\n |      has a zero length sequence.\n |      \n |      WARNING: The SeqRecord may in future evaluate to False when its\n |      sequence is of zero length (in order to better match the Seq\n |      object behaviour)!\n |  \n |  __bytes__(self)\n |  \n |  __contains__(self, char)\n |      Implement the \'in\' keyword, searches the sequence.\n |      \n |      e.g.\n |      \n |      &gt;&gt;&gt; from Bio import SeqIO\n |      &gt;&gt;&gt; record = SeqIO.read("Fasta/sweetpea.nu", "fasta")\n |      &gt;&gt;&gt; "GAATTC" in record\n |      False\n |      &gt;&gt;&gt; "AAA" in record\n |      True\n |      \n |      This essentially acts as a proxy for using "in" on the sequence:\n |      \n |      &gt;&gt;&gt; "GAATTC" in record.seq\n |      False\n |      &gt;&gt;&gt; "AAA" in record.seq\n |      True\n |      \n |      Note that you can also use Seq objects as the query,\n |      \n |      &gt;&gt;&gt; from Bio.Seq import Seq\n |      &gt;&gt;&gt; Seq("AAA") in record\n |      True\n |      \n |      See also the Seq object\'s __contains__ method.\n |  \n |  __eq__(self, other)\n |      Define the equal-to operand (not implemented).\n |  \n |  __format__(self, format_spec)\n |      Return the record as a string in the specified file format.\n |      \n |      This method supports the Python format() function and f-strings.\n |      The format_spec should be a lower case string supported by\n |      Bio.SeqIO as a text output file format. Requesting a binary file\n |      format raises a ValueError. e.g.\n |      \n |      &gt;&gt;&gt; from Bio.Seq import Seq\n |      &gt;&gt;&gt; from Bio.SeqRecord import SeqRecord\n |      &gt;&gt;&gt; record = SeqRecord(Seq("MKQHKAMIVALIVICITAVVAALVTRKDLCEVHIRTGQTEVAVF"),\n |      ...                    id="YP_025292.1", name="HokC",\n |      ...                    description="toxic membrane protein")\n |      ...\n |      &gt;&gt;&gt; format(record, "fasta")\n |      \'&gt;YP_025292.1 toxic membrane protein\\nMKQHKAMIVALIVICITAVVAALVTRKDLCEVHIRTGQTEVAVF\\n\'\n |      &gt;&gt;&gt; print(f"Here is {record.id} in FASTA format:\\n{record:fasta}")\n |      Here is YP_025292.1 in FASTA format:\n |      &gt;YP_025292.1 toxic membrane protein\n |      MKQHKAMIVALIVICITAVVAALVTRKDLCEVHIRTGQTEVAVF\n |      &lt;BLANKLINE&gt;\n |      \n |      See also the SeqRecord\'s format() method.\n |  \n |  __ge__(self, other)\n |      Define the greater-than-or-equal-to operand (not implemented).\n |  \n |  __getitem__(self, index)\n |      Return a sub-sequence or an individual letter.\n |      \n |      Slicing, e.g. my_record[5:10], returns a new SeqRecord for\n |      that sub-sequence with some annotation preserved as follows:\n |      \n |      * The name, id and description are kept as-is.\n |      * Any per-letter-annotations are sliced to match the requested\n |        sub-sequence.\n |      * Unless a stride is used, all those features which fall fully\n |        within the subsequence are included (with their locations\n |        adjusted accordingly). If you want to preserve any truncated\n |        features (e.g. GenBank/EMBL source features), you must\n |        explicitly add them to the new SeqRecord yourself.\n |      * With the exception of any molecule type, the annotations\n |        dictionary and the dbxrefs list are not used for the new\n |        SeqRecord, as in general they may not apply to the\n |        subsequence. If you want to preserve them, you must explicitly\n |        copy them to the new SeqRecord yourself.\n |      \n |      Using an integer index, e.g. my_record[5] is shorthand for\n |      extracting that letter from the sequence, my_record.seq[5].\n |      \n |      For example, consider this short protein and its secondary\n |      structure as encoded by the PDB (e.g. H for alpha helices),\n |      plus a simple feature for its histidine self phosphorylation\n |      site:\n |      \n |      &gt;&gt;&gt; from Bio.Seq import Seq\n |      &gt;&gt;&gt; from Bio.SeqRecord import SeqRecord\n |      &gt;&gt;&gt; from Bio.SeqFeature import SeqFeature, SimpleLocation\n |      &gt;&gt;&gt; rec = SeqRecord(Seq("MAAGVKQLADDRTLLMAGVSHDLRTPLTRIRLAT"\n |      ...                     "EMMSEQDGYLAESINKDIEECNAIIEQFIDYLR"),\n |      ...                 id="1JOY", name="EnvZ",\n |      ...                 description="Homodimeric domain of EnvZ from E. coli")\n |      &gt;&gt;&gt; rec.letter_annotations["secondary_structure"] = "  S  SSSSSSHHHHHTTTHHHHHHHHHHHHHHHHHHHHHHTHHHHHHHHHHHHHHHHHHHHHTT  "\n |      &gt;&gt;&gt; rec.features.append(SeqFeature(SimpleLocation(20, 21),\n |      ...                     type = "Site"))\n |      \n |      Now let\'s have a quick look at the full record,\n |      \n |      &gt;&gt;&gt; print(rec)\n |      ID: 1JOY\n |      Name: EnvZ\n |      Description: Homodimeric domain of EnvZ from E. coli\n |      Number of features: 1\n |      Per letter annotation for: secondary_structure\n |      Seq(\'MAAGVKQLADDRTLLMAGVSHDLRTPLTRIRLATEMMSEQDGYLAESINKDIEE...YLR\')\n |      &gt;&gt;&gt; rec.letter_annotations["secondary_structure"]\n |      \'  S  SSSSSSHHHHHTTTHHHHHHHHHHHHHHHHHHHHHHTHHHHHHHHHHHHHHHHHHHHHTT  \'\n |      &gt;&gt;&gt; print(rec.features[0].location)\n |      [20:21]\n |      \n |      Now let\'s take a sub sequence, here chosen as the first (fractured)\n |      alpha helix which includes the histidine phosphorylation site:\n |      \n |      &gt;&gt;&gt; sub = rec[11:41]\n |      &gt;&gt;&gt; print(sub)\n |      ID: 1JOY\n |      Name: EnvZ\n |      Description: Homodimeric domain of EnvZ from E. coli\n |      Number of features: 1\n |      Per letter annotation for: secondary_structure\n |      Seq(\'RTLLMAGVSHDLRTPLTRIRLATEMMSEQD\')\n |      &gt;&gt;&gt; sub.letter_annotations["secondary_structure"]\n |      \'HHHHHTTTHHHHHHHHHHHHHHHHHHHHHH\'\n |      &gt;&gt;&gt; print(sub.features[0].location)\n |      [9:10]\n |      \n |      You can also of course omit the start or end values, for\n |      example to get the first ten letters only:\n |      \n |      &gt;&gt;&gt; print(rec[:10])\n |      ID: 1JOY\n |      Name: EnvZ\n |      Description: Homodimeric domain of EnvZ from E. coli\n |      Number of features: 0\n |      Per letter annotation for: secondary_structure\n |      Seq(\'MAAGVKQLAD\')\n |      \n |      Or for the last ten letters:\n |      \n |      &gt;&gt;&gt; print(rec[-10:])\n |      ID: 1JOY\n |      Name: EnvZ\n |      Description: Homodimeric domain of EnvZ from E. coli\n |      Number of features: 0\n |      Per letter annotation for: secondary_structure\n |      Seq(\'IIEQFIDYLR\')\n |      \n |      If you omit both, then you get a copy of the original record (although\n |      lacking the annotations and dbxrefs):\n |      \n |      &gt;&gt;&gt; print(rec[:])\n |      ID: 1JOY\n |      Name: EnvZ\n |      Description: Homodimeric domain of EnvZ from E. coli\n |      Number of features: 1\n |      Per letter annotation for: secondary_structure\n |      Seq(\'MAAGVKQLADDRTLLMAGVSHDLRTPLTRIRLATEMMSEQDGYLAESINKDIEE...YLR\')\n |      \n |      Finally, indexing with a simple integer is shorthand for pulling out\n |      that letter from the sequence directly:\n |      \n |      &gt;&gt;&gt; rec[5]\n |      \'K\'\n |      &gt;&gt;&gt; rec.seq[5]\n |      \'K\'\n |  \n |  __gt__(self, other)\n |      Define the greater-than operand (not implemented).\n |  \n |  __init__(self, seq, id=\'&lt;unknown id&gt;\', name=\'&lt;unknown name&gt;\', description=\'&lt;unknown description&gt;\', dbxrefs=None, features=None, annotations=None, letter_annotations=None)\n |      Create a SeqRecord.\n |      \n |      Arguments:\n |       - seq         - Sequence, required (Seq or MutableSeq)\n |       - id          - Sequence identifier, recommended (string)\n |       - name        - Sequence name, optional (string)\n |       - description - Sequence description, optional (string)\n |       - dbxrefs     - Database cross references, optional (list of strings)\n |       - features    - Any (sub)features, optional (list of SeqFeature objects)\n |       - annotations - Dictionary of annotations for the whole sequence\n |       - letter_annotations - Dictionary of per-letter-annotations, values\n |         should be strings, list or tuples of the same length as the full\n |         sequence.\n |      \n |      You will typically use Bio.SeqIO to read in sequences from files as\n |      SeqRecord objects.  However, you may want to create your own SeqRecord\n |      objects directly.\n |      \n |      Note that while an id is optional, we strongly recommend you supply a\n |      unique id string for each record.  This is especially important\n |      if you wish to write your sequences to a file.\n |      \n |      You can create a \'blank\' SeqRecord object, and then populate the\n |      attributes later.\n |  \n |  __iter__(self)\n |      Iterate over the letters in the sequence.\n |      \n |      For example, using Bio.SeqIO to read in a protein FASTA file:\n |      \n |      &gt;&gt;&gt; from Bio import SeqIO\n |      &gt;&gt;&gt; record = SeqIO.read("Fasta/loveliesbleeding.pro", "fasta")\n |      &gt;&gt;&gt; for amino in record:\n |      ...     print(amino)\n |      ...     if amino == "L": break\n |      X\n |      A\n |      G\n |      L\n |      &gt;&gt;&gt; print(record.seq[3])\n |      L\n |      \n |      This is just a shortcut for iterating over the sequence directly:\n |      \n |      &gt;&gt;&gt; for amino in record.seq:\n |      ...     print(amino)\n |      ...     if amino == "L": break\n |      X\n |      A\n |      G\n |      L\n |      &gt;&gt;&gt; print(record.seq[3])\n |      L\n |      \n |      Note that this does not facilitate iteration together with any\n |      per-letter-annotation.  However, you can achieve that using the\n |      python zip function on the record (or its sequence) and the relevant\n |      per-letter-annotation:\n |      \n |      &gt;&gt;&gt; from Bio import SeqIO\n |      &gt;&gt;&gt; rec = SeqIO.read("Quality/solexa_faked.fastq", "fastq-solexa")\n |      &gt;&gt;&gt; print("%s %s" % (rec.id, rec.seq))\n |      slxa_0001_1_0001_01 ACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTNNNNNN\n |      &gt;&gt;&gt; print(list(rec.letter_annotations))\n |      [\'solexa_quality\']\n |      &gt;&gt;&gt; for nuc, qual in zip(rec, rec.letter_annotations["solexa_quality"]):\n |      ...     if qual &gt; 35:\n |      ...         print("%s %i" % (nuc, qual))\n |      A 40\n |      C 39\n |      G 38\n |      T 37\n |      A 36\n |      \n |      You may agree that using zip(rec.seq, ...) is more explicit than using\n |      zip(rec, ...) as shown above.\n |  \n |  __le__(self, other)\n |      Define the less-than-or-equal-to operand (not implemented).\n |  \n |  __len__(self)\n |      Return the length of the sequence.\n |      \n |      For example, using Bio.SeqIO to read in a FASTA nucleotide file:\n |      \n |      &gt;&gt;&gt; from Bio import SeqIO\n |      &gt;&gt;&gt; record = SeqIO.read("Fasta/sweetpea.nu", "fasta")\n |      &gt;&gt;&gt; len(record)\n |      309\n |      &gt;&gt;&gt; len(record.seq)\n |      309\n |  \n |  __lt__(self, other)\n |      Define the less-than operand (not implemented).\n |  \n |  __ne__(self, other)\n |      Define the not-equal-to operand (not implemented).\n |  \n |  __radd__(self, other)\n |      Add another sequence or string to this sequence (from the left).\n |      \n |      This method handles adding a Seq object (or similar, e.g. MutableSeq)\n |      or a plain Python string (on the left) to a SeqRecord (on the right).\n |      See the __add__ method for more details, but for example:\n |      \n |      &gt;&gt;&gt; from Bio import SeqIO\n |      &gt;&gt;&gt; record = SeqIO.read("Quality/solexa_faked.fastq", "fastq-solexa")\n |      &gt;&gt;&gt; print("%s %s" % (record.id, record.seq))\n |      slxa_0001_1_0001_01 ACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTNNNNNN\n |      &gt;&gt;&gt; print(list(record.letter_annotations))\n |      [\'solexa_quality\']\n |      \n |      &gt;&gt;&gt; new = "ACT" + record\n |      &gt;&gt;&gt; print("%s %s" % (new.id, new.seq))\n |      slxa_0001_1_0001_01 ACTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTNNNNNN\n |      &gt;&gt;&gt; print(list(new.letter_annotations))\n |      []\n |  \n |  __repr__(self)\n |      Return a concise summary of the record for debugging (string).\n |      \n |      The python built in function repr works by calling the object\'s __repr__\n |      method.  e.g.\n |      \n |      &gt;&gt;&gt; from Bio.Seq import Seq\n |      &gt;&gt;&gt; from Bio.SeqRecord import SeqRecord\n |      &gt;&gt;&gt; rec = SeqRecord(Seq("MASRGVNKVILVGNLGQDPEVRYMPNGGAVANITLATSESWRDKAT"\n |      ...                     "GEMKEQTEWHRVVLFGKLAEVASEYLRKGSQVYIEGQLRTRKWTDQ"\n |      ...                     "SGQDRYTTEVVVNVGGTMQMLGGRQGGGAPAGGNIGGGQPQGGWGQ"\n |      ...                     "PQQPQGGNQFSGGAQSRPQQSAPAAPSNEPPMDFDDDIPF"),\n |      ...                 id="NP_418483.1", name="b4059",\n |      ...                 description="ssDNA-binding protein",\n |      ...                 dbxrefs=["ASAP:13298", "GI:16131885", "GeneID:948570"])\n |      &gt;&gt;&gt; print(repr(rec))\n |      SeqRecord(seq=Seq(\'MASRGVNKVILVGNLGQDPEVRYMPNGGAVANITLATSESWRDKATGEMKEQTE...IPF\'), id=\'NP_418483.1\', name=\'b4059\', description=\'ssDNA-binding protein\', dbxrefs=[\'ASAP:13298\', \'GI:16131885\', \'GeneID:948570\'])\n |      \n |      At the python prompt you can also use this shorthand:\n |      \n |      &gt;&gt;&gt; rec\n |      SeqRecord(seq=Seq(\'MASRGVNKVILVGNLGQDPEVRYMPNGGAVANITLATSESWRDKATGEMKEQTE...IPF\'), id=\'NP_418483.1\', name=\'b4059\', description=\'ssDNA-binding protein\', dbxrefs=[\'ASAP:13298\', \'GI:16131885\', \'GeneID:948570\'])\n |      \n |      Note that long sequences are shown truncated. Also note that any\n |      annotations, letter_annotations and features are not shown (as they\n |      would lead to a very long string).\n |  \n |  __str__(self)\n |      Return a human readable summary of the record and its annotation (string).\n |      \n |      The python built in function str works by calling the object\'s __str__\n |      method.  e.g.\n |      \n |      &gt;&gt;&gt; from Bio.Seq import Seq\n |      &gt;&gt;&gt; from Bio.SeqRecord import SeqRecord\n |      &gt;&gt;&gt; record = SeqRecord(Seq("MKQHKAMIVALIVICITAVVAALVTRKDLCEVHIRTGQTEVAVF"),\n |      ...                    id="YP_025292.1", name="HokC",\n |      ...                    description="toxic membrane protein, small")\n |      &gt;&gt;&gt; print(str(record))\n |      ID: YP_025292.1\n |      Name: HokC\n |      Description: toxic membrane protein, small\n |      Number of features: 0\n |      Seq(\'MKQHKAMIVALIVICITAVVAALVTRKDLCEVHIRTGQTEVAVF\')\n |      \n |      In this example you don\'t actually need to call str explicitly, as the\n |      print command does this automatically:\n |      \n |      &gt;&gt;&gt; print(record)\n |      ID: YP_025292.1\n |      Name: HokC\n |      Description: toxic membrane protein, small\n |      Number of features: 0\n |      Seq(\'MKQHKAMIVALIVICITAVVAALVTRKDLCEVHIRTGQTEVAVF\')\n |      \n |      Note that long sequences are shown truncated.\n |  \n |  count(self, sub, start=None, end=None)\n |      Return the number of non-overlapping occurrences of sub in seq[start:end].\n |      \n |      Optional arguments start and end are interpreted as in slice notation.\n |      This method behaves as the count method of Python strings.\n |  \n |  format(self, format)\n |      Return the record as a string in the specified file format.\n |      \n |      The format should be a lower case string supported as an output\n |      format by Bio.SeqIO, which is used to turn the SeqRecord into a\n |      string.  e.g.\n |      \n |      &gt;&gt;&gt; from Bio.Seq import Seq\n |      &gt;&gt;&gt; from Bio.SeqRecord import SeqRecord\n |      &gt;&gt;&gt; record = SeqRecord(Seq("MKQHKAMIVALIVICITAVVAALVTRKDLCEVHIRTGQTEVAVF"),\n |      ...                    id="YP_025292.1", name="HokC",\n |      ...                    description="toxic membrane protein")\n |      &gt;&gt;&gt; record.format("fasta")\n |      \'&gt;YP_025292.1 toxic membrane protein\\nMKQHKAMIVALIVICITAVVAALVTRKDLCEVHIRTGQTEVAVF\\n\'\n |      &gt;&gt;&gt; print(record.format("fasta"))\n |      &gt;YP_025292.1 toxic membrane protein\n |      MKQHKAMIVALIVICITAVVAALVTRKDLCEVHIRTGQTEVAVF\n |      &lt;BLANKLINE&gt;\n |      \n |      The Python print function automatically appends a new line, meaning\n |      in this example a blank line is shown.  If you look at the string\n |      representation you can see there is a trailing new line (shown as\n |      slash n) which is important when writing to a file or if\n |      concatenating multiple sequence strings together.\n |      \n |      Note that this method will NOT work on every possible file format\n |      supported by Bio.SeqIO (e.g. some are for multiple sequences only,\n |      and binary formats are not supported).\n |  \n |  islower(self)\n |      Return True if all ASCII characters in the record\'s sequence are lowercase.\n |      \n |      If there are no cased characters, the method returns False.\n |  \n |  isupper(self)\n |      Return True if all ASCII characters in the record\'s sequence are uppercase.\n |      \n |      If there are no cased characters, the method returns False.\n |  \n |  lower(self)\n |      Return a copy of the record with a lower case sequence.\n |      \n |      All the annotation is preserved unchanged. e.g.\n |      \n |      &gt;&gt;&gt; from Bio import SeqIO\n |      &gt;&gt;&gt; record = SeqIO.read("Fasta/aster.pro", "fasta")\n |      &gt;&gt;&gt; print(record.format("fasta"))\n |      &gt;gi|3298468|dbj|BAA31520.1| SAMIPF\n |      GGHVNPAVTFGAFVGGNITLLRGIVYIIAQLLGSTVACLLLKFVTNDMAVGVFSLSAGVG\n |      VTNALVFEIVMTFGLVYTVYATAIDPKKGSLGTIAPIAIGFIVGANI\n |      &lt;BLANKLINE&gt;\n |      &gt;&gt;&gt; print(record.lower().format("fasta"))\n |      &gt;gi|3298468|dbj|BAA31520.1| SAMIPF\n |      gghvnpavtfgafvggnitllrgivyiiaqllgstvaclllkfvtndmavgvfslsagvg\n |      vtnalvfeivmtfglvytvyataidpkkgslgtiapiaigfivgani\n |      &lt;BLANKLINE&gt;\n |      \n |      To take a more annotation rich example,\n |      \n |      &gt;&gt;&gt; from Bio import SeqIO\n |      &gt;&gt;&gt; old = SeqIO.read("EMBL/TRBG361.embl", "embl")\n |      &gt;&gt;&gt; len(old.features)\n |      3\n |      &gt;&gt;&gt; new = old.lower()\n |      &gt;&gt;&gt; len(old.features) == len(new.features)\n |      True\n |      &gt;&gt;&gt; old.annotations["organism"] == new.annotations["organism"]\n |      True\n |      &gt;&gt;&gt; old.dbxrefs == new.dbxrefs\n |      True\n |  \n |  reverse_complement(self, id=False, name=False, description=False, features=True, annotations=False, letter_annotations=True, dbxrefs=False)\n |      Return new SeqRecord with reverse complement sequence.\n |      \n |      By default the new record does NOT preserve the sequence identifier,\n |      name, description, general annotation or database cross-references -\n |      these are unlikely to apply to the reversed sequence.\n |      \n |      You can specify the returned record\'s id, name and description as\n |      strings, or True to keep that of the parent, or False for a default.\n |      \n |      You can specify the returned record\'s features with a list of\n |      SeqFeature objects, or True to keep that of the parent, or False to\n |      omit them. The default is to keep the original features (with the\n |      strand and locations adjusted).\n |      \n |      You can also specify both the returned record\'s annotations and\n |      letter_annotations as dictionaries, True to keep that of the parent,\n |      or False to omit them. The default is to keep the original\n |      annotations (with the letter annotations reversed).\n |      \n |      To show what happens to the pre-letter annotations, consider an\n |      example Solexa variant FASTQ file with a single entry, which we\'ll\n |      read in as a SeqRecord:\n |      \n |      &gt;&gt;&gt; from Bio import SeqIO\n |      &gt;&gt;&gt; record = SeqIO.read("Quality/solexa_faked.fastq", "fastq-solexa")\n |      &gt;&gt;&gt; print("%s %s" % (record.id, record.seq))\n |      slxa_0001_1_0001_01 ACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTNNNNNN\n |      &gt;&gt;&gt; print(list(record.letter_annotations))\n |      [\'solexa_quality\']\n |      &gt;&gt;&gt; print(record.letter_annotations["solexa_quality"])\n |      [40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5]\n |      \n |      Now take the reverse complement, here we explicitly give a new\n |      identifier (the old identifier with a suffix):\n |      \n |      &gt;&gt;&gt; rc_record = record.reverse_complement(id=record.id + "_rc")\n |      &gt;&gt;&gt; print("%s %s" % (rc_record.id, rc_record.seq))\n |      slxa_0001_1_0001_01_rc NNNNNNACGTACGTACGTACGTACGTACGTACGTACGTACGTACGT\n |      \n |      Notice that the per-letter-annotations have also been reversed,\n |      although this may not be appropriate for all cases.\n |      \n |      &gt;&gt;&gt; print(rc_record.letter_annotations["solexa_quality"])\n |      [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]\n |      \n |      Now for the features, we need a different example. Parsing a GenBank\n |      file is probably the easiest way to get an nice example with features\n |      in it...\n |      \n |      &gt;&gt;&gt; from Bio import SeqIO\n |      &gt;&gt;&gt; with open("GenBank/pBAD30.gb") as handle:\n |      ...     plasmid = SeqIO.read(handle, "gb")\n |      &gt;&gt;&gt; print("%s %i" % (plasmid.id, len(plasmid)))\n |      pBAD30 4923\n |      &gt;&gt;&gt; plasmid.seq\n |      Seq(\'GCTAGCGGAGTGTATACTGGCTTACTATGTTGGCACTGATGAGGGTGTCAGTGA...ATG\')\n |      &gt;&gt;&gt; len(plasmid.features)\n |      13\n |      \n |      Now, let\'s take the reverse complement of this whole plasmid:\n |      \n |      &gt;&gt;&gt; rc_plasmid = plasmid.reverse_complement(id=plasmid.id+"_rc")\n |      &gt;&gt;&gt; print("%s %i" % (rc_plasmid.id, len(rc_plasmid)))\n |      pBAD30_rc 4923\n |      &gt;&gt;&gt; rc_plasmid.seq\n |      Seq(\'CATGGGCAAATATTATACGCAAGGCGACAAGGTGCTGATGCCGCTGGCGATTCA...AGC\')\n |      &gt;&gt;&gt; len(rc_plasmid.features)\n |      13\n |      \n |      Let\'s compare the first CDS feature - it has gone from being the\n |      second feature (index 1) to the second last feature (index -2), its\n |      strand has changed, and the location switched round.\n |      \n |      &gt;&gt;&gt; print(plasmid.features[1])\n |      type: CDS\n |      location: [1081:1960](-)\n |      qualifiers:\n |          Key: label, Value: [\'araC\']\n |          Key: note, Value: [\'araC regulator of the arabinose BAD promoter\']\n |          Key: vntifkey, Value: [\'4\']\n |      &lt;BLANKLINE&gt;\n |      &gt;&gt;&gt; print(rc_plasmid.features[-2])\n |      type: CDS\n |      location: [2963:3842](+)\n |      qualifiers:\n |          Key: label, Value: [\'araC\']\n |          Key: note, Value: [\'araC regulator of the arabinose BAD promoter\']\n |          Key: vntifkey, Value: [\'4\']\n |      &lt;BLANKLINE&gt;\n |      \n |      You can check this new location, based on the length of the plasmid:\n |      \n |      &gt;&gt;&gt; len(plasmid) - 1081\n |      3842\n |      &gt;&gt;&gt; len(plasmid) - 1960\n |      2963\n |      \n |      Note that if the SeqFeature annotation includes any strand specific\n |      information (e.g. base changes for a SNP), this information is not\n |      amended, and would need correction after the reverse complement.\n |      \n |      Note trying to reverse complement a protein SeqRecord raises an\n |      exception:\n |      \n |      &gt;&gt;&gt; from Bio.Seq import Seq\n |      &gt;&gt;&gt; from Bio.SeqRecord import SeqRecord\n |      &gt;&gt;&gt; protein_rec = SeqRecord(Seq("MAIVMGR"), id="Test",\n |      ...                         annotations={"molecule_type": "protein"})\n |      &gt;&gt;&gt; protein_rec.reverse_complement()\n |      Traceback (most recent call last):\n |         ...\n |      ValueError: Proteins do not have complements!\n |      \n |      If you have RNA without any U bases, it must be annotated as RNA\n |      otherwise it will be treated as DNA by default with A mapped to T:\n |      \n |      &gt;&gt;&gt; from Bio.Seq import Seq\n |      &gt;&gt;&gt; from Bio.SeqRecord import SeqRecord\n |      &gt;&gt;&gt; rna1 = SeqRecord(Seq("ACG"), id="Test")\n |      &gt;&gt;&gt; rna2 = SeqRecord(Seq("ACG"), id="Test", annotations={"molecule_type": "RNA"})\n |      &gt;&gt;&gt; print(rna1.reverse_complement(id="RC", description="unk").format("fasta"))\n |      &gt;RC unk\n |      CGT\n |      &lt;BLANKLINE&gt;\n |      &gt;&gt;&gt; print(rna2.reverse_complement(id="RC", description="RNA").format("fasta"))\n |      &gt;RC RNA\n |      CGU\n |      &lt;BLANKLINE&gt;\n |      \n |      Also note you can reverse complement a SeqRecord using a MutableSeq:\n |      \n |      &gt;&gt;&gt; from Bio.Seq import MutableSeq\n |      &gt;&gt;&gt; from Bio.SeqRecord import SeqRecord\n |      &gt;&gt;&gt; rec = SeqRecord(MutableSeq("ACGT"), id="Test")\n |      &gt;&gt;&gt; rec.seq[0] = "T"\n |      &gt;&gt;&gt; print("%s %s" % (rec.id, rec.seq))\n |      Test TCGT\n |      &gt;&gt;&gt; rc = rec.reverse_complement(id=True)\n |      &gt;&gt;&gt; print("%s %s" % (rc.id, rc.seq))\n |      Test ACGA\n |  \n |  translate(self, table=\'Standard\', stop_symbol=\'*\', to_stop=False, cds=False, gap=None, id=False, name=False, description=False, features=False, annotations=False, letter_annotations=False, dbxrefs=False)\n |      Return new SeqRecord with translated sequence.\n |      \n |      This calls the record\'s .seq.translate() method (which describes\n |      the translation related arguments, like table for the genetic code),\n |      \n |      By default the new record does NOT preserve the sequence identifier,\n |      name, description, general annotation or database cross-references -\n |      these are unlikely to apply to the translated sequence.\n |      \n |      You can specify the returned record\'s id, name and description as\n |      strings, or True to keep that of the parent, or False for a default.\n |      \n |      You can specify the returned record\'s features with a list of\n |      SeqFeature objects, or False (default) to omit them.\n |      \n |      You can also specify both the returned record\'s annotations and\n |      letter_annotations as dictionaries, True to keep that of the parent\n |      (annotations only), or False (default) to omit them.\n |      \n |      e.g. Loading a FASTA gene and translating it,\n |      \n |      &gt;&gt;&gt; from Bio import SeqIO\n |      &gt;&gt;&gt; gene_record = SeqIO.read("Fasta/sweetpea.nu", "fasta")\n |      &gt;&gt;&gt; print(gene_record.format("fasta"))\n |      &gt;gi|3176602|gb|U78617.1|LOU78617 Lathyrus odoratus phytochrome A (PHYA) gene, partial cds\n |      CAGGCTGCGCGGTTTCTATTTATGAAGAACAAGGTCCGTATGATAGTTGATTGTCATGCA\n |      AAACATGTGAAGGTTCTTCAAGACGAAAAACTCCCATTTGATTTGACTCTGTGCGGTTCG\n |      ACCTTAAGAGCTCCACATAGTTGCCATTTGCAGTACATGGCTAACATGGATTCAATTGCT\n |      TCATTGGTTATGGCAGTGGTCGTCAATGACAGCGATGAAGATGGAGATAGCCGTGACGCA\n |      GTTCTACCACAAAAGAAAAAGAGACTTTGGGGTTTGGTAGTTTGTCATAACACTACTCCG\n |      AGGTTTGTT\n |      &lt;BLANKLINE&gt;\n |      \n |      And now translating the record, specifying the new ID and description:\n |      \n |      &gt;&gt;&gt; protein_record = gene_record.translate(table=11,\n |      ...                                        id="phya",\n |      ...                                        description="translation")\n |      &gt;&gt;&gt; print(protein_record.format("fasta"))\n |      &gt;phya translation\n |      QAARFLFMKNKVRMIVDCHAKHVKVLQDEKLPFDLTLCGSTLRAPHSCHLQYMANMDSIA\n |      SLVMAVVVNDSDEDGDSRDAVLPQKKKRLWGLVVCHNTTPRFV\n |      &lt;BLANKLINE&gt;\n |  \n |  upper(self)\n |      Return a copy of the record with an upper case sequence.\n |      \n |      All the annotation is preserved unchanged. e.g.\n |      \n |      &gt;&gt;&gt; from Bio.Seq import Seq\n |      &gt;&gt;&gt; from Bio.SeqRecord import SeqRecord\n |      &gt;&gt;&gt; record = SeqRecord(Seq("acgtACGT"), id="Test",\n |      ...                    description = "Made up for this example")\n |      &gt;&gt;&gt; record.letter_annotations["phred_quality"] = [1, 2, 3, 4, 5, 6, 7, 8]\n |      &gt;&gt;&gt; print(record.upper().format("fastq"))\n |      @Test Made up for this example\n |      ACGTACGT\n |      +\n |      "#$%&amp;\'()\n |      &lt;BLANKLINE&gt;\n |      \n |      Naturally, there is a matching lower method:\n |      \n |      &gt;&gt;&gt; print(record.lower().format("fastq"))\n |      @Test Made up for this example\n |      acgtacgt\n |      +\n |      "#$%&amp;\'()\n |      &lt;BLANKLINE&gt;\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  letter_annotations\n |      Dictionary of per-letter-annotation for the sequence.\n |      \n |      For example, this can hold quality scores used in FASTQ or QUAL files.\n |      Consider this example using Bio.SeqIO to read in an example Solexa\n |      variant FASTQ file as a SeqRecord:\n |      \n |      &gt;&gt;&gt; from Bio import SeqIO\n |      &gt;&gt;&gt; record = SeqIO.read("Quality/solexa_faked.fastq", "fastq-solexa")\n |      &gt;&gt;&gt; print("%s %s" % (record.id, record.seq))\n |      slxa_0001_1_0001_01 ACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTNNNNNN\n |      &gt;&gt;&gt; print(list(record.letter_annotations))\n |      [\'solexa_quality\']\n |      &gt;&gt;&gt; print(record.letter_annotations["solexa_quality"])\n |      [40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5]\n |      \n |      The letter_annotations get sliced automatically if you slice the\n |      parent SeqRecord, for example taking the last ten bases:\n |      \n |      &gt;&gt;&gt; sub_record = record[-10:]\n |      &gt;&gt;&gt; print("%s %s" % (sub_record.id, sub_record.seq))\n |      slxa_0001_1_0001_01 ACGTNNNNNN\n |      &gt;&gt;&gt; print(sub_record.letter_annotations["solexa_quality"])\n |      [4, 3, 2, 1, 0, -1, -2, -3, -4, -5]\n |      \n |      Any python sequence (i.e. list, tuple or string) can be recorded in\n |      the SeqRecord\'s letter_annotations dictionary as long as the length\n |      matches that of the SeqRecord\'s sequence.  e.g.\n |      \n |      &gt;&gt;&gt; len(sub_record.letter_annotations)\n |      1\n |      &gt;&gt;&gt; sub_record.letter_annotations["dummy"] = "abcdefghij"\n |      &gt;&gt;&gt; len(sub_record.letter_annotations)\n |      2\n |      \n |      You can delete entries from the letter_annotations dictionary as usual:\n |      \n |      &gt;&gt;&gt; del sub_record.letter_annotations["solexa_quality"]\n |      &gt;&gt;&gt; sub_record.letter_annotations\n |      {\'dummy\': \'abcdefghij\'}\n |      \n |      You can completely clear the dictionary easily as follows:\n |      \n |      &gt;&gt;&gt; sub_record.letter_annotations = {}\n |      &gt;&gt;&gt; sub_record.letter_annotations\n |      {}\n |      \n |      Note that if replacing the record\'s sequence with a sequence of a\n |      different length you must first clear the letter_annotations dict.\n |  \n |  seq\n |      The sequence itself, as a Seq or MutableSeq object.\n |  \n |  ----------------------------------------------------------------------\n |  Data and other attributes defined here:\n |  \n |  __hash__ = None\n\n</pre>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <p>\n      Let\'s write a bit of code involving\n      <code>\n       SeqRecord\n      </code>\n      and see how it comes out looking.\n     </p>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell jp-mod-noOutputs">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[27]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-ipython3">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="kn">from</span> <span class="nn">Bio.SeqRecord</span> <span class="kn">import</span> <span class="n">SeqRecord</span>\n\n<span class="n">simple_seq</span> <span class="o">=</span> <span class="n">Seq</span><span class="p">(</span><span class="s2">"GATC"</span><span class="p">)</span>\n<span class="n">simple_seq_r</span> <span class="o">=</span> <span class="n">SeqRecord</span><span class="p">(</span><span class="n">simple_seq</span><span class="p">)</span>\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[28]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-ipython3">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="n">simple_seq_r</span><span class="o">.</span><span class="n">id</span> <span class="o">=</span> <span class="s2">"AC12345"</span>\n<span class="n">simple_seq_r</span><span class="o">.</span><span class="n">description</span> <span class="o">=</span> <span class="s2">"Made up sequence"</span>\n<span class="nb">print</span><span class="p">(</span><span class="n">simple_seq_r</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>\n<span class="nb">print</span><span class="p">(</span><span class="n">simple_seq_r</span><span class="o">.</span><span class="n">description</span><span class="p">)</span>\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n  <div class="jp-Cell-outputWrapper">\n   <div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser">\n   </div>\n   <div class="jp-OutputArea jp-Cell-outputArea">\n    <div class="jp-OutputArea-child">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n     </div>\n     <div class="jp-RenderedText jp-OutputArea-output" data-mime-type="text/plain" tabindex="0">\n      <pre class="overflow-x-scroll font-mono">AC12345\nMade up sequence\n</pre>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <p>\n      Let\'s now see how we can use\n      <code>\n       SeqRecord\n      </code>\n      to parse a large fasta file. We\'ll pull down a file hosted on the biopython site.\n     </p>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[29]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-ipython3">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="o">!</span>wget https://raw.githubusercontent.com/biopython/biopython/master/Tests/GenBank/NC_005816.fna\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n  <div class="jp-Cell-outputWrapper">\n   <div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser">\n   </div>\n   <div class="jp-OutputArea jp-Cell-outputArea">\n    <div class="jp-OutputArea-child">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n     </div>\n     <div class="jp-RenderedText jp-OutputArea-output" data-mime-type="text/plain" tabindex="0">\n      <pre class="overflow-x-scroll font-mono">--2023-08-02 14:46:08--  https://raw.githubusercontent.com/biopython/biopython/master/Tests/GenBank/NC_005816.fna\nResolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.108.133, 185.199.109.133, 185.199.110.133, ...\nConnecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.108.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 9853 (9.6K) [text/plain]\nSaving to: ‘NC_005816.fna’\n\nNC_005816.fna       100%[===================&gt;]   9.62K  --.-KB/s    in 0s      \n\n2023-08-02 14:46:08 (78.8 MB/s) - ‘NC_005816.fna’ saved [9853/9853]\n\n</pre>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[30]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-ipython3">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="kn">from</span> <span class="nn">Bio</span> <span class="kn">import</span> <span class="n">SeqIO</span>\n\n<span class="n">record</span> <span class="o">=</span> <span class="n">SeqIO</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s2">"NC_005816.fna"</span><span class="p">,</span> <span class="s2">"fasta"</span><span class="p">)</span>\n<span class="n">record</span>\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n  <div class="jp-Cell-outputWrapper">\n   <div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser">\n   </div>\n   <div class="jp-OutputArea jp-Cell-outputArea">\n    <div class="jp-OutputArea-child jp-OutputArea-executeResult">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n      Out[30]:\n     </div>\n     <div class="jp-RenderedText jp-OutputArea-output jp-OutputArea-executeResult" data-mime-type="text/plain" tabindex="0">\n      <pre class="overflow-x-scroll font-mono">SeqRecord(seq=Seq(\'TGTAACGAACGGTGCAATAGTGATCCACACCCAACGCCTGAAATCAGATCCAGG...CTG\'), id=\'gi|45478711|ref|NC_005816.1|\', name=\'gi|45478711|ref|NC_005816.1|\', description=\'gi|45478711|ref|NC_005816.1| Yersinia pestis biovar Microtus str. 91001 plasmid pPCP1, complete sequence\', dbxrefs=[])</pre>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <p>\n      Note how there\'s a number of annotations attached to the\n      <code>\n       SeqRecord\n      </code>\n      object!\n     </p>\n     <p>\n      Let\'s take a closer look.\n     </p>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[31]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-ipython3">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="n">record</span><span class="o">.</span><span class="n">id</span>\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n  <div class="jp-Cell-outputWrapper">\n   <div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser">\n   </div>\n   <div class="jp-OutputArea jp-Cell-outputArea">\n    <div class="jp-OutputArea-child jp-OutputArea-executeResult">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n      Out[31]:\n     </div>\n     <div class="jp-RenderedText jp-OutputArea-output jp-OutputArea-executeResult" data-mime-type="text/plain" tabindex="0">\n      <pre class="overflow-x-scroll font-mono">\'gi|45478711|ref|NC_005816.1|\'</pre>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[32]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-ipython3">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="n">record</span><span class="o">.</span><span class="n">name</span>\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n  <div class="jp-Cell-outputWrapper">\n   <div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser">\n   </div>\n   <div class="jp-OutputArea jp-Cell-outputArea">\n    <div class="jp-OutputArea-child jp-OutputArea-executeResult">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n      Out[32]:\n     </div>\n     <div class="jp-RenderedText jp-OutputArea-output jp-OutputArea-executeResult" data-mime-type="text/plain" tabindex="0">\n      <pre class="overflow-x-scroll font-mono">\'gi|45478711|ref|NC_005816.1|\'</pre>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[33]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-ipython3">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="n">record</span><span class="o">.</span><span class="n">description</span>\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n  <div class="jp-Cell-outputWrapper">\n   <div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser">\n   </div>\n   <div class="jp-OutputArea jp-Cell-outputArea">\n    <div class="jp-OutputArea-child jp-OutputArea-executeResult">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n      Out[33]:\n     </div>\n     <div class="jp-RenderedText jp-OutputArea-output jp-OutputArea-executeResult" data-mime-type="text/plain" tabindex="0">\n      <pre class="overflow-x-scroll font-mono">\'gi|45478711|ref|NC_005816.1| Yersinia pestis biovar Microtus str. 91001 plasmid pPCP1, complete sequence\'</pre>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <p>\n      Let\'s now look at the same sequence, but downloaded from GenBank. We\'ll download the hosted file from the biopython tutorial website as before.\n     </p>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[34]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-ipython3">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="o">!</span>wget https://raw.githubusercontent.com/biopython/biopython/master/Tests/GenBank/NC_005816.gb\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n  <div class="jp-Cell-outputWrapper">\n   <div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser">\n   </div>\n   <div class="jp-OutputArea jp-Cell-outputArea">\n    <div class="jp-OutputArea-child">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n     </div>\n     <div class="jp-RenderedText jp-OutputArea-output" data-mime-type="text/plain" tabindex="0">\n      <pre class="overflow-x-scroll font-mono">--2023-08-02 14:46:08--  https://raw.githubusercontent.com/biopython/biopython/master/Tests/GenBank/NC_005816.gb\nResolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.108.133, 185.199.109.133, 185.199.110.133, ...\nConnecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.108.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 31838 (31K) [text/plain]\nSaving to: ‘NC_005816.gb’\n\nNC_005816.gb        100%[===================&gt;]  31.09K  --.-KB/s    in 0.002s  \n\n2023-08-02 14:46:08 (12.7 MB/s) - ‘NC_005816.gb’ saved [31838/31838]\n\n</pre>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[35]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-ipython3">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="kn">from</span> <span class="nn">Bio</span> <span class="kn">import</span> <span class="n">SeqIO</span>\n\n<span class="n">record</span> <span class="o">=</span> <span class="n">SeqIO</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s2">"NC_005816.gb"</span><span class="p">,</span> <span class="s2">"genbank"</span><span class="p">)</span>\n<span class="n">record</span>\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n  <div class="jp-Cell-outputWrapper">\n   <div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser">\n   </div>\n   <div class="jp-OutputArea jp-Cell-outputArea">\n    <div class="jp-OutputArea-child jp-OutputArea-executeResult">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n      Out[35]:\n     </div>\n     <div class="jp-RenderedText jp-OutputArea-output jp-OutputArea-executeResult" data-mime-type="text/plain" tabindex="0">\n      <pre class="overflow-x-scroll font-mono">SeqRecord(seq=Seq(\'TGTAACGAACGGTGCAATAGTGATCCACACCCAACGCCTGAAATCAGATCCAGG...CTG\'), id=\'NC_005816.1\', name=\'NC_005816\', description=\'Yersinia pestis biovar Microtus str. 91001 plasmid pPCP1, complete sequence\', dbxrefs=[\'Project:58037\'])</pre>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <h2>\n      SeqIO Objects\n      <a class="anchor-link" href="#SeqIO-Objects">\n       \xb6\n      </a>\n     </h2>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <h1>\n      .count() Method\n      <a class="anchor-link" href="#.count()-Method">\n       \xb6\n      </a>\n     </h1>\n     <p>\n      The .count() method in Biopython\'s Seq object behaves similar to the .count() method of Python strings. It returns the number of non-overlapping occurrences of a specific subsequence within the sequence.\n     </p>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[36]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-ipython3">\n       <pre class="overflow-x-scroll font-mono"><span></span><span class="kn">from</span> <span class="nn">Bio.Seq</span> <span class="kn">import</span> <span class="n">Seq</span>\n<span class="n">my_seq</span> <span class="o">=</span> <span class="n">Seq</span><span class="p">(</span><span class="s2">"AGTACACATTG"</span><span class="p">)</span>\n<span class="n">count_a</span> <span class="o">=</span> <span class="n">my_seq</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="s1">\'A\'</span><span class="p">)</span>\n<span class="n">count_tg</span> <span class="o">=</span> <span class="n">my_seq</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="s1">\'TG\'</span><span class="p">)</span>\n<span class="nb">print</span><span class="p">(</span><span class="n">count_a</span><span class="p">)</span>   <span class="c1"># Output: 3</span>\n<span class="nb">print</span><span class="p">(</span><span class="n">count_tg</span><span class="p">)</span>  <span class="c1"># Output: 1</span>\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n  <div class="jp-Cell-outputWrapper">\n   <div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser">\n   </div>\n   <div class="jp-OutputArea jp-Cell-outputArea">\n    <div class="jp-OutputArea-child">\n     <div class="jp-OutputPrompt jp-OutputArea-prompt">\n     </div>\n     <div class="jp-RenderedText jp-OutputArea-output" data-mime-type="text/plain" tabindex="0">\n      <pre class="overflow-x-scroll font-mono">4\n1\n</pre>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <h1>\n      MutableSeq objects\n      <a class="anchor-link" href="#MutableSeq-objects">\n       \xb6\n      </a>\n     </h1>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-MarkdownCell jp-Notebook-cell">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n    </div>\n    <div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown">\n     <p>\n      Just like the normal Python string, the Seq object is “read only”, or in Python terminology, immutable. Apart from wanting the Seq object to act like a string, this is also a useful default since in many biological applications you want to ensure you are not changing your sequence data:\nyou can convert it into a mutable sequence (a MutableSeq object) and do pretty much anything you want with it\n     </p>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell jp-mod-noOutputs">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[37]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-ipython3">\n       <pre class="overflow-x-scroll font-mono"><span></span> <span class="kn">from</span> <span class="nn">Bio.Seq</span> <span class="kn">import</span> <span class="n">MutableSeq</span>\n <span class="n">mutable_seq</span> <span class="o">=</span> <span class="n">MutableSeq</span><span class="p">(</span><span class="s2">"GCCATTGTAATGGGCCGCTGAAAGGGTGCCCGA"</span><span class="p">)</span>\n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n <div class="jp-Cell jp-CodeCell jp-Notebook-cell jp-mod-noOutputs">\n  <div class="jp-Cell-inputWrapper" tabindex="0">\n   <div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser">\n   </div>\n   <div class="jp-InputArea jp-Cell-inputArea">\n    <div class="jp-InputPrompt jp-InputArea-prompt">\n     In\xa0[37]:\n    </div>\n    <div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">\n     <div class="cm-editor cm-s-jupyter">\n      <div class="highlight hl-ipython3">\n       <pre class="overflow-x-scroll font-mono"><span></span> \n</pre>\n      </div>\n     </div>\n    </div>\n   </div>\n  </div>\n </div>\n</main>\n'},i=t(7294),o=t(7466),r=t.n(o);let d=()=>((0,i.useEffect)(()=>{var n,e;null===(n=document.getElementsByClassName("scroll-nav")[0])||void 0===n||n.remove();let t=document.querySelector(".notebook"),s=document.querySelector(".notebook");s&&t&&r().init(t,{sections:"h1, h2",insertTarget:s,insertLocation:"after"}),null==MathJax||null===(e=MathJax.Hub)||void 0===e||e.Queue(["Typeset",MathJax.Hub])},[]),(0,s.jsx)("div",{className:"overflow-x-scroll",dangerouslySetInnerHTML:{__html:"".concat(l.html," ").concat(p.Z)}}));d.Layout=a.Z;var c=d}},function(n){n.O(0,[2443,9774,2888,179],function(){return n(n.s=9533)}),_N_E=n.O()}]);